{
	"meta": {
		"exported_on": 1610595388785,
		"version": "1.19.0"
	},
	"data": {
		"posts": [
			{
				"id": "ckjwawqwm0007esu35aqhhufu",
				"title": "93 MILLION MILES吉他弹唱教学",
				"html": "\n93 Million Miles是美国知名摇滚乐队30 Seconds To Mars于2002年8月27日推出的乐队首张同名专辑《30 Seconds To Mars》的一首歌曲。\n<!--more-->\n<object id=\"player_obj\" data=\"http://cache.tv.qq.com/qqplayerout.swf?v=u1059giucs3&amp;auto=1&amp;playertype=4\" width=\"660\" height=\"495\" type=\"application/x-shockwave-flash\"><param name=\"wmode\" value=\"transparent\"><param name=\"allowfullscreen\" value=\"true\"><param name=\"allowscriptaccess\" value=\"always\"><param name=\"allownetworking\" value=\"all\"></object>",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2014-04-10T16:20:23+08:00",
				"created_by": "",
				"updated_at": "2015-06-10T22:30:03+08:00",
				"updated_by": "",
				"published_at": "2014-04-10T16:20:23+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqwx000eesu30dyob0j4",
				"title": "wake me up when September ends吉他教程",
				"html": "\nWake Me Up When September Ends是收藏在Green Day（绿日乐队）《American Idiot 》专辑里一首非常好听的歌曲，中文名称《在九月结束的时候唤醒我》（《九月末叫醒我》），也有网友幽默地将该歌曲名翻译成《一觉睡到国庆节》。\n<!--more-->\n<object id=\"player_obj\" data=\"http://cache.tv.qq.com/qqplayerout.swf?v=b1059z81dj6&amp;auto=1&amp;playertype=4\" width=\"660\" height=\"495\" type=\"application/x-shockwave-flash\"><param name=\"wmode\" value=\"transparent\"><param name=\"allowfullscreen\" value=\"true\"><param name=\"allowscriptaccess\" value=\"always\"><param name=\"allownetworking\" value=\"all\"></object>",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2014-04-10T16:25:19+08:00",
				"created_by": "",
				"updated_at": "2015-06-10T22:29:35+08:00",
				"updated_by": "",
				"published_at": "2014-04-10T16:25:19+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqwg0004esu354vicb8x",
				"title": "In My Life原唱：The Beatles",
				"html": "\nThe Beatles是一支成立于1960年的英国利物浦摇滚乐队，乐队在流行音乐史的商业和艺术上都取得了巨大成功。乐队最著名的成员为John Lennon，Paul McCartney，George Harrison，以及Ringo Starr。<!--more-->The Beatles在20世纪60年代掀起了一阵“Beatlemania”（披头士狂热），引领了英伦入侵（British Invasion），是20世纪60年代的文化标志之一。\n<object id=\"player_obj\" data=\"http://cache.tv.qq.com/qqplayerout.swf?v=o1059g6d2z3&amp;auto=1&amp;playertype=4\" width=\"660\" height=\"495\" type=\"application/x-shockwave-flash\"><param name=\"wmode\" value=\"transparent\"><param name=\"allowfullscreen\" value=\"true\"><param name=\"allowscriptaccess\" value=\"always\"><param name=\"allownetworking\" value=\"all\"></object>",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2014-04-10T16:27:03+08:00",
				"created_by": "",
				"updated_at": "2015-06-10T22:29:06+08:00",
				"updated_by": "",
				"published_at": "2014-04-10T16:27:03+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqwu000desu307ep0tz1",
				"title": "吉他教学Heaven - Bryan Adams",
				"html": "\n布莱恩-亚当斯(Bryan Adams)是八十年代崛起的最受欢迎的摇滚歌手之一，他制作了一系列白金唱片并多次入围十大流行歌曲排行榜。<!--more-->在他演唱生涯的最初阶段，他主要唱摇滚歌曲，随着事业的进展，他却以民歌而广为人知。\n<object id=\"player_obj\" data=\"http://cache.tv.qq.com/qqplayerout.swf?v=u1060jptgyb&amp;auto=1&amp;playertype=4\" width=\"660\" height=\"495\" type=\"application/x-shockwave-flash\"><param name=\"wmode\" value=\"transparent\"><param name=\"allowfullscreen\" value=\"true\"><param name=\"allowscriptaccess\" value=\"always\"><param name=\"allownetworking\" value=\"all\"></object>",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2014-04-10T16:28:21+08:00",
				"created_by": "",
				"updated_at": "2015-06-10T22:28:44+08:00",
				"updated_by": "",
				"published_at": "2014-04-10T16:28:21+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqwo0008esu3fpq4gai1",
				"title": "She_Will_Be_Loved_原唱：Maroon_5_来源：CifraCl",
				"html": "\n吉他教学：She_Will_Be_Loved_原唱：Maroon_5_来源：CifraCl\n<!--more-->\n<object id=\"player_obj\" data=\"http://cache.tv.qq.com/qqplayerout.swf?v=b10603knma9&amp;auto=1&amp;playertype=4\" width=\"660\" height=\"495\" type=\"application/x-shockwave-flash\"><param name=\"wmode\" value=\"transparent\"><param name=\"allowfullscreen\" value=\"true\"><param name=\"allowscriptaccess\" value=\"always\"><param name=\"allownetworking\" value=\"all\"></object>",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2014-04-10T16:29:32+08:00",
				"created_by": "",
				"updated_at": "2015-06-10T13:56:26+08:00",
				"updated_by": "",
				"published_at": "2014-04-10T16:29:32+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqwq0009esu3dczxbp22",
				"title": "青春，彩色的单调",
				"html": "\n一下子，大学就准备结束了，青春也就跟着结束了。其实呢，学到的还是挺多的，懂到的还是挺深的，生活真的还蛮精彩了。笑也多，泪水也多。有追求，有回报。知己闺蜜都有。\n<!--more-->\n\n只是，有一个故事，一个人生最重要的故事，却似乎从没开始——爱情！\n\n我喜欢过蛮多人的，也追求过蛮多人的，努力过，坚持过，一起笑过一起哭过，却全都只能叫友情。",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2014-04-17T22:44:38+08:00",
				"created_by": "",
				"updated_at": "2015-06-10T13:55:38+08:00",
				"updated_by": "",
				"published_at": "2014-04-17T22:44:38+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqx3000jesu3623pcegl",
				"title": "AngularJS：在Windows上安装Yeoman",
				"html": "\nYeoman 是 Google 官方推荐的一款 AngularJS 开发工具，详细描述参见以下站点：\n\n  http://yeoman.io/index.html\n\n         它 github 上的路径位于：\n\n         https://github.com/yeoman/yeoman\n<!--more-->\n大家都知道，跟我天朝上国相比，老外们都比较穷，所以他们都很喜欢在 Linux 上折腾，所以 Yeoman 这个东西是针对 Linux 设计的，想要在 Windows 上安装使用有点麻烦。\n\n         网上有很多安装教程，经小僧实测都无法安装成功。\n\n         没办法啦，只能亲自动手了。\n\n         好，看我的。\n\n \n\n【注意】请严格按照下面的安装步骤进行，否则不保证能安装成功：\n\n1、安装 Ruby\n\n    自己到 Ruby 官方下载最新安装包： http://rubyinstaller.org/downloads/\n\n注意看好自己的操作系统版本，比如我的是 Win7 64 位，选的就是 Ruby 2.0.0-p195 (x64) 。\n\n \n \n\n注意把上面三个框都勾起。\n\n安装完成之后，打开命令行，输入以下命令：\n\nruby –v\n\n如果成功打出了版本号，说明 Ruby 安装成功，如下图：\n\n \n \n\n  2、 安装 Compass\n\nCompass 是一个用来开发 CSS 的工具，官方站点： http://compass-style.org/ 。后面 Yeoman 启动的时候需要依赖这个工具，所以是必须安装的。\n\n官方介绍了使用 gem 自动安装的方式，可惜，这种方法不成功，因为自动获取的那个 URL 被墙掉了！！！（跟我一起高呼：方校长威武荡漾！方校长永垂不朽！）\n\n再看我口型儿： WQNMLGB ！\n\n次奥！既然没法自动安装，那咱就手动吧。\n\n进入以下站点： http://rubygems.org/gems/compass ，向下拉，找到“ Runtime Dependencies ”，先把那 3 个需要依赖的东西装上（分别点击那 3 个链接，找到安装命令）。\n\n然后下载【最新的】 compass 的 gem 包，下载完成之后，从本地来安装它，命令如下：\n\n   gem install --local G:\\compass***.gem\n\n   （注意你自己的存放路径！）\n\n \n \n\n3、安装 NodeJS\n\n      http://nodejs.org/download/\n\n   选好版本自己装。\n\n4、 安装 python 环境\n\nhttp://www.python.org/download/\n\n      选好版本自己装，装完自己确认 python 的环境变量有没有配好。\n\n5、开始安装 Yeoman\n\n    从命令行进入 nodejs 的安装目录，例如我的目录是：\n\n       E:\\Program Files\\nodejs\\node_modules\n\n   【注意】如果你把 Yeoman 安装到了其它目录，请记好安装路径（等会儿要配环境变量）。\n\n输入以下命令开始安装 Yeoman ：\n\n       npm install yeoman\n\n \n \n\n如果你网速比较慢可能会下载很久，等吧！\n\n看到下面这张图说明 Yeoman 安装成功：\n\n \n \n\n6、开始测试 Yeoman\n\n      首先把 Yeoman 的环境变量加上，例如我的位于：\n\n           E:\\Program Files\\nodejs\\node_modules\\.bin\n\n \n \n\n         加上之后就可以在任意目录运行 yeoman 了，你懂的。\n\n         好，还是在下面的目录里面： E:\\Program Files\\nodejs\\node_modules\n\n         运行 yeoman init\n\n \n \n\n         所有问题全部输入 y ，然后回车。 yeoman 会自动创建一些目录和文件。\n\n         完成之后输入： yeoman server 启动服务器。\n\n \n \n\n         启动成功之后会自动弹出你的默认浏览器，显示如下内容：\n\n \n \n\n         如果看到以上内容，说明 yeoman 环境已经 OK 了！！！\n\n         如果有报错起不来，使用以下命令尝试强制启动：\n\n         yeoman server –force\n\n         如果强制启动成功，就算 ok ，有一些小错误可以无视，不影响开发的（ Yeoman 官方一直在更新一些鸟东西，版本不是太稳定）。\n\n        \n\n如果有其它开发环境方面的问题或者 AngularJS 相关的问题，可以加入我们进行讨论。",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2014-04-19T22:04:11+08:00",
				"created_by": "",
				"updated_at": "2015-06-10T13:55:11+08:00",
				"updated_by": "",
				"published_at": "2014-04-19T22:04:11+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqxp0011esu398ergoiv",
				"title": "Set Fire to the Rain吉他教学",
				"html": "\n《Set Fire to the Rain》收录于Adele的第二张录音室专辑《21》中，作为专辑的第三首主打单曲，《Set Fire to the Rain》在没有MV，没有宣传的情况下，连续夺得Billboard单曲榜2周冠军，实现了一张专辑诞生三首冠军单曲的壮举。<!--more-->而Adele是第一位也是唯一一位在美国取得该成绩的英国女歌手。\n<object id=\"player_obj\" data=\"http://cache.tv.qq.com/qqplayerout.swf?v=d1059uicai7&amp;auto=1&amp;playertype=4\" width=\"660\" height=\"495\" type=\"application/x-shockwave-flash\"><param name=\"wmode\" value=\"transparent\"><param name=\"allowfullscreen\" value=\"true\"><param name=\"allowscriptaccess\" value=\"always\"><param name=\"allownetworking\" value=\"all\"></object>",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2014-04-20T21:52:57+08:00",
				"created_by": "",
				"updated_at": "2015-06-10T22:27:15+08:00",
				"updated_by": "",
				"published_at": "2014-04-20T21:52:57+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqxt0016esu324tu547i",
				"title": "吉他教学Viva La Vida 原唱：Coldplay",
				"html": "\n《Viva la Vida or Death and All His Friends》 是Coldplay出道10年来第四张专辑，于2008年6月12日发行。<!--more-->专辑的名称来自于西班牙语，Viva la Vida or Death and All His Friends可以直译为生命万岁或死亡和他的所有朋友们。这也反映了这一专辑的主题“生与死”。专辑的封面是描述法国七月革命时期的名画自由引导人民。\n<object id=\"player_obj\" data=\"http://cache.tv.qq.com/qqplayerout.swf?v=z1059sbupv8&amp;auto=1&amp;playertype=4\" width=\"660\" height=\"495\" type=\"application/x-shockwave-flash\"><param name=\"wmode\" value=\"transparent\"><param name=\"allowfullscreen\" value=\"true\"><param name=\"allowscriptaccess\" value=\"always\"><param name=\"allownetworking\" value=\"all\"></object>",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2014-04-20T22:31:41+08:00",
				"created_by": "",
				"updated_at": "2015-06-10T22:26:47+08:00",
				"updated_by": "",
				"published_at": "2014-04-20T22:31:41+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqxi000tesu36eoa3f27",
				"title": "《need you now 》吉他弹唱",
				"html": "\nNeed You Now是美国乡村乐队Lady Antebellum第二张录音室专辑《Need You Now》（2010年）中的同名主打单曲，于2009年8月首发，登上Billboard Hot 100亚军位置<!--more-->，为乐队最好成绩，歌曲带有60年代R&B灵魂乐和富于感情表达的70年代的独特风格的音乐穿梭在格莱美激动之夜。获得第53届格莱美年度制作、年度歌曲、年度最佳乡村歌曲、年度最佳乡村乐队/组合四项大奖。\n<object id=\"player_obj\" data=\"http://cache.tv.qq.com/qqplayerout.swf?v=a1059lgznh7&amp;auto=1&amp;playertype=4\" width=\"660\" height=\"495\" type=\"application/x-shockwave-flash\"><param name=\"wmode\" value=\"transparent\"><param name=\"allowfullscreen\" value=\"true\"><param name=\"allowscriptaccess\" value=\"always\"><param name=\"allownetworking\" value=\"all\"></object>",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2014-04-20T22:34:13+08:00",
				"created_by": "",
				"updated_at": "2015-06-10T22:26:21+08:00",
				"updated_by": "",
				"published_at": "2014-04-20T22:34:13+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqxf000qesu3egkt8ys8",
				"title": "Hotel California-Eagles吉他教学",
				"html": "\n《Hotel California》是二十世纪七十年代美国著名乡村摇滚乐队Eagles（老鹰乐队）的巅峰之作，单曲发行于1977年2月，收录在乐队第五张录音室专辑《Hotel California》中。<!--more-->歌曲在The 500 Greatest Songs of All Time中排列第49位，2004年《Guitar World》杂志评选的100 Greatest Rock Guitar Solos中排行第八。\n<object id=\"player_obj\" data=\"http://cache.tv.qq.com/qqplayerout.swf?v=g1059nfwa42&amp;auto=1&amp;playertype=4\" width=\"660\" height=\"495\" type=\"application/x-shockwave-flash\"><param name=\"wmode\" value=\"transparent\"><param name=\"allowfullscreen\" value=\"true\"><param name=\"allowscriptaccess\" value=\"always\"><param name=\"allownetworking\" value=\"all\"></object>",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2014-04-20T22:36:23+08:00",
				"created_by": "",
				"updated_at": "2015-06-10T22:25:42+08:00",
				"updated_by": "",
				"published_at": "2014-04-20T22:36:23+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqxv0019esu3hzvzfimo",
				"title": "Someone Like You 原唱：Adele 来源：CifraClub",
				"html": "\n《Someone Like You》是英国著名流行女歌手Adele的第二张个人录音室专辑《21》的第二首单曲，这首单曲的创作灵感来源于Adele自身的一段破碎的恋情。<!--more-->该单曲也是Adele在美国的第二首冠军单曲，在2011年Billboard单曲排行榜中一共夺得5周单曲冠军，并且是公告牌史上第一支只有钢琴而无其他乐器伴奏的冠军单曲。2012年第54届格莱美颁奖晚会上，Adele凭借该单曲获得最佳流行歌手。《Someone Like You》旋律优美而忧伤，这首歌不仅在向人们诉说着失恋的痛苦；同时也告诉人们要勇敢去追寻爱情，即使最后爱情破碎也要勇敢走下去。Adele那富有磁性的声音将这首伤心的情歌演绎的完美无瑕，在2011年感动了无数的乐迷。这首歌在包括美国和英国在内的14个国家夺得冠军，亦是Adele的代表歌曲之一。\n\n<object id=\"player_obj\" data=\"http://cache.tv.qq.com/qqplayerout.swf?v=k1059sgi1q1&amp;auto=1&amp;playertype=4\" width=\"660\" height=\"495\" type=\"application/x-shockwave-flash\"><param name=\"wmode\" value=\"transparent\"><param name=\"allowfullscreen\" value=\"true\"><param name=\"allowscriptaccess\" value=\"always\"><param name=\"allownetworking\" value=\"all\"></object>",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2014-04-20T22:37:53+08:00",
				"created_by": "",
				"updated_at": "2015-06-10T22:25:15+08:00",
				"updated_by": "",
				"published_at": "2014-04-20T22:37:53+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqxm000yesu3h2b2cise",
				"title": "教你弹Coldplay的Yellow",
				"html": "\n《Yellow》为玩酷乐队2000年EP里的同名主打歌，关于yellow的翻译一直争议不断，有说歌颂母亲的，有说描摹吸毒者心境的。酷玩乐队的魅力正在于此。\n<!--more-->\n<object id=\"player_obj\" data=\"http://cache.tv.qq.com/qqplayerout.swf?v=h1059ksktu0&amp;auto=1&amp;playertype=4\" width=\"660\" height=\"495\" type=\"application/x-shockwave-flash\"><param name=\"wmode\" value=\"transparent\"><param name=\"allowfullscreen\" value=\"true\"><param name=\"allowscriptaccess\" value=\"always\"><param name=\"allownetworking\" value=\"all\"></object>",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2014-04-20T22:39:19+08:00",
				"created_by": "",
				"updated_at": "2015-06-10T22:24:51+08:00",
				"updated_by": "",
				"published_at": "2014-04-20T22:39:19+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqx8000lesu34y7hebuw",
				"title": "One Ok Rock《No Scared》",
				"html": "\nMV最爱One Ok Rock《No Scared》\n<!--more-->\n<object id=\"player_obj\" data=\"http://cache.tv.qq.com/qqplayerout.swf?v=t1059u7gm6a&amp;auto=1&amp;playertype=4\" width=\"660\" height=\"495\" type=\"application/x-shockwave-flash\"><param name=\"wmode\" value=\"transparent\"><param name=\"allowfullscreen\" value=\"true\"><param name=\"allowscriptaccess\" value=\"always\"><param name=\"allownetworking\" value=\"all\"></object>",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2014-04-20T22:41:05+08:00",
				"created_by": "",
				"updated_at": "2015-06-10T13:52:13+08:00",
				"updated_by": "",
				"published_at": "2014-04-20T22:41:05+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqwa0002esu34vagdzje",
				"title": "6点科技，团队合作",
				"html": "\n大家好，我叫李兴广，网名Sterne Lee（斯特恩李），目前准备组建团队——6点科技！\n\n本人从高二就用Linux，共有三四年了，现在是Win8，我自学过C语言，看过Java，Object-C和Python，玩过Android开发，学了Flash，C++，PHP，Nodejs，C#，PS等等，喜欢互联网设计、英文歌、吉他等等！\n\n目前在北京实习，平常生活想法特别多，因此想努力去实现这些想法！\n本人91年，希望能邀请到五位年轻有活力的小伙伴合作成六6点科技团队：3位技术开发爱好者，1位设计爱好者，一位策划员！本人曾在大学组建过六回科技团队，希望继续传承我们自由创意的理念！\n\n如果你也有跟我一样的想法，或者更有创意的Good Ideas，我在这里等你们！\n主专网站设计和移动端软件开发！\n\n联系我请到我的网站：http://sterne.me/\n\n在此感谢和期待你们成为我最好的朋友！\n\n",
				"featured": 0,
				"page": 1,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2014-04-21T09:34:29+08:00",
				"created_by": "",
				"updated_at": "2015-06-11T12:02:20+08:00",
				"updated_by": "",
				"published_at": "2014-04-21T09:34:29+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawr6j009tesu3d5s00q1e",
				"title": "My CV",
				"html": "\n### My Name is Sterne Lee,the computer enthusiasts.\n\n#### 简介\n李兴广 1991年4月出生，男（未婚），前端技术爱好者。\n我是中国共产党员，户籍是广西省玉林，汉族，身高167，\n邮箱：sternelee@gmail.com。\n#### 学历\n本人是广西师范学院数学科学学院信息与计算科学2010届学生。\n\n- 2011年12月\t全国计算机应用技能大赛Flash设计 三等奖\n- 2011年6月\t全国计算机二级\t计算机\n- 2013年5月\t大学英语四级\t外语\n\n#### 经验\n\n* 2012年2月至2013年1月：六回科技团队\n这是一个自主创业的学生团队，在校园内导购电脑及配件外，并开展一系列电脑培训工作，软硬件教学都给更多的同学带来帮助！\n\n* 2013年4月至2013年10月：北部湾东盟经济网络中心\n网站开发，Flash设计，平面设计，负责整个单位的计算机工作，包括网站管理维护，电脑日常维护与工作技术支持。\n\n* 2014年2月至2014年5月：广易轩（北京）文化发展有限公司\n网站开发，平面策划，负责整个单位的计算机工作，网络管理维护，拍照摄影与图片处理，产品设计。\n\n#### 技能\n- Office\t（熟练）使用时间（三年以上）\n- Flash\t（良好）使用时间（两年以上）\n- PHP\t（良好）使用时间（两年以上）\n- C++\t（一般）使用时间（1年以上）\n- Photoshop\t（熟练）使用时间（两年以上）\n- JavaScript  （一般）使用时间（1年以上）\n- Linux\t（一般）使用时间（两年年以上）\n\n#### 个人自评\n\n由于在校参与活动太多，成绩虽一般，但学习能力很强。六回科技校园创业团队、 乐邮邮校园快递、南宁东盟会展中心好友缘国际酒店服务员、 南宁华南城东盟志愿者、南宁家教老师、电子科技广场电脑导购校园兼职、长岗校区机房管理员、明秀校区机房设备学生总管、院内网络部副部长、院内网络工作站副站长、学习委员、副班长、副院长助理等，这些都给我极大的经验与锻炼。\n\n也许我的技术都不能说太精通，其实都是自己爱好自己学习得来的，从中我懂得学习的能力，对计算机等各方面都能轻松上手。office办公，php，node.js，前端开发，音频视频编辑，移动互联网，网络编辑，linux，c++，flash，ps平面，android爱好者，iso爱好者，metro设计，html5学习者，各方面我都有学习经验。\n",
				"featured": 0,
				"page": 1,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2014-04-22T11:44:42+08:00",
				"created_by": "",
				"updated_at": "2015-06-10T13:50:31+08:00",
				"updated_by": "",
				"published_at": "2014-04-22T11:44:42+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqxy001eesu359yu9w4y",
				"title": "heX——基于 HTML5 和 Node.JS 开发桌面应用",
				"html": "\n简介\n\nheX 是网易有道团队的一个开源项目，允许你采用前端技术（HTML，CSS，JavaScript）开发桌面应用软件的跨平台解决方案。heX 是你开发桌面应用的一种新的选择，意在解决传统桌面应用开发中繁琐的UI和交互开发工作，使其变的简单而高效，特别适合于开发重UI，重交互的桌面应用软件。\n\n<!--more-->\n\nHomepage: http://hex.youdao.com\nMailing list: https://groups.google.com/group/youdao_hex\nDocumentation: http://hex.youdao.com/documentation\nWiki: https://github.com/netease-youdao/hex/wiki\nIssues: https://github.com/netease-youdao/hex/issues\n\n近几年，移动应用和web2.0大行其道，相比之下，传统桌面应用程序开发显得相对冷清（包括该领域技术人才的后继力量），但在一些场景下，它依然有其不可替代的优势。探索中我们尝试了一种新的办法，并给它取名heX，将HTML5和Node.JS的技术优势，应用于桌面应用程序开发，使得工作变得简单而高效。\n\n2012年前后，一位研发工程师（外号6哥，精通web前端和桌面应用开发），先后参与了两个传统桌面应用程序UI改版工作（有道云笔记和有道词典），任务是把软件界面中部分区域的浏览器渲染引擎，由IE内核替换为webkit，在这个过程中，有一种强烈的欲望：把整个软件界面的渲染都交由浏览器引擎来完成，这样一来，UI和交互部分都可以用前端技术来实现，那么，开发过程将变的简单许多，而客户端开发人员的主要精力也可放在业务逻辑上，何乐而不为！\n\n\n为此，我们做了大量的调研，经反复尝试，最终确定通过整合Chromium和Node.JS，来解决桌面应用开发中遇到的大量繁琐的UI和交互开发工作。期间，发现一款类似的开源项目node-webkit，调研的结论是它暂时还无法用于正式的项目，所以，于2012年6月，我们正式成立一人开发小组（确实够小），经3个月的努力，终有小成，现已经应用于有道词典最新版。\n\n选择Chromium，是因为它对HTML5的支持非常优秀，其内嵌的V8引擎，更是业内效率最好的JavaScript脚本引擎之一，且其项目开源，又有专门的社区和团队维护，作为UI渲染引擎，它是不二之选，体验上，你可以试用下google chrome浏览器，基本一致。\n\n选择Node.JS，是因为开发桌面应用，本地资源操作是必备的能力，这方面JavaScript无能为力，而Node.JS则很好的解决了这个问题，它使得JavaScript操作本地资源变的毫无障碍。另一方面，Node.JS核心也是采用V8引擎，使得其与Chromium的整合变得更顺理成章。\n\n用heX开发桌面应用的优势\n\nHTML5这几年很火，在成熟产品中的应用却极少，受各浏览器和平台的软/硬件性能问题的限制，整体感觉总是难以舒展（用的不踏实），具体原因网上可以找到一大堆，这里列举一个移动web app相关的，中英对照版，推荐抽空看一看:\n\n英文版：http://sealedabstract.com/rants/why-mobile-web-apps-are-slow/\n\n中文版：http://www.cnblogs.com/codemood/p/3213459.html\n\n尽管如此，HTML5的优势依然很明显，普及程度也正逐年提高，我们对它的未来信心十足。好东西，都值得我们主动去尝试，heX做的一个事情，就是提前把它应用于桌面应用开发，而不用顾忌它的兼容性和平台性能问题（PC性能过剩）。\n\n用HTML5开发桌面应用，到底有什么样的优势呢？这里列举几项：\n\n精准还原UI设计。现在客户端软件UI设计用native方式来实现的成本越来越高，对HTML5来说却很容易，对后续的维护也非常的友好；\n用户体验。如果你不清楚HTML5所能做到的体验效果，可以看看Chrome Experiments（http://www.chromeexperiments.com/）；\n开发调试便利。heX保留了开发者工具（Chrome Developer Tools），让你在开发调试过程中，就如同web开发一样便利；\n学习成本。相比传统桌面应用开发，web技术的入门成本明显偏低，你不用担心团队成员的离开，而苦于寻找后续开发力量。\n桌面应用开发，本地资源操作能力必不可少，Node.JS提供了丰富的自带API，让你免于逐个封装C++实现，就能在heX环境下的html页面中直接使用，如：本地文件系统操作，二进制数据处理，方便的创建子进程等等，详见Node.JS API DOCS。\n\n在桌面应用开发中用Node.JS的好处（一部分来自于heX的努力）：\n\n直接用JavaScript对本地资源进行操作，相比C/C++，你无需编译，即写即用；\n页面交互逻辑，窗体行为操作，与C++通信，用JavaScript都能搞定，开发一个桌面应用，你无需在语言之间来回切换；\nNode.JS丰富的第三扩展，你都可以直接使用，无需从零开始；\n继承于Node.JS优秀的扩展能力，以及它所遵循的commonjs规范，代码管理也将变的方便和易于控制。\n从技术角度来讲，选择一个新生事物，我们持谨慎态度，需要经过充分的调研，考虑的因素众多，比如：性能，用户体验，开发效率，是否有团队在维护，文档是否完备，是否开源（如果是商业用处，还需考虑它的开源协议）等等。\n\n而heX作为桌面应用开发的一种新的选择，它在这些方面的表现如何呢？前面已经讲到一些，这里再补充几点：\n\n性能和体验，heX的基础由Chromium和Node.JS整合而成，整合后这两者的性能表现不受影响，体验方面，你可以参考google chrome浏览器，基本保持一致；\n开发效率，如果你有过web前端开发经历，现在仅要求你支持最新版的chrome浏览器，你觉得如何？睡着了都能笑醒的事，heX做到了；\nheX即将开源，请大家关注  http://hex.youdao.com 和 @yoduao_hex\n一种东西，只能解决一方面的需求，heX亦非万能，亦有它适合的使用场景，最适合重UI、重交互的桌面应用，比如即将推出的新版有道词典（亿级桌面应用软件）beta版，就是采用heX作为其界面的解决方案。\n如何用heX开始一个桌面应用程序\n\n采用heX开发桌面应用程序，有两种方式：\n\n直接基于heX做开发，针对web前端开发者，不要求桌面应用开发经验；\n以模块形式引入到现在桌面工程中，针对传统桌面应用开发者，适合有一定历史的项目，或仅在界面中局部区域支持即可的项目。\n不管采用哪种方式，开发过程都很简单，这里就第一种方式，从零开始，一起来制作一个 hello word，如下：\n\n1、下载heX二进制包（http://codown.youdao.com/hex/hex_1453_web_develop_windows.zip），解压到本地，打开后目录结构如下图所示，其中“hexclient.exe”是主程序文件，双击即可运行heX，“manifest.json”是heX的配置文件，可配置入口文件，窗口初始大小、位置等信息\n\n2、创建一个用于写hello word程序的测试目录“test”，同时在其中新建html、js文件，如下图所示\n\n3、修改manifest.json文件，入口改为test/index.html，如下图所示\n\n4、双击 hexclient.exe，运行，一秒后界面由“……”变为“Hello Word！”，如下图所示，到此为止，一个简单的桌面应用就搞定了\n\n正式产品案例：目前已经应用于新版有道词典（亿级桌面客户端软件）beta版，下图的整个界面和交互都是基于heX实现，欢迎下载体验：http://download.ydstatic.com/cidian/static/6.0/20130812/YoudaoDict.exe\n\n了解更多heX信息欢迎微博 @youdao_hex 或访问http://hex.youdao.com\n\n原文链接：heX：用 HTML5 和 Node.JS 开发桌面应用",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2014-04-29T11:58:16+08:00",
				"created_by": "",
				"updated_at": "2015-06-10T13:51:22+08:00",
				"updated_by": "",
				"published_at": "2014-04-29T11:58:16+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqz30032esu348ao2l5s",
				"title": "在手机浏览器启动你的app",
				"html": "\n说起来有点凄凉，当我满怀信心进入手机开发的时候，我觉得是手机web应用会像web在pc那样火起来，谁知道我接到的第一个需求竟然能是在浏览器上推广客户端。甭管我们自己怎么觉得h5怎么怎么火，但是老大们的中心其实还是在app上。但是我们也不能自怨自艾，相信有一天我们一定会成为主流。 废话少说吧，由于浏览器限制，我们是不可能直接访问本地资源的，更别说去判断用户到底装没装客户端。只能通过其他方式。\n### 准备\n首先需要app进行Schema注册，具体怎么弄，这里就不说了。好弄。\n<!--more-->\n### 原理代码\n原理是当通过schema方式打开客户端后，手机当前聚焦的视图就不是浏览器了，浏览器就暂时不会执行setTimeout和setInterval方法\n\n下面以腾讯微博为例\n<pre>\n<code>function redirect(){\n  location.href=\"TencentWeibo://xxx\";\n  var t = Date.now();\n  setTimeout(function(){\n    // 之所以加个100 是因为settimeout不是那么准时\n    if(Date.now()-t < 600){\n      location.href=\"http://t.qq.com\"\n    }\n  },500)\n}</code></pre>\n### 实际应用\n如果直接应用上诉代码，会发现在android和ios部分浏览器中，如果用户未安装app，会直接跳到报错页面。所以我采用iframe的方式。通过iframe方式启动app\n\n<pre><code>var loadIframe = null;\nfunction createIframe(){\n  var iframe = document.createElement(\"iframe\");\n    iframe.style.cssText = \"display:none;width:0px;height:0px;\";\n    document.body.appendChild(iframe);\n    loadIframe = iframe;\n}\nfunction redirect(){\n  loadIframe.src=\"TencentWeibo://xxx\";\n  var t = Date.now();\n  setTimeout(function(){\n    if(Date.now()-t < 600){\n      location.href=\"http://t.qq.com\"\n    }\n  },500)\n}\ncreateIframe();</code></pre>\n这种写法在大部分浏览器中是没问题的，不过还有以下问题：\n\n* 1、在ios低版本的safari上会提示一个未找到页面的提示，然后执行setTimeout方法。\n* 2、在Android的chrome上没效果\n\n第一个bug暂时没有解决，如果有同学碰到的话，告诉俺一下哈。产品追着我改这个bug呢 第二个需要去查看下chrome的资料,参考：([Android Intents with Chrome](https://developer.chrome.com/multidevice/android/intents))\n\n修改写法如下：\n<pre><code>/**\n * 移动浏览器上app下载\n * \n */\n;\nvar mobileAppInstall = (function(){\nvar ua = navigator.userAgent,\n        loadIframe,\n        win = window;\n\nfunction getIntentIframe(){\n    if(!loadIframe){\n        var iframe = document.createElement(\"iframe\");\n        iframe.style.cssText = \"display:none;width:0px;height:0px;\";\n        document.body.appendChild(iframe);\n        loadIframe = iframe;\n    }\n    return loadIframe;\n}\n\nfunction getChromeIntent(url){\n// 根据自己的产品修改吧\n    return  \"intent://t.qq.com/#Intent;scheme=\"+url+\";package=com.tencent.WBlog;end\";\n}\nvar appInstall = {\n    isChrome:ua.match(/Chrome\\/([\\d.]+)/) || ua.match(/CriOS\\/([\\d.]+)/),\n    isAndroid:ua.match(/(Android);?[\\s\\/]+([\\d.]+)?/),\n    timeout:500,\n    /**\n     * 尝试跳转appurl,如果跳转失败，进入h5url\n     * @param {Object} appurl 应用地址\n     * @param {Object} h5url  http地址\n     */\n    open:function(appurl,h5url){\n        var t = Date.now();\n        appInstall.openApp(appurl);\n        setTimeout(function(){\n            if(Date.now() - t < appInstall.timeout+100){\n                h5url && appInstall.openH5(h5url);\n            }\n        },appInstall.timeout)\n    },\n    openApp:function(appurl){\n        if(appInstall.isChrome){\n            if(appInstall.isAndroid){\n                win.location.href = getChromeIntent(appurl);\n            }else{\n                win.location.href = appurl;\n            }\n        }else{\n            getIntentIframe().src = appurl;\n        }\n    },\n    openH5:function(h5url){\n        win.location.href = h5url;\n    }\n}\n\nreturn appInstall;\n})();</code></pre>\n### 其他\n##### safari\nios 6.0 以上app推荐\n&lt;meta name=\"apple-itunes-app\" content=\"app-id=432274380\"&gt;\n##### 微信中判断是否安装app\n在微信中如果想通过Schema方式打开应用，貌似除腾讯以外的是不行了。\n<pre><code>// 判断是否安装\nWeixinJSBridge.invoke(\"getInstallState\", {packageName: \"com.tencent.WBlog\",packageUrl: \"TencentWeibo://\"}, function(e) {\n    var n = e.err_msg;\n    if(n.indexOf(\"get_install_state:yes\") > -1){\n      alert(\"已经安装\");\n    } \n})\n// 安装\nWeixinJSBridge.invoke(\"addDownloadTask\", {task_name: \"腾讯微博\",task_url: \"http://softfile.3g.qq.com/msoft/180/2104/2104/WBlog_4.2.1_100000024_131210163458a.apk\",file_md5: \"31C49560B20057ECBB4C7C52D35B00DB\"}, function(t) {\n\n})</code></pre>",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-06-10T16:06:07+08:00",
				"created_by": "",
				"updated_at": "2015-06-10T16:26:43+08:00",
				"updated_by": "",
				"published_at": "2015-06-10T16:06:07+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqyy002vesu37213e4z5",
				"title": "【html5构建触屏网站】之touch事件",
				"html": "\n##### 前言\n一个触屏网站到底和传统的pc端网站有什么区别呢，交互方式的改变首当其冲。例如我们常用的**click事件**，在触屏设备下是如此无力。  \n手机上的大部分交互都是通过touch来实现的，于是，对于触屏的交互式网站，触摸事件是相当重要的。  \n<!--more-->\nApple在iOS 2.0中引入了[触摸事件API](http://developer.apple.com/library/safari/#documentation/UserExperience/Reference/TouchEventClassReference/TouchEvent/TouchEvent.html#//apple_ref/doc/uid/TP40009358)，Android正迎头赶上这一事实标准，缩小差距。最近一个W3C工作组正合力制定这一[触摸事件规范](http://dvcs.w3.org/hg/webevents/raw-file/tip/touchevents.html)。  \n#### 规范\n这里我们介绍几种普及得比较好的触摸事件，你可以在绝大多数现代浏览器中来测试这一事件（必须是触屏设备哦）：\n\n**touchstart**：触摸开始的时候触发\n\n**touchmove**：手指在屏幕上滑动的时候触发\n\n**touchend**：触摸结束的时候触发\n\n而每个触摸事件都包括了三个触摸列表，每个列表里包含了对应的一系列触摸点（用来实现多点触控）：\n\n**touches**：当前位于屏幕上的所有手指的列表。\n\n**targetTouches**：位于当前DOM元素上手指的列表。\n\n**changedTouches**：涉及当前事件手指的列表。\n\n每个触摸点由包含了如下触摸信息（常用）：\n\n**identifier**：一个数值，唯一标识触摸会话（touch session）中的当前手指。一般为从0开始的流水号（android4.1，uc）\n\n**target**：DOM元素，是动作所针对的目标。\n\n**pageX/pageX/clientX/clientY/screenX/screenY**：一个数值，动作在屏幕上发生的位置（page包含滚动距离,client不包含滚动距离，screen则以屏幕为基准）。　\n\n**radiusX/radiusY/rotationAngle**：画出大约相当于手指形状的椭圆形，分别为椭圆形的两个半径和旋转角度。初步测试浏览器不支持，好在功能不常用，欢迎大家反馈。\n\n有了这些信息，我们就可以依据这些事件信息为用户提供不同的反馈了。\n\n下面，我将为大家展示一个小demo，用touchmove实现的单指拖动:\n<pre><code>/*单指拖动*/\nvar obj = document.getElementById('id');\nobj.addEventListener('touchmove', function(event) {\n     // 如果这个元素的位置内只有一个手指的话\n    if (event.targetTouches.length == 1) {\n　　　　 event.preventDefault();// 阻止浏览器默认事件，重要 \n        var touch = event.targetTouches[0];\n        // 把元素放在手指所在的位置\n        obj.style.left = touch.pageX-50 + 'px';\n        obj.style.top = touch.pageY-50 + 'px';\n        }\n}, false);</code></pre>\n##### 关于a标签四个伪类在触屏设备中的小技巧：  \n我们都知道a标签的四个伪类link，visited，active，hover是专为click事件设计的，所以在触屏网站中尽量不要使用它们。经测试大部分也是不可用的。但是这里有一个关于hover的小技巧，当你点击过一个按钮之后，这个按钮就会一直处于hover的状态，此时你基于这个伪类所设置的css也是起作用的，直到你用手指点击另外一个按钮，hover状态就会转移到另一个按钮。利用这一点，我们可以做出一些小效果。此技巧在大多数浏览器中还是可用的。\n\n##### 理想很丰满，现实很骨感！  \n虽然w3c为多点触控做好了准备，遗憾的是鲜有浏览器支持多点触控的特性，尤其是android平台上的浏览器，也就让上文介绍的手指列表变为了空谈，捕获两个触摸点会直接导致触摸失效！好在ios设备自带的safari浏览器能够支持这一特性，让我们对未来充满希望。毕竟，我们被鼠标的单点操作禁锢了太久，多指操作一个网站是多么令人兴奋！\n\n[本文摘自](http://www.cnblogs.com/shawn-xie/archive/2012/12/07/2805582.html)\n",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-06-10T16:31:36+08:00",
				"created_by": "",
				"updated_at": "2015-06-10T16:38:51+08:00",
				"updated_by": "",
				"published_at": "2015-06-10T16:31:36+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqyx002sesu362hf8zjt",
				"title": "Somebody That I Used To Know",
				"html": "\n《Somebody That I Used to Know》收录自澳大利亚独立流行歌手Gotye的第三张录音室专辑《Making Mirrors》，单曲邀请新西兰歌手Kimbra作为客座合唱歌手。<!--more-->该单曲在澳大利亚单曲榜上意外的取得了8周冠军的成绩，成为自1997年野人花园的\"Truly Madly Deeply\"后占领榜首最长的单曲，在欧洲多个国家的排行榜上登顶，在Kimbra的祖国新西兰，该单曲同样成功登顶。在波兰，该单曲占领榜首长达18周，成为波兰单曲榜史上夺得榜首位置时间最长的单曲。2013年（第55届）格莱美奖上获年度最佳制作和最佳流行乐队/组合两项大奖。\n<embed wmode=\"window\" flashvars=\"vid=e0134uz9dhv&amp;tpid=3&amp;showend=1&amp;showcfg=1&amp;searchbar=1&amp;shownext=1&amp;list=2&amp;autoplay=1&amp;ptag=%7Cu&amp;outhost=http%3A%2F%2Fv.qq.com%2Fpage%2Fe%2Fh%2Fv%2Fe0134uz9dhv.html&amp;refer=http%3A%2F%2Fv.qq.com%2Fu%2Fvideos%2F&amp;openbc=0&amp;title=%20Somebody%20That%20I%20Used%20To%20Know%E5%90%89%E4%BB%96%E5%BC%B9%E5%94%B1%E6%95%99%E5%AD%A6\" src=\"http://imgcache.qq.com/tencentvideo_v1/player/TencentPlayer.swf?max_age=86400&amp;v=20140714\" quality=\"high\" name=\"tenvideo_flash_player_1433944357490\" id=\"tenvideo_flash_player_1433944357490\" bgcolor=\"#000000\" width=\"650px\" height=\"472px\" align=\"middle\" allowscriptaccess=\"always\" allowfullscreen=\"true\" type=\"application/x-shockwave-flash\" pluginspage=\"http://get.adobe.com/cn/flashplayer/\">",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-06-10T21:56:04+08:00",
				"created_by": "",
				"updated_at": "2015-06-10T22:23:58+08:00",
				"updated_by": "",
				"published_at": "2015-06-10T21:56:04+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqyq002iesu36h1caw7n",
				"title": "Sitting, Waiting, Wishing - Jack Johnson",
				"html": "\n杰克·约翰逊是美国冲浪手，民谣歌手，导演。从小在夏威夷长大，Jack Johnson会走路的时候也会冲浪，17岁的时候他已经是冲浪界的天才，以最年轻的年纪扬名于世界级冲浪大赛(Pipeline Masters)<!--more-->，正当体坛将他锁定成海滩明日之星，比赛后一个月，Jack Johnson在冲浪时发生严重意外，脸上缝了150针，让他整整三个月无法出门，却也给了他三个月抱着吉他、创作音乐的时光；但是Jack Johnson并没有一鼓作气成为创作歌手，18岁的他选择到加州大学念电影，99年导演并且担任电影配乐完成了冲浪电影《Thicker Than Water》，初执导演筒的他，赢得各影展最佳导演等大奖，眼见着Jack Johnson就要加入电影界，新的一波浪潮却迎面来袭；杰克自弹自唱的歌曲，早期就被冲浪巨星们作成卡带复制流传，2005年的今天，Jack Johnson，这个海滩男孩，不只是冲浪天才、不只是得奖导演、他是全球销量300万张的创作才子。\n<embed wmode=\"window\" flashvars=\"vid=p0134j24gse&amp;tpid=3&amp;showend=1&amp;showcfg=1&amp;searchbar=1&amp;shownext=1&amp;list=2&amp;autoplay=1&amp;ptag=user_qzone_qq_com&amp;outhost=http%3A%2F%2Fv.qq.com%2Fpage%2Fp%2Fs%2Fe%2Fp0134j24gse.html&amp;refer=http%3A%2F%2Fv.qq.com%2Fu%2Fvideos%2F&amp;openbc=0&amp;title=%20Sitting%2C%20Waiting%2C%20Wishing%20-%20Jack%20Johnson\" src=\"http://imgcache.qq.com/tencentvideo_v1/player/TencentPlayer.swf?max_age=86400&amp;v=20140714\" quality=\"high\" name=\"tenvideo_flash_player_1433944659420\" id=\"tenvideo_flash_player_1433944659420\" bgcolor=\"#000000\" width=\"650px\" height=\"472px\" align=\"middle\" allowscriptaccess=\"always\" allowfullscreen=\"true\" type=\"application/x-shockwave-flash\" pluginspage=\"http://get.adobe.com/cn/flashplayer/\" style=\"width: 100%; height: 472px;\">",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-06-10T21:58:07+08:00",
				"created_by": "",
				"updated_at": "2015-06-10T22:23:22+08:00",
				"updated_by": "",
				"published_at": "2015-06-10T21:58:07+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqy9001tesu3ba1o4rkm",
				"title": "Far Away - Nickelback",
				"html": "\nNickelback的专辑<All The Right Reasons>的一支歌曲\nThis time, This place。。。\n<!--more-->\n<embed wmode=\"window\" flashvars=\"vid=e0134cblyfs&amp;tpid=3&amp;showend=1&amp;showcfg=1&amp;searchbar=1&amp;shownext=1&amp;list=2&amp;autoplay=1&amp;ptag=user_qzone_qq_com%7Cpage&amp;outhost=http%3A%2F%2Fv.qq.com%2Fpage%2Fe%2Ff%2Fs%2Fe0134cblyfs.html&amp;refer=http%3A%2F%2Fv.qq.com%2Fu%2Fvideos%2F&amp;openbc=0&amp;title=%20Far%20Away%20-%20Nickelback\" src=\"http://imgcache.qq.com/tencentvideo_v1/player/TencentPlayer.swf?max_age=86400&amp;v=20140714\" quality=\"high\" name=\"tenvideo_flash_player_1433944751382\" id=\"tenvideo_flash_player_1433944751382\" bgcolor=\"#000000\" width=\"650px\" height=\"472px\" align=\"middle\" allowscriptaccess=\"always\" allowfullscreen=\"true\" type=\"application/x-shockwave-flash\" pluginspage=\"http://get.adobe.com/cn/flashplayer/\">",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-06-10T21:59:36+08:00",
				"created_by": "",
				"updated_at": "2015-06-10T22:22:47+08:00",
				"updated_by": "",
				"published_at": "2015-06-10T21:59:36+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqy3001lesu3gjx1c47z",
				"title": "Bonfire Heart - James Blunt",
				"html": "\n上尉诗人James Blunt 最新超赞单曲 Bonfire Heart，mv中的James Blunt帅气十足，标志性的嗓音道出了许多人的心声：平凡如你我，要求并不多，只盼望对的人出现 彼此点燃心中的火焰！\n<!--more-->\n<embed wmode=\"window\" flashvars=\"vid=r0135520rjo&amp;tpid=3&amp;showend=1&amp;showcfg=1&amp;searchbar=1&amp;shownext=1&amp;list=2&amp;autoplay=1&amp;ptag=user_qzone_qq_com%7Cpage&amp;outhost=http%3A%2F%2Fv.qq.com%2Fpage%2Fr%2Fj%2Fo%2Fr0135520rjo.html&amp;refer=http%3A%2F%2Fv.qq.com%2Fu%2Fvideos%2F&amp;openbc=0&amp;title=%20Bonfire%20Heart%20-%20James%20Blunt\" src=\"http://imgcache.qq.com/tencentvideo_v1/player/TencentPlayer.swf?max_age=86400&amp;v=20140714\" quality=\"high\" name=\"tenvideo_flash_player_1433944819438\" id=\"tenvideo_flash_player_1433944819438\" bgcolor=\"#000000\" width=\"650px\" height=\"472px\" align=\"middle\" allowscriptaccess=\"always\" allowfullscreen=\"true\" type=\"application/x-shockwave-flash\" pluginspage=\"http://get.adobe.com/cn/flashplayer/\">",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-06-10T22:00:25+08:00",
				"created_by": "",
				"updated_at": "2015-06-10T22:22:15+08:00",
				"updated_by": "",
				"published_at": "2015-06-10T22:00:25+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqyf0024esu32ufw5lta",
				"title": "Perfect - Simple Plan",
				"html": "\n简单计划（Simple Plan）是一支来自加拿大蒙特利尔的流行朋克乐团。乐队歌曲核心部分的突出特点是低沉圆润而抒情，2002年推出首张专辑一炮打响<!--more-->，仅仅一年，他们周游了五大洲，演出300多场，被众多媒体与乐迷誉为流行乐坛的新一代天王，被纽约时报喻为“朋克摇滚复兴”。2011年乐队积蓄三年能量推出的第四张兼具朋克与流行多重音乐元素的专辑《Get Your Hearts On》，让他们不但成为加拿大电台票选的年度风云人物，以及2012年法国NRJ电台音乐奖（被誉为法国“格莱美”）最佳年度组合，亦开启了与专辑同名的世界巡演之旅。<embed wmode=\"window\" flashvars=\"vid=z0135ol0p4g&amp;tpid=3&amp;showend=1&amp;showcfg=1&amp;searchbar=1&amp;shownext=1&amp;list=2&amp;autoplay=1&amp;ptag=user_qzone_qq_com%7Cpage&amp;outhost=http%3A%2F%2Fv.qq.com%2Fpage%2Fz%2F4%2Fg%2Fz0135ol0p4g.html&amp;refer=http%3A%2F%2Fv.qq.com%2Fu%2Fvideos%2F&amp;openbc=0&amp;title=%20Perfect%20-%20Simple%20Plan\" src=\"http://imgcache.qq.com/tencentvideo_v1/player/TencentPlayer.swf?max_age=86400&amp;v=20140714\" quality=\"high\" name=\"tenvideo_flash_player_1433944855381\" id=\"tenvideo_flash_player_1433944855381\" bgcolor=\"#000000\" width=\"650px\" height=\"472px\" align=\"middle\" allowscriptaccess=\"always\" allowfullscreen=\"true\" type=\"application/x-shockwave-flash\" pluginspage=\"http://get.adobe.com/cn/flashplayer/\">",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-06-10T22:01:01+08:00",
				"created_by": "",
				"updated_at": "2015-06-10T22:21:49+08:00",
				"updated_by": "",
				"published_at": "2015-06-10T22:01:01+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqz1002zesu32ok43wrf",
				"title": "Wind of Change - Scorpions",
				"html": "\n这首歌是八十年代末蝎子乐队演唱的，背景是苏联的解体和东西德的合并，导致了原先社会主义国家的青年对前途向往的同时，也存在着迷茫。<!--more-->自由的向往是大家的共同愿望，但是太多的现实问题要摆在所有人面前，难免让人有所惆怅。<embed wmode=\"window\" flashvars=\"vid=u0135qlkawo&amp;tpid=3&amp;showend=1&amp;showcfg=1&amp;searchbar=1&amp;shownext=1&amp;list=2&amp;autoplay=1&amp;ptag=user_qzone_qq_com%7Cu&amp;outhost=http%3A%2F%2Fv.qq.com%2Fpage%2Fu%2Fw%2Fo%2Fu0135qlkawo.html&amp;refer=http%3A%2F%2Fv.qq.com%2Fu%2Fvideos%2F&amp;openbc=0&amp;title=%20Wind%20of%20Change%20-%20Scorpions\" src=\"http://imgcache.qq.com/tencentvideo_v1/player/TencentPlayer.swf?max_age=86400&amp;v=20140714\" quality=\"high\" name=\"tenvideo_flash_player_1433944923446\" id=\"tenvideo_flash_player_1433944923446\" bgcolor=\"#000000\" width=\"650px\" height=\"472px\" align=\"middle\" allowscriptaccess=\"always\" allowfullscreen=\"true\" type=\"application/x-shockwave-flash\" pluginspage=\"http://get.adobe.com/cn/flashplayer/\">",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-06-10T22:02:08+08:00",
				"created_by": "",
				"updated_at": "2015-06-10T22:19:42+08:00",
				"updated_by": "",
				"published_at": "2015-06-10T22:02:08+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqy6001pesu34uqcah1k",
				"title": "Drive - Incubus吉他教学",
				"html": "\nIncubus是一支成立相当早，但是直到进入新世纪之后才逐渐真正成名的另类金属乐队，他们不仅是商业上最受欢迎的另类金属乐队之一，同时也在评论界拥有良好的口碑。\n<!--more-->\n<embed wmode=\"window\" flashvars=\"vid=b01355nuy2l&amp;tpid=3&amp;showend=1&amp;showcfg=1&amp;searchbar=1&amp;shownext=1&amp;list=2&amp;autoplay=1&amp;ptag=user_qzone_qq_com%7Cu&amp;outhost=http%3A%2F%2Fv.qq.com%2Fpage%2Fb%2F2%2Fl%2Fb01355nuy2l.html&amp;refer=http%3A%2F%2Fv.qq.com%2Fu%2Fvideos%2F&amp;openbc=0&amp;title=%20Drive%20-%20Incubus%E5%90%89%E4%BB%96%E6%95%99%E5%AD%A6\" src=\"http://imgcache.qq.com/tencentvideo_v1/player/TencentPlayer.swf?max_age=86400&amp;v=20140714\" quality=\"high\" name=\"tenvideo_flash_player_1433944957397\" id=\"tenvideo_flash_player_1433944957397\" bgcolor=\"#000000\" width=\"650px\" height=\"472px\" align=\"middle\" allowscriptaccess=\"always\" allowfullscreen=\"true\" type=\"application/x-shockwave-flash\" pluginspage=\"http://get.adobe.com/cn/flashplayer/\">",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-06-10T22:02:46+08:00",
				"created_by": "",
				"updated_at": "2015-06-10T22:21:16+08:00",
				"updated_by": "",
				"published_at": "2015-06-10T22:02:46+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqyd0020esu38gv8gief",
				"title": "Fix You - Coldplay",
				"html": "\n“Fix You”是英国另类摇滚乐队Coldplay创作的一首歌曲。由乐队四位成员为其第三张专辑“X&Y”共同创作。<!--more-->整首歌的声带在一架环绕着缓慢鼓点与声乐的管风琴制作旁而成。这首歌于2005年9月5日作为“X&Y”的第二首单曲发行，随即便取得英国单曲排行榜的第四位的好成绩，并且曾在美国“Billboard Hot Modern Rock Tracks”中排行第18位。随后的商业版单曲在英美市场发行。<embed wmode=\"window\" flashvars=\"vid=g01369eo2gp&amp;tpid=3&amp;showend=1&amp;showcfg=1&amp;searchbar=1&amp;shownext=1&amp;list=2&amp;autoplay=1&amp;ptag=user_qzone_qq_com%7Cu&amp;outhost=http%3A%2F%2Fv.qq.com%2Fpage%2Fg%2Fg%2Fp%2Fg01369eo2gp.html&amp;refer=http%3A%2F%2Fv.qq.com%2Fu%2Fvideos%2F&amp;openbc=0&amp;title=%20Fix%20You%20-%20Coldplay\" src=\"http://imgcache.qq.com/tencentvideo_v1/player/TencentPlayer.swf?max_age=86400&amp;v=20140714\" quality=\"high\" name=\"tenvideo_flash_player_1433945002439\" id=\"tenvideo_flash_player_1433945002439\" bgcolor=\"#000000\" width=\"650px\" height=\"472px\" align=\"middle\" allowscriptaccess=\"always\" allowfullscreen=\"true\" type=\"application/x-shockwave-flash\" pluginspage=\"http://get.adobe.com/cn/flashplayer/\">",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-06-10T22:03:30+08:00",
				"created_by": "",
				"updated_at": "2015-06-10T22:20:34+08:00",
				"updated_by": "",
				"published_at": "2015-06-10T22:03:30+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqy0001hesu33rnldxe7",
				"title": "Counting Stars - OneRepublic",
				"html": "\n《Counting Stars》是美国流行摇滚乐队OneRepublic的单曲，该曲出自于他们的第三张录音专辑《Native》，也是该专辑下发放的第三首单曲<!--more-->，该单曲发行不久后便迅速进入美国、英国、澳大利亚等多个国家的单曲排行榜中，并在美国、澳大利亚、德国、爱尔兰和新西兰等国的单曲榜中达到了前5的排名，在英国单曲榜与加拿大单曲榜更是获得了冠军歌曲的成绩，在某些方面，《Counting Stars》甚至已经超过了OneRepublic在2007年发布的神曲《Apologize》。<embed wmode=\"window\" flashvars=\"vid=p01362ier6u&amp;tpid=3&amp;showend=1&amp;showcfg=1&amp;searchbar=1&amp;shownext=1&amp;list=2&amp;autoplay=1&amp;ptag=user_qzone_qq_com%7Cu&amp;outhost=http%3A%2F%2Fv.qq.com%2Fpage%2Fp%2F6%2Fu%2Fp01362ier6u.html&amp;refer=http%3A%2F%2Fv.qq.com%2Fu%2Fvideos%2F&amp;openbc=0&amp;title=%20Counting%20Stars%20-%20OneRepublic\" src=\"http://imgcache.qq.com/tencentvideo_v1/player/TencentPlayer.swf?max_age=86400&amp;v=20140714\" quality=\"high\" name=\"tenvideo_flash_player_1433945045406\" id=\"tenvideo_flash_player_1433945045406\" bgcolor=\"#000000\" width=\"650px\" height=\"472px\" align=\"middle\" allowscriptaccess=\"always\" allowfullscreen=\"true\" type=\"application/x-shockwave-flash\" pluginspage=\"http://get.adobe.com/cn/flashplayer/\">",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-06-10T22:04:10+08:00",
				"created_by": "",
				"updated_at": "2015-06-10T22:20:05+08:00",
				"updated_by": "",
				"published_at": "2015-06-10T22:04:10+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqys002lesu3b53w8xlw",
				"title": "Sky Full Of Stars - Coldplay",
				"html": "\n\n《A Sky Full of Stars》是英国摇滚乐队Coldplay于2014年5月2日发行的单曲。\n<!--more-->\n<embed wmode=\"window\" flashvars=\"vid=e0136xl6oic&amp;tpid=3&amp;showend=1&amp;showcfg=1&amp;searchbar=1&amp;shownext=1&amp;list=2&amp;autoplay=1&amp;ptag=user_qzone_qq_com%7Cu&amp;outhost=http%3A%2F%2Fv.qq.com%2Fpage%2Fe%2Fi%2Fc%2Fe0136xl6oic.html&amp;refer=http%3A%2F%2Fv.qq.com%2Fu%2Fvideos%2F&amp;openbc=0&amp;title=%20Sky%20Full%20Of%20Stars%20-%20Coldplay\" src=\"http://imgcache.qq.com/tencentvideo_v1/player/TencentPlayer.swf?max_age=86400&amp;v=20140714\" quality=\"high\" name=\"tenvideo_flash_player_1433945076458\" id=\"tenvideo_flash_player_1433945076458\" bgcolor=\"#000000\" width=\"650px\" height=\"472px\" align=\"middle\" allowscriptaccess=\"always\" allowfullscreen=\"true\" type=\"application/x-shockwave-flash\" pluginspage=\"http://get.adobe.com/cn/flashplayer/\" style=\"width: 100%; height: 472px;\">",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-06-10T22:04:49+08:00",
				"created_by": "",
				"updated_at": "2015-06-10T22:19:13+08:00",
				"updated_by": "",
				"published_at": "2015-06-10T22:04:49+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqyu002oesu3g6j4cmvp",
				"title": "What's Up - 4 Non Blondes",
				"html": "\n4 Non Blondes成立于1989年，美国的San Francisco市，当时Christa Hillhouse（贝司手）和Shaunna Hall（吉他手）同为室友，他们当时和Wanda Day（鼓手）想组一个临时性的乐队，但缺一个主唱，Christa在一个名为Nightbreak的俱乐部的舞台上发现了Linda Perry，<!--more-->他立刻被Linda那充满力量和梦幻般的嗓音迷住了，于是他邀请Linda担当他们乐队的主唱，Linda当时并未当回事，直到她亲眼看到了他们三位的现场演出后，才决定加入乐队，这支乐队的首场演出是在1989年10月17日Nightbreak俱乐部里一个每周固定节目“Female Trouble”里，这个节目推出的乐队都是以女性为核心的乐队，如：She Devils, Spokepoker, Stone Fox, Mermaid Tattoo, Lovedog……这些乐队都很不错，音乐也很猛烈。这个俱乐部也是整个SF市最好的，里面都是有着摇滚激情的人。\n<embed wmode=\"window\" flashvars=\"vid=l0138iuz972&amp;tpid=3&amp;showend=1&amp;showcfg=1&amp;searchbar=1&amp;shownext=1&amp;list=2&amp;autoplay=1&amp;ptag=user_qzone_qq_com%7Cu&amp;outhost=http%3A%2F%2Fv.qq.com%2Fpage%2Fl%2F7%2F2%2Fl0138iuz972.html&amp;refer=http%3A%2F%2Fv.qq.com%2Fu%2Fvideos%2F&amp;openbc=0&amp;title=%20What%26%2339%3Bs%20Up%20-%204%20Non%20Blondes\" src=\"http://imgcache.qq.com/tencentvideo_v1/player/TencentPlayer.swf?max_age=86400&amp;v=20140714\" quality=\"high\" name=\"tenvideo_flash_player_1433945119431\" id=\"tenvideo_flash_player_1433945119431\" bgcolor=\"#000000\" width=\"650px\" height=\"472px\" align=\"middle\" allowscriptaccess=\"always\" allowfullscreen=\"true\" type=\"application/x-shockwave-flash\" pluginspage=\"http://get.adobe.com/cn/flashplayer/\">",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-06-10T22:05:24+08:00",
				"created_by": "",
				"updated_at": "2015-06-11T13:23:29+08:00",
				"updated_by": "",
				"published_at": "2015-06-10T22:05:24+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqyb001xesu30pamgdo8",
				"title": "Every Breath You Take - The Police",
				"html": "\n![every breath you take](http://sterne.qiniudn.com/image/d/9c/ab96cfa76c76a23fc742974761411.jpg)\n1983年，The Police乐队发行了《Synchronicity 》专辑，主打歌《Every Breath You Take》成为了经典之作。<!--more-->主唱及作者Sting表示，这首歌的写作灵感源自于在牙买加度假期间，对美国里根政府发动的以“星球大战计划”为首的美苏太空军备竞赛的反感和憎恶。与此同时，斯汀本人的婚姻也遇到了麻烦，这两个因素促使他写了这首歌。[1] \n这首歌推出后风行全球，影响了世界各国流行音乐的创作方向，国内当时的玉女歌手杨林就有一首歌，明显的受到这首歌曲的「启发」。90年代的西洋乐坛，饶舌音乐逐渐成为主流，Puff Daddy 吹牛老爹也曾在一九九七年改编这首歌，成为另一首畅销单曲\" I'll be missing you \"，证明好歌果然不会寂寞。<embed wmode=\"window\" flashvars=\"vid=p0149tlx7ga&amp;tpid=3&amp;showend=1&amp;showcfg=1&amp;searchbar=1&amp;shownext=1&amp;list=2&amp;autoplay=1&amp;ptag=user_qzone_qq_com%7Cu&amp;outhost=http%3A%2F%2Fv.qq.com%2Fpage%2Fp%2Fg%2Fa%2Fp0149tlx7ga.html&amp;refer=http%3A%2F%2Fv.qq.com%2Fu%2Fvideos%2F&amp;openbc=0&amp;title=%20Every%20Breath%20You%20Take%20-%20The%20Police\" src=\"http://imgcache.qq.com/tencentvideo_v1/player/TencentPlayer.swf?max_age=86400&amp;v=20140714\" quality=\"high\" name=\"tenvideo_flash_player_1433945158099\" id=\"tenvideo_flash_player_1433945158099\" bgcolor=\"#000000\" width=\"650px\" height=\"472px\" align=\"middle\" allowscriptaccess=\"always\" allowfullscreen=\"true\" type=\"application/x-shockwave-flash\" pluginspage=\"http://get.adobe.com/cn/flashplayer/\">",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-06-10T22:06:03+08:00",
				"created_by": "",
				"updated_at": "2015-06-11T13:23:26+08:00",
				"updated_by": "",
				"published_at": "2015-06-10T22:06:03+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqyj002besu3bjjk10fy",
				"title": "Rude - Magic!",
				"html": "\n![Rude](http://sterne.qiniudn.com/image/a/63/365f13bba185f961aef94f76fe09c.jpg)\n《Rude》是加拿大雷鬼乐队MAGIC!发行的首支单曲，收录于专辑《Don´t Kill the Magic》中。<!--more-->\n<embed wmode=\"window\" flashvars=\"vid=e0153kand0x&amp;tpid=3&amp;showend=1&amp;showcfg=1&amp;searchbar=1&amp;shownext=1&amp;list=2&amp;autoplay=1&amp;ptag=user_qzone_qq_com%7Cu&amp;outhost=http%3A%2F%2Fv.qq.com%2Fpage%2Fe%2F0%2Fx%2Fe0153kand0x.html&amp;refer=http%3A%2F%2Fv.qq.com%2Fu%2Fvideos%2F&amp;openbc=0&amp;title=%20Rude%20-%20Magic!\" src=\"http://imgcache.qq.com/tencentvideo_v1/player/TencentPlayer.swf?max_age=86400&amp;v=20140714\" quality=\"high\" name=\"tenvideo_flash_player_1433945191384\" id=\"tenvideo_flash_player_1433945191384\" bgcolor=\"#000000\" width=\"650px\" height=\"472px\" align=\"middle\" allowscriptaccess=\"always\" allowfullscreen=\"true\" type=\"application/x-shockwave-flash\" pluginspage=\"http://get.adobe.com/cn/flashplayer/\">",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-06-10T22:06:36+08:00",
				"created_by": "",
				"updated_at": "2015-06-11T13:18:37+08:00",
				"updated_by": "",
				"published_at": "2015-06-10T22:06:36+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqyh0027esu3g1vzfvf6",
				"title": "Let Her Go - Passenger",
				"html": "\n![Let her go](http://sterne.qiniudn.com/image/0/67/28177761c46dd1e965db4452d9bf1.jpg)\n《Let Her Go》是英国民谣创作歌手Passenger（Mike Rosenberg）首张个人专辑《All The Little Lights》的第二支单曲，发行于2012年7月\n<!--more-->\n<embed wmode=\"window\" flashvars=\"vid=u0153alxr4b&amp;tpid=3&amp;showend=1&amp;showcfg=1&amp;searchbar=1&amp;shownext=1&amp;list=2&amp;autoplay=1&amp;ptag=user_qzone_qq_com%7Cuc.manage.li.title&amp;outhost=http%3A%2F%2Fv.qq.com%2Fpage%2Fu%2F4%2Fb%2Fu0153alxr4b.html&amp;refer=http%3A%2F%2Fv.qq.com%2Fu%2Fvideos%2F&amp;openbc=0&amp;title=%20Let%20Her%20Go%20-%20Passenger\" src=\"http://imgcache.qq.com/tencentvideo_v1/player/TencentPlayer.swf?max_age=86400&amp;v=20140714\" quality=\"high\" name=\"tenvideo_flash_player_1433945223847\" id=\"tenvideo_flash_player_1433945223847\" bgcolor=\"#000000\" width=\"650px\" height=\"472px\" align=\"middle\" allowscriptaccess=\"always\" allowfullscreen=\"true\" type=\"application/x-shockwave-flash\" pluginspage=\"http://get.adobe.com/cn/flashplayer/\">",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-06-10T22:07:09+08:00",
				"created_by": "",
				"updated_at": "2015-06-11T13:16:49+08:00",
				"updated_by": "",
				"published_at": "2015-06-10T22:07:09+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqyl002eesu388siemcx",
				"title": "See You Again",
				"html": "\n![See you Again](http://sterne.qiniudn.com/image/c/30/3787f3829ea4b2b8e8591c4ed943f.jpg)\n《See You Again》是由美国著名说唱歌手Wiz Khalifa和新人Charlie Puth共同演唱的一首歌曲。这首歌收录于电影《速度与激情7》的原声带中，也是该电影的片尾曲兼主题曲。<!--more-->\n<embed wmode=\"window\" flashvars=\"vid=s0153ma6jnx&amp;tpid=3&amp;showend=1&amp;showcfg=1&amp;searchbar=1&amp;shownext=1&amp;list=2&amp;autoplay=1&amp;ptag=user_qzone_qq_com%7Cuc.manage.li.title&amp;outhost=http%3A%2F%2Fv.qq.com%2Fpage%2Fs%2Fn%2Fx%2Fs0153ma6jnx.html&amp;refer=http%3A%2F%2Fv.qq.com%2Fu%2Fvideos%2F&amp;openbc=0&amp;title=%20See%20You%20Again\" src=\"http://imgcache.qq.com/tencentvideo_v1/player/TencentPlayer.swf?max_age=86400&amp;v=20140714\" quality=\"high\" name=\"tenvideo_flash_player_1433945250613\" id=\"tenvideo_flash_player_1433945250613\" bgcolor=\"#000000\" width=\"650px\" height=\"472px\" align=\"middle\" allowscriptaccess=\"always\" allowfullscreen=\"true\" type=\"application/x-shockwave-flash\" pluginspage=\"http://get.adobe.com/cn/flashplayer/\">",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-06-10T22:07:36+08:00",
				"created_by": "",
				"updated_at": "2015-06-11T13:14:37+08:00",
				"updated_by": "",
				"published_at": "2015-06-10T22:07:36+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqz60036esu3fkg20bzq",
				"title": "JWT在前后端分离中的应用与实践",
				"html": "\n本文主要介绍JWT（[JSON Web Token](http://jwt.io/)）授权机制在前后端分离中的应用与实践，包括以下三部分：  \n1.JWT原理介绍  \n2.JWT的安全性  \n3.React.js+Flux架构下的实践（[React-jwt example](https://github.com/rainyear/react-jwt-example.git)）    \n<!--more-->\n###### 0 关于前后端分离\n前后端分离是一个很有趣的议题，它不仅仅是指前后端工程师之间的相互独立的合作分工方式，更是前后端之间开发模式与交互模式的模块化、解耦化。计算机世界的经验告诉我们，对于复杂的事物，模块化总是好的，无论是后端API开发中越来越成为规范的[RESTful API](http://en.wikipedia.org/wiki/Representational_state_transfer)风格，还是Web前端越来越多的模板、框架（参见[MVC，MVP 和 MVVM 的图示](http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html)），包括移动应用中前后端天然分离的特质，都证实了前后端分离的重要性与必要性（更生动的细节与实例说明可以参看赫门分享的主题[淘宝前后端分离实践](http://2014.jsconf.cn/slides/herman-taobaoweb/#/)）。\n\n实现前后端分离，对于后端开发人员来说是一件很幸福的事情，因为不需要再考虑怎样在HTML中套入数据，只关心数据逻辑的处理；而前端则需要承担接收数据之后界面呈现、用户交互、数据传递等所有任务。虽然这看起来加重了前端的工作量，但实际上有越来越多丰富多样的前端框架可供选择，这让前端开发变得越来越结构化、系统化，前端工程师也不再只是“套版的”。\n\n在所有前端框架中，Facebook推出的[React](http://facebook.github.io/react)无疑是当下最热门（之一），然而React只负责界面渲染层面，相当于MVC中的V（View），因此只靠React无法完成一个完整的单页应用（[Single Page App](http://en.wikipedia.org/wiki/Single-page_application)）。Facebook另外推出与之配套的[Flux](http://facebook.github.io/flux)架构，主要为了避免Angular.js之类MVC的架构模式，规避数据双向绑定而采用单向绑定的数据传递方式。实际上React无论是学习还是使用都是非常简单的，而Flux则需要花更多时间去理解消化，本文第3部分我采用Flux架构的一种实现[Reflux.js](https://github.com/spoike/refluxjs)，做了一个基于JWT授权机制的登入、登出的例子，顺便介绍Flux架构的细节。\n\n######1 JWT 介绍及其原理\nJWT是我之前做Android应用的时候了解到的一种用户授权机制，虽然原生的移动手机应用与基于浏览器的Web应用之间存在很多差异，但很多情况下后端往往还是沿用已有的架构跟代码，所以用户授权往往还是采用Cookie+Session的方式，也就是需要原生应用中模拟浏览器对Cookie的操作。\n\nCookie+Session的存在主要是为了解决HTTP这一无状态协议下服务器如何识别用户的问题，其原理就是在用户登录通过验证后，服务端将数据加密后保存到客户端浏览器的Cookie中，同时服务器保留相对应的Session（文件或DB）。用户之后发起的请求都会携带Cookie信息，服务端需要根据Cookie寻回对应的Session，从而完成验证，确认这是之前登陆过的用户。其工作原理如下图所示：\n\n![Cookie+Session](http://7xiijd.com1.z0.glb.clouddn.com/cookie_sessions.png)\n\nJWT是[Auth0](https://auth0.com/)提出的通过对JSON进行加密签名来实现授权验证的方案，编码之后的JWT看起来是这样的一串字符：\n\n<code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</code>\n\n由.分为三段，通过解码可以得到：\n\n<pre><code>// 1. Headers\n// 包括类别（typ）、加密算法（alg）；\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n// 2. Claims\n// 包括需要传递的用户信息；\n{\n  \"sub\": \"1234567890\",\n  \"name\": \"John Doe\",\n  \"admin\": true\n}\n// 3. Signature\n// 根据alg算法与私有秘钥进行加密得到的签名字串；\n// 这一段是最重要的敏感信息，只能在服务端解密；\nHMACSHA256(  \n    base64UrlEncode(header) + \".\" +\n    base64UrlEncode(payload),\n    SECREATE_KEY\n)</code></pre>\n在使用过程中，服务端通过用户登录验证之后，将Header+Claim信息加密后得到第三段签名，然后将签名返回给客户端，在后续请求中，服务端只需要对用户请求中包含的JWT进行解码，即可验证是否可以授权用户获取相应信息，其原理如下图所示：\n\n![JWT](http://7xiijd.com1.z0.glb.clouddn.com/json_web_token.png)\n\n通过比较可以看出，使用JWT可以省去服务端读取Session的步骤，这样更符合RESTful的规范。但是对于客户端（或App端）来说，为了保存用户授权信息，仍然需要通过Cookie或类似的机制进行本地保存。因此JWT是用来取代服务端的Session而非客户端Cookie的方案，当然对于客户端本地存储，HTML5提供了Cookie之外更多的解决方案（localStorage/sessionStorage），究竟采用哪种存储方式，其实从Js操作上来看没有本质上的差异，不同的选择更多是出于安全性的考虑。\n\n###### 2 JWT 安全性\n用户授权这样敏感的信息，安全性当然是首先需要考虑的因素。这里主要讨论在使用JWT时如何防止XSS和XSRF两种攻击。\n\nXSS是Web中最常见的一种漏洞（我们的**学报官网就存在这个漏洞这件事我就不说了=.=），其主要原因是对用户输入信息不加过滤，导致用户（被误导）恶意输入的Js代码在访问该网页时被执行，而Js可以读取当前网站域名下保存的Cookie信息。针对这种攻击，无论是Cookie还是localStorage中的信息都有可能被窃取，但防止XSS也相对简单一些，对用户输入的所有信息进行过滤即可。另外，现在越来越多的CDN服务，让我们可以节省服务器流量，但同时也有可能引入不安全的Js脚本，例如前段时间Github被Great Cannon轰击的案例，则需要提高对某度之类服务的警惕。\n\n另外一种更加棘手的XSRF漏洞主要利用Cookie是按照域名存储，同时访问某域名时浏览器会自动携带该域名所保存的Cookie信息这一特征。如果执意要将JWT存储在Cookie中，服务端则需要额外验证请求来源，或者在提交表单中加入随机签名并在处理表单时进行验证。\n\n我在后面的实例中采用将JWT保存在localStorage中的方案，请求时将JWT放入Request Header中的Authorization位。对JWT安全性问题想要了解更多可以参考下面几篇文章：\n\n1.[Where to Store Your JWTs - Cookies vs HTML5 Web Storage](https://stormpath.com/blog/where-to-store-your-jwts-cookies-vs-html5-web-storage/)\n2.[Use JWT the Right Way!](https://stormpath.com/blog/jwt-the-right-way/)\n3.[10 Things You Should Know about Tokens](https://auth0.com/blog/2014/01/27/ten-things-you-should-know-about-tokens-and-cookies/)\n4.[Where to store JWT in browser? How to protect against CSRF?](http://stackoverflow.com/questions/27067251/where-to-store-jwt-in-browser-how-to-protect-against-csrf)\n###### 3 React-jwt Example\n本节源码可见[Github: react-jwt-example](https://github.com/rainyear/react-jwt-example)。\n\n前面提到的React.js框架学习成本其实非常低，只要跟着官方教程走一遍，搞清楚props、states、virtual DOM几个概念，就可以开始用了。但是只有View层什么都做不了，Facebook推出配套的Flux架构，一开始看到下面这张架构图，当时我就懵逼了。\n\n![Flux diagram](http://7xiijd.com1.z0.glb.clouddn.com/flux-diagram-white-background.png)\n\n好在Flux只是一种理论架构，虽然官方也提供了实现方案，但是我更倾向于Reflux.js的实现方式，如下图所示：\n\n![Reflux.js](http://7xiijd.com1.z0.glb.clouddn.com/reflux.png)\n\n其中View Components即视图层由React负责，Stores用于存储数据，Actions则用于监听所有动作，所有数据的传递都是单向绑定的，在分割不同模块时，可以清楚地看到数据的流动方向。\n\n我尝试写了一个简单的登录、登出以及获取用户个人数据的例子，除了Reflux之外，还用到如下模块：\n\n1.[react-router](https://github.com/rackt/react-router): SPA路由； \n2.[react-bootstrap](http://react-bootstrap.github.io/): React化的，UI样式；\n3.[reqwest](https://www.npmjs.com/package/reqwest): Ajax请求；\n4.[jwt-decode](https://www.npmjs.com/package/jwt-decode): 客户端的JWT解码；\n另外服务端API采用[Go gin](https://gin-gonic.github.io/gin)框架，依赖于[jwt-go](http://github.com/dgrijalva/jwt-go)。代码目录结构如下：\n\n<pre><code>tree -I 'node_modules|.git'  \n.\n├── README.md\n├── gulpfile.js\n├── index.html\n├── package.json\n├── scripts\n│   ├── actions\n│   │   └── actions.js\n│   ├── app.js\n│   ├── build\n│   │   └── dist.js\n│   ├── components\n│   │   └── HelloWorld.js\n│   ├── stores\n│   │   ├── loginStore.js\n│   │   └── userStore.js\n│   └── views\n│       ├── home.js\n│       ├── login.js\n│       └── profile.js\n└── server.go</code></pre>\n完整的页面放在view中，可复用的组件放在components，用户的动作包括login、logout以及getBalance，因此需要创建相应的action来监听这些动作：\n\n<pre><code>// actions.js\nvar actions = Reflux.createActions({  \n  \"login\": {},\n  \"updateProfile\": {}, // login成功更新用户数据\n  \"loginError\": {}, // login失败错误信息\n  \"logout\": {},\n  \"getBalance\": {asyncResult: true}\n});\n\nactions.login.listen(function(data){});  </code></pre>\n用户点击view中的Submit Button时，将表单信息提交给login action：\n\n<pre><code>// views/login.js\nvar Login = React.createClass({  \n  ...\n  login: function (e) {\n    e.preventDefault();\n    actions.login({\n      name: this.refs.name.getValue(),\n      pass: this.refs.pass.getValue(),\n    }),\n  ...\n});\n// actions.js\nvar req    = require('reqwest');  \nactions.login.listen(function(data){  \n  req({\n    url: HOST+\"/user/token\",\n    method: \"post\",\n    data: JSON.stringify(data),\n    type: 'json',\n    contentType: 'application/json',\n    headers: {'X-Requested-With': 'XMLHttpRequest'},\n    success: function (resp) {\n      if(resp.code == 200){\n        actions.updateProfile(resp.jwt)\n      }else{\n        actions.updateProfile(resp.msg)\n      }\n    },\n  })\n});</code></pre>\n根据API返回结果，将再次触发updateProfile或updateProfile action，而分别由userStore和loginStore接收：\n\n<pre><code>// stores/userStore.js\nvar userStore = Reflux.createStore({  \n  listenables: actions, // 声明userStore所监听的action\n  updateProfile: function(jwt){\n    // 注册监听actions.updateProfile\n    localStorage.setItem('jwt', jwt);\n    this.user = jwt_decode(jwt);\n    this.user.logd = true;\n    this.trigger(this.user);\n  },\n})\n// stores/loginStore.js\nvar loginStore = Reflux.createStore({  \n  listenables: actions,\n  loginError: function(msg){\n    this.trigger(msg);\n  },\n});</code></pre>\nstore接收action数据后，通过**this.trigger(msg)**将处理过后的数据重新传递会view：\n\n<pre><code>var Login = React.createClass({  \n  mixins : [\n    Router.Navigation,\n    Reflux.listenTo(userStore, 'onLoginSucc'),\n    Reflux.listenTo(loginStore, 'onLoginErr')\n  ],\n  onLoginSucc: function(){\n    // 登录成功，跳转回首页\n    this.transitionTo('home');\n  },\n  onLoginErr: function (msg) {\n    // 登录失败，显示错误信息\n    this.setState({\n      errorMsg: msg, \n    });\n  },\n  ...\n});</code></pre>\n至此，从用户点击登录到登录结果传回，整个流程数据在**View->Action->Store->View**中完成单向传递，这就是Flux架构的基本概念。\n\n在完成登录后，API会将验证通过的JWT传回：\n\n<pre><code>// server.go\ntoken := jwt.New(jwt.SigningMethodHS256)  \n// Headers\ntoken.Header[\"alg\"] = \"HS256\"  \ntoken.Header[\"typ\"] = \"JWT\"  \n// Claims\ntoken.Claims[\"name\"] = validUser.Name  \ntoken.Claims[\"mail\"] = validUser.Mail  \ntoken.Claims[\"exp\"] = time.Now().Add(time.Hour * 72).Unix()  \ntokenString, err := token.SignedString([]byte(mySigningKey))  \nif err != nil {  \n  c.JSON(200, gin.H{\"code\": 500, \"msg\": \"Server error!\"})\n  return\n}\nc.JSON(200, gin.H{\"code\": 200, \"msg\": \"OK\", \"jwt\": tokenString})  </code></pre>\n当登录之后的用户在profile页面发起getBalance请求时，存储于本地的jwt将一起传递，我这里采用Header的方式传递，具体取决于API端的协议：\n\n<pre><code>// actions.js\nactions.getBalance.listen(function(){  \n  var jwt = localStorage.getItem('jwt');\n  req({\n    url: HOST+\"/user/balance\",\n    method: \"post\",\n    type: \"json\",\n    headers: {\n      'Authorization': \"Bearer \"+jwt,\n    },\n    success: function (resp) {\n      if (resp.code == 200) {\n        actions.updateProfile(resp.jwt);\n      }else{\n        actions.loginError(resp.msg);\n      }\n    }\n  })\n})</code></pre>\n而服务端面对任何需要验证权限的请求需要通过Token验证：\n\n<pre><code>//server.go\ntoken, err := jwt.ParseFromRequest(c.Request, func(token *jwt.Token) (interface{}, error) {  \n  b := ([]byte(mySigningKey))\n  return b, nil\n})</code></pre>\n【[本文摘自](http://blog.rainy.im/2015/06/10/react-jwt-pretty-good-practice/)】",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-06-12T10:39:58+08:00",
				"created_by": "",
				"updated_at": "2015-06-12T11:55:41+08:00",
				"updated_by": "",
				"published_at": "2015-06-12T10:39:58+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqzb003eesu37xbtcrg0",
				"title": "通过JS语句判断WEB网站的访问端是电脑还是手机",
				"html": "\n通过JS语句判断WEB网站的访问端是电脑还是手机\n<!--more-->\n<pre><code>//平台、设备和操作系统\n        var system = {\n            win: false,\n            mac: false,\n            xll: false,\n            ipad:false\n        };\n        //检测平台\n        var p = navigator.platform;\n        system.win = p.indexOf(\"Win\") == 0;\n        system.mac = p.indexOf(\"Mac\") == 0;\n        system.x11 = (p == \"X11\") || (p.indexOf(\"Linux\") == 0);\n        system.ipad = (navigator.userAgent.match(/iPad/i) != null)?true:false;\n        //跳转语句，如果是手机访问就自动跳转到wap.baidu.com页面\n        if (system.win || system.mac || system.xll||system.ipad) {\n \n        } else {\n \n            window.location.href = \"http://www.jdpatro.com/3g/\";\n        }</code></pre>\n###### 腾讯网的适配代码\n<pre><code>if(/AppleWebKit.*Mobile/i.test(navigator.userAgent) || (/MIDP|SymbianOS|NOKIA|SAMSUNG|LG|NEC|TCL|Alcatel|BIRD|DBTEL|Dopod|PHILIPS|HAIER|LENOVO|MOT-|Nokia|SonyEricsson|SIE-|Amoi|ZTE/.test(navigator.userAgent))){\n    if(window.location.href.indexOf(\"?mobile\")<0){\n        try{\n            if(/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)){\n                window.location.href=\"http://shipei.qq.com/index.htm\";\n            }else if(/iPad/i.test(navigator.userAgent)){\n            }else{\n                window.location.href=\"http://shipei.qq.com/simple/s/index/\"\n            }\n        }catch(e){}\n    }\n}</code></pre>\n<pre><code>var browser = {\n        versions : function() {\n            var u = navigator.userAgent, app = navigator.appVersion;\n            return {//移动终端浏览器版本信息                                 \n            trident : u.indexOf('Trident') > -1, //IE内核                                 \n            presto : u.indexOf('Presto') > -1, //opera内核                                 \n            webKit : u.indexOf('AppleWebKit') > -1, //苹果、谷歌内核                                 \n            gecko : u.indexOf('Gecko') > -1 && u.indexOf('KHTML') == -1, //火狐内核                                \n            mobile : !!u.match(/AppleWebKit.*Mobile.*/)\n                    || !!u.match(/AppleWebKit/), //是否为移动终端                                 \n            ios : !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端                 \n            android : u.indexOf('Android') > -1 || u.indexOf('Linux') > -1, //android终端或者uc浏览器                                 \n            iPhone : u.indexOf('iPhone') > -1 || u.indexOf('Mac') > -1, //是否为iPhone或者QQHD浏览器                    \n            iPad: u.indexOf('iPad') > -1, //是否iPad       \n            webApp : u.indexOf('Safari') == -1,//是否web应该程序，没有头部与底部\n            google:u.indexOf('Chrome')>-1\n        };\n    }(),\n    language : (navigator.browserLanguage || navigator.language).toLowerCase()\n    }\n    document.writeln(\"语言版本: \"+browser.language);\n    document.writeln(\" 是否为移动终端: \"+browser.versions.mobile);</code></pre>\n###### 如何判断访问网站的机器类型-如何判断ipad\n\n如何判断是否是 iPad 浏览器呢，关键是看它的 User Agent 中是否有 iPad。iPad 使用的是 Safari Mobile 浏览器，他的的 User Agent 是：\n<pre><code>Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B334b Safari/531.21.10\n\nfunction is_iPad(){        \n [object Object] [object Object] [object Object]var ua = navigator.userAgent.toLowerCase();\n [object Object] [object Object] [object Object]if(ua.match(/iPad/i)==\"ipad\") {                \n [object Object] [object Object] [object Object] [object Object] [object Object] [object Object]return true;\n [object Object] [object Object] [object Object]} else {\n [object Object] [object Object] [object Object] [object Object] [object Object] [object Object]return false;\n [object Object] [object Object] [object Object]}\n}\n\n\n$is_iPad = (bool) strpos($_SERVER['HTTP_USER_AGENT'],'iPad');\n\nRewriteCond %{HTTP_USER_AGENT} ^.*iPad.*$\nRewriteRule ^(.*)$ http://ipad.fairyfish.net [R=301]</code></pre>\n\n###### JS 判断浏览器客户端类型(ipad,iphone,android)\n<pre><code>var bForcepc\n= fGetQuery(\"dv\") == \"pc\";  \n   function\nfBrowserRedirect(){  \n       var sUserAgent = navigator.userAgent.toLowerCase(); \n       var bIsIpad = sUserAgent.match(/ipad/i) ==\n\"ipad\";   \n       var bIsIphoneOs = sUserAgent.match(/iphone os/i) == \"iphone os\"; \n       var bIsMidp = sUserAgent.match(/midp/i) == \"midp\"; \n       var bIsUc7 = sUserAgent.match(/rv:1.2.3.4/i) == \"rv:1.2.3.4\"; \n       var bIsUc = sUserAgent.match(/ucweb/i) == \"ucweb\"; \n       var bIsAndroid = sUserAgent.match(/android/i) == \"android\"; \n       var bIsCE = sUserAgent.match(/windows ce/i) == \"windows ce\"; \n       var bIsWM = sUserAgent.match(/windows mobile/i) == \"windows\nmobile\";  \n       if(bIsIpad){  \n           var sUrl =\nlocation.href;     \n           if(!bForcepc){  \n               window.location.href = \"http://ipad.mail.163.com/\"; \n           }  \n       }  \n       if(bIsIphoneOs || bIsAndroid){  \n           var sUrl =\nlocation.href;     \n           if(!bForcepc){  \n               window.location.href = \"http://smart.mail.163.com/\"; \n           }  \n       }  \n       if(bIsMidp||bIsUc7||bIsUc||bIsCE||bIsWM){  \n           var sUrl =\nlocation.href;     \n           if(!bForcepc){  \n               window.location.href = \"http://m.mail.163.com/\"; \n           }  \n       }  \n   } \n   function\nfGetQuery(name){//获取参数值  \n       var sUrl = window.location.search.substr(1); \n       var r = sUrl.match(new RegExp(\"(^|&)\" + name +\n\"=([^&]*)(&|$)\")); \n       return (r == null ? null : (r[2])); \n   } \n   function\nfShowVerBlock(){    \n       if(bForcepc){  \n           document.getElementByIdx_x(\"dv_block\").style.display = \"block\"; \n       }  \n       else{  \n           document.getElementByIdx_x(\"ad_block\").style.display = \"block\"; \n       }  \n   } \n   fBrowserRedirect();</code></pre>",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-06-12T11:02:44+08:00",
				"created_by": "",
				"updated_at": "2015-06-12T11:20:21+08:00",
				"updated_by": "",
				"published_at": "2015-06-12T11:02:44+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqzc003hesu3enww6teu",
				"title": "手机web——自适应网页设计（html/css控制）",
				"html": "\n######一. 允许网页宽度自动调整： \"自适应网页设计\"到底是怎么做到的？\n\n其实并不难。 首先，在网页代码的头部，加入一行viewport元标签。\n\n>&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\n&nbsp;&nbsp;viewport是网页默认的宽度和高度，上面这行代码的意思是，网页宽度默认等于屏幕宽度（width=device-width），原始缩放比例（initial-scale=1）为1.0，即网页初始大小占屏幕面积的100%。 对于viewport属性，我是真正在接触移动web开发是才遇到的，一把的ps布局都是固定的960px，1000px这种。\n<!--more-->\n&nbsp;&nbsp;下面三篇文章是对viewport属性详细的解释： Viewport（视区概念）——pc端的理解 Viewport（视区概念）——移动端的应用 viewport ——视区概念（转） 对于老式IE6，7，8浏览器需要js处理，由于主要平台是ios和安卓，所有可以暂时不考虑\n\n###### 二. 不使用绝对宽度 由于网页会根据屏幕宽度调整布局，所以不能使用绝对宽度的布局，也不能使用具有绝对宽度的元素。\n\n这一条非常重要。 具体说，CSS代码不能指定像素宽度： width:xxx px; 只能指定百分比宽度： width: xx%; 或者：width:auto; 这里开发是指一个网页不仅能用在ps上，也能同时用于移动端，但是对于webapp这种还是需要单独做一个webapp使用的页面。\n\n对于这个知识点，对于我目前做的项目有用处，主要用于控制限定数据库里读出来的图片宽度。 详见：手机webapp的jquery mobile初次使用心得和解决图片自适应大小问题\n\n###### 三. 相对大小的字体 字体也不能使用绝对大小（px），而只能使用相对大小（em）。\n\nbody { font: normal 100% Helvetica, Arial, sans-serif; }  \n上面的代码指定，字体大小是页面默认大小的100%，即16像素。\n\nh1 { font-size: 1.5em; }  \n然后，h1的大小是默认大小的1.5倍，即24像素（24/16=1.5）。\n\nsmall { font-size: 0.875em; }  \nsmall元素的大小是默认大小的0.875倍，即14像素（14/16=0.875）。\n\n###### 四. 流动布局（fluid grid） \"流动布局\"的含义是，各个区块的位置都是浮动的，不是固定不变的。 　\n\n.main { float: right; width: 70%; } .leftBar { float: left; width: 25%; }  \nfloat的好处是，如果宽度太小，放不下两个元素，后面的元素会自动滚动到前面元素的下方，不会在水平方向overflow（溢出），避免了水平滚动条的出现。 另外，绝对定位（position: absolute）的使用，也要非常小心。\n\n###### 五. \"自适应网页设计\"的核心，就是CSS3引入的Media Query模块。 它的意思就是，自动探测屏幕宽度，然后加载相应的CSS文件。\n\n<link rel=\"stylesheet\" type=\"text/css\" media=\"screen and (max-device-width: 400px)\" href=\"tinyScreen.css\" />  \n上面的代码意思是，如果屏幕宽度小于400像素（max-device-width: 400px），就加载tinyScreen.css文件。 　\n\n<link rel=\"stylesheet\" type=\"text/css\" media=\"screen and (min-width: 400px) and (max-device-width: 600px)\" href=\"smallScreen.css\" /> \n如果屏幕宽度在400像素到600像素之间，则加载smallScreen.css文件。 除了用html标签加载CSS文件，还可以在现有CSS文件中加载。\n\n@import url(\"tinyScreen.css\") screen and (max-device-width: 400px);  \n六. CSS的@media规则 同一个CSS文件中，也可以根据不同的屏幕分辨率，选择应用不同的CSS规则。\n\n@media screen and (max-device-width: 400px) { .column { float: none; width:auto; } #sidebar { display:none; } }  \n上面的代码意思是，如果屏幕宽度小于400像素，则column块取消浮动（float:none）、宽度自动调节（width:auto），sidebar块不显示（display:none）。\n\n###### 七. 图片的自适应（fluid image） 除了布局和文本，\"自适应网页设计\"还必须实现图片的自动缩放。 这只要一行CSS代码： 　\n\nimg { max-width: 100%;} 这行代码对于大多数嵌入网页的视频也有效，所以可以写成：\n\nimg, object { max-width: 100%;}\n\n老版本的IE不支持max-width，\n\n所以只好写成： img { width: 100%; }\n\n此外，windows平台缩放图片时，可能出现图像失真现象。这时，可以尝试使用IE的专有命令： 　\n\nimg { -ms-interpolation-mode: bicubic; } 或者，Ethan Marcotte的imgSizer.js。 addLoadEvent(function() { var imgs = document.getElementById(\"content\").getElementsByTagName(\"img\"); imgSizer.collate(imgs); });  \n不过，有条件的话，最好还是根据不同大小的屏幕，加载不同分辨率的图片。有很多方法可以做到这一条，服务器端和客户端都可以实现。",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-06-12T11:13:22+08:00",
				"created_by": "",
				"updated_at": "2015-06-12T11:20:02+08:00",
				"updated_by": "",
				"published_at": "2015-06-12T11:13:22+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqz9003aesu36y3p7296",
				"title": "赏心悦目！手机应用动画效果赏析",
				"html": "\n&nbsp;&nbsp;&nbsp;&nbsp;随着国际大品牌苹果和谷歌的引领，最近越来越多的国内公司开始关注动效设计了，越来越多的团队已经意识到动效在产品用户体验中的重要性了，更多的射鸡师们也开始投身动效设计领域。  \n<!--more-->\n&nbsp;&nbsp;&nbsp;&nbsp;但是说到底，我们到底为什么需要动效设计？或者说我们到底需要什么样的动效？做动效设计也有段时间了，于是尝试用一些案例，从产品本身出发来说说我所思考的动效设计。\n![我们为什么需要设计](http://img.ithome.com/newsuploadfiles/2015/6/20150613_191828_190.jpg)\n（文中部分案例为设计师个人作品，部分为线上产品，都是我非常非常欣赏的作品。如不慎冒犯请戳我替换掉）\n##### 一、加强体验舒适度\n嗯，就是让用户更加爽更加爽的用你的产品。  \n具体表现在：  \n###### 1.表现层级关系\n为了展现层与层的关系，是抽屉，是打开，还是平级切换等等，让用户知道这个界面和上一个、下一个的关系。这已经是非常最常见的运用了。\n![](http://img.ui.cn/data/file/2/4/3/260342.gif)\n###### 2.与用户手势结合，更自然的动画表现\n当用户手势操作的时候，让界面的动态走向更符合手指的运动，从而让用户感觉到是自己控制了界面的动向，而不是机械化的跳转。\n![](http://img.ui.cn/data/file/3/4/3/260343.gif)    \nCity guide app 用手势可以向左向右扔卡片\n###### 3.愉快的提示功能\n在某些需要提醒的时候能吸引用户的注意，但是又不会生硬，符合预期的出现。\n![](http://img.ui.cn/data/file/4/4/3/260344.gif)\nAction button feedback 出错提示\n![](http://img.ui.cn/data/file/5/4/3/260345.gif)\nCity Guides 启动时提示用户可以左右滑动卡片\n###### 4.额外增加界面的活力\n在用户预期之外增加的惊喜，可以是帅气的，可以是卖萌，可以有些物理属性，总之让用户感知到产品的生命力。\n![](http://img.ui.cn/data/file/6/4/3/260346.gif)\nreadme.io 萌萌的输入框\n![](http://img.ui.cn/data/file/7/4/3/260347.gif)\namazon Q弹的菜单\n![](http://img.ui.cn/data/file/8/4/3/260348.gif)\ntumblr  不喜欢我心都碎了呢~\n###### 5.吸引用户持久的注意力\n也是属于增加用户的惊喜感，在某些数据量较大的界面中添加一些动效，让用户保持注意力。\n![](http://img.ui.cn/data/file/9/4/3/260349.gif)\nBubbles 以动态的形式展现数据点\n#####二、减弱不可避免的不适感    \n虽然我们的产品，我们的交互，我们的设计，我们的工程狮都在努力把产品打造的更加优秀，更加完美，但是总有一些无法避免的问题、或者有可能会出现的bug、外界条件的不给力等因素，造成我们的产品体验下降。这些时候适当的增加一些动效可以弥补在出现这些情况时的不适体验。  \n比如下面这些：\n###### 1.让等待变得更愉快\n常出现在加载、刷新、发送等界面中，让等待变得可视化，甚至不再那么无聊。\n![](http://img.ui.cn/data/file/0/5/3/260350.gif)\nDownload Progress 让下载不再枯燥\n![](http://img.ui.cn/data/file/1/5/3/260351.gif)\nApp loader 有趣的loading动画\n![](http://img.ui.cn/data/file/2/5/3/260352.gif)\ngear-powered 拉了还想拉的下拉刷新\n###### 2.失败界面的动效\n比如刷新失败、页面错误、未联网提示这些。\n![](http://img.ui.cn/data/file/4/5/3/260354.gif)\ndownload 就算失败了还是感觉萌萌哒~\n######3.增加界面与界面衔接的延续感\n界面的跳转不可以避免，但是如果让本来分别独立的2个界面或者事件拥有了某种特定的联系，可以显得更加好玩，不再是生硬的跳转。\n![](http://img.ui.cn/data/file/5/5/3/260355.gif)\niOS Animation Download 界面跳转时保留部分元素到下一个界面\n![](http://img.ui.cn/data/file/6/5/3/260356.gif)\nFilter Menu 保留需要的条目移走不再用的\n![](http://img.ui.cn/data/file/9/5/3/260359.gif)\nElevate\n#####三、不易被察觉的动效   \n特意把这一类单独说一下，由于不容易被发现，普通用户通常会忽略它们的存在，但很多时候这些小细节让交互变得更加有趣。\n######1.默默增加反馈感\n为用户的操作提供有趣的正反馈。\n![](http://img.ui.cn/data/file/1/6/3/260361.gif)\nTwitter 收藏的点击反馈\n######2.去除用户不再需要的元素\n随着用户的操作，有的内容已经是用户不再关注的。这时候可以将他们隐藏起来。\n![](http://img.ui.cn/data/file/8/6/3/260368.gif)\nCityHour Calendar Animated Interaction\n![](http://img.ui.cn/data/file/9/6/3/260369.gif)\nSteller  \n\n&nbsp;&nbsp;&nbsp;&nbsp;上面的例子大部分都是比较特色鲜明的，但是大多数实际情况中的优秀动效设计都会涉及到好几点同时都满足。总的来说动效还是为用户体验而服务的，动效设计师尤其要注意交互逻辑，才能让你的作品看起来不但动效帅气逼人而且真正发挥了实际的作用。  \n\n最后要提醒的是，千万不要牺牲了用户宝贵的时间用来看你毫无目的的动效。",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-06-15T09:41:29+08:00",
				"created_by": "",
				"updated_at": "2015-11-06T16:31:43+08:00",
				"updated_by": "",
				"published_at": "2015-06-15T09:41:29+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqzf003lesu31sai6h3i",
				"title": "判断浏览器类型来选择网址",
				"html": "\n在HTML文档的头部head加入以下代码  \n<pre><code>\nif((/android|webos|ip(hone|ad|od)|opera (mini|mobi|tablet)|iemobile|windows.+(phone|touch)|mobile|fennec|kindle (Fire)|Silk|maemo|blackberry|playbook|bb10\\; (touch|kbd)|Symbian(OS)|Ubuntu Touch/i.test(navigator.userAgent)) || window.navigator.userAgent.indexOf('baidumap_IPHO') != -1 || window.navigator.userAgent.indexOf('baidumap_ANDR') != -1){\n          location.replace('mobile/index.html');\n        }\n</code></pre>  \n<!--more-->\n其中的baidumap_*表示在百度地图中打开网址时的跳转。  \n使用navigator.userAgent来判断浏览器类型。",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-07-23T10:22:48+08:00",
				"created_by": "",
				"updated_at": "2015-07-23T10:28:21+08:00",
				"updated_by": "",
				"published_at": "2015-07-23T10:22:48+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqzh003pesu39ra8azcl",
				"title": "requestAnimationFrame，Web中写动画的另一种选择",
				"html": "\nHTML5/CSS3时代，我们要在web里做动画选择其实已经很多了:\n你可以用CSS3的animattion+keyframes;\n你也可以用css3的transition;\n你还可以用通过在canvas上作图来实现动画，也可以借助jQuery动画相关的API方便地实现;\n<!--more-->\n当然最原始的你还可以使用window.setTimout()或者window.setInterval()通过不断更新元素的状态位置等来实现动画，前提是画面的更新频率要达到每秒60次才能让肉眼看到流畅的动画效果。\n现在又多了一种实现动画的方案，那就是还在草案当中的window.requestAnimationFrame()方法。\n####初识requestAnimationFrame\n来看[MDN](https://developer.mozilla.org/en/docs/Web/API/window.requestAnimationFrame)上对其给出的诠释：  \nThe window.requestAnimationFrame() method tells the browser that you wish to perform an animation and requests that the browser call a specified function to update an animation before the next repaint.   \nThe method takes as an argument a callback to be invoked before the repaint.  \n\nwindow.requestAnimationFrame() 将告知浏览器你马上要开始动画效果了，后者需要在下次动画前调用相应方法来更新画面。这个方法就是传递给window.requestAnimationFrame()的回调函数。  \n\n也可这个方法原理其实也就跟setTimeout/setInterval差不多，通过递归调用同一方法来不断更新画面以达到动起来的效果，但它优于setTimeout/setInterval的地方在于它是由浏览器专门为动画提供的API，在运行时浏览器会自动优化方法的调用，并且如果页面不是激活状态下的话，动画会自动暂停，有效节省了CPU开销。\n####基本语法\n可以直接调用，也可以通过window来调用，接收一个函数作为回调，返回一个ID值，通过把这个ID值传给window.cancelAnimationFrame()可以取消该次动画。\n```javascript\nrequestAnimationFrame(callback)//callback为回调函数\n```\n#####一个简单的例子\n模拟一个进度条动画，初始div宽度为1px,在step函数中将进度加1然后再更新到div宽度上，在进度达到100之前，一直重复这一过程。 \n```html\n<div id=\"test\" style=\"width:1px;height:17px;background:#0f0;\">0%</div>\n<input type=\"button\" value=\"Run\" id=\"run\"/>\n```\n```javascript\nwindow.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\nvar start = null;\nvar ele = document.getElementById(\"test\");\nvar progress = 0;\n\nfunction step(timestamp) {\n    progress += 1;\n    ele.style.width = progress + \"%\";\n    ele.innerHTML=progress + \"%\";\n    if (progress < 100) {\n        requestAnimationFrame(step);\n    }\n}\nrequestAnimationFrame(step);\ndocument.getElementById(\"run\").addEventListener(\"click\", function() {\n    ele.style.width = \"1px\";\n    progress = 0;\n    requestAnimationFrame(step);\n}, false);\n```\n####浏览器支持情况\n既然还是草案状态下引入的一个功能，在使用全我们就需要关心一下各浏览器对它的支持情况了。就目前来说，主流现代浏览器都对它提供了支持。\n",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-08-27T15:16:40+08:00",
				"created_by": "",
				"updated_at": "2015-11-06T16:32:38+08:00",
				"updated_by": "",
				"published_at": "2015-08-27T15:16:40+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqzj003sesu39ab910jq",
				"title": "把HTML插入canvas实现网页截图",
				"html": "\n将DOM内容HTML绘制到画布中是有可能的，但如何有把握并且安全地实现它，就应该按照规范行事。你不能把HTML画到canvas上。相反，你需要使用一个SVG图像，其中包含你想要呈现的内容。可以使用＜foreignobject>元素包含HTML内容，之后把这个svg绘制到你的canvas中。  \n<!--more-->\n唯一真正棘手的事情可能是创建SVG图像，所有你需要做的是创建一个包含XML字符串的SVG，然后按照下面的步骤构造一个Blob：  \n\n`blob对象的媒体类型mime为 “image/svg+xml”<svg> 元素. \n在svg元素中包含 <foreignobject> 元素.\n（格式化好的）HTML，被包裹到<foreignobject>中.`  \n\n如上所述通过使用一个object URL，我们可以内联HTML而不是从外部源加载它。当然，如果你喜欢，可以使用外部源，只要域与原始文件相同，比如：  \n```html\n<!DOCTYPE html>\n<html>\n<body>\n<p><canvas id=\"canvas\" style=\"border:2px solid black;\" width=\"200\" height=\"200\"></canvas>\n<script>\nvar canvas = document.getElementById(\"canvas\");\nvar ctx = canvas.getContext(\"2d\");\nvar data = \"<svg xmlns='http://www.w3.org/2000/svg' width='200' height='200'>\" +\n             \"<foreignObject width='100%' height='100%'>\" +\n               \"<div xmlns='http://www.w3.org/1999/xhtml' style='font-size:40px'>\" +\n                 \"<em>I</em> like <span style='color:white; text-shadow:0 0 2px blue;'>cheese</span>\" +\n               \"</div>\" +\n             \"</foreignObject>\" +\n           \"</svg>\";\nvar DOMURL = self.URL || self.webkitURL || self;\nvar img = new Image();\nvar svg = new Blob([data], {type: \"image/svg+xml;charset=utf-8\"});\nvar url = DOMURL.createObjectURL(svg);\nimg.onload = function() {\n    ctx.drawImage(img, 0, 0);\n    DOMURL.revokeObjectURL(url);\n};\nimg.src = url;\n</script>\n</body>\n</html>\n```\ndata变量设置了SVG图像的内容（这包括HTML），我们希望绘制到我们的canvas中。通过调用 new Image()我们建立一个新的html < img>元素，添加数据进去，指定一个object URL，之后在图片onload的时候调用 drawImage() 来把图片绘制到画布中。\n\n您可能想知道这种方式是否安全，担心canvas会读取敏感数据。答案是这样的：这个解决方案的实现依赖的SVG图像是非常严格的。SVG图像不允许加载任何外部资源，即使似乎来自同一个域。资源如栅格图像（如JPEG图像）或< iframe>s 需要用 data: URIs来内联引入。\n\n此外，你不能在一个SVG图像中引入脚本文件，所以没有从其他脚本访问DOM的风险，而且DOM元素在SVG图像中不能接收事件的输入，所以没有办法通过把隐私信息加载到一个表单控件（如一个文件的完整路径< input> 元素）然后渲染出来，之后通过读取像素把这些信息取出。\n\n访问过的链接风格并不应用于SVG图像中呈现的链接，所以历史信息也不能被检索，本地的主题也不呈现在SVG图像中，这使得它很难确定用户的平台。\n\n生成的canvas元素是纯净的，意味着你可以通过调用 toBlob(function(blob){…})来返回canvas的blob，或者toDataURL()来返回Base64-编码的data: URI。\n\nSVG必须是合法的XML，你需要解析并把HTML转为规范的符合格式的。下面的代码可以很方便地解析HTML：\n```javascript\nvar doc = document.implementation.createHTMLDocument(\"\");\ndoc.write(html);\n\n// You must manually set the xmlns if you intend to immediately serialize the HTML\n// document to a string as opposed to appending it to a <foreignObject> in the DOM\ndoc.documentElement.setAttribute(\"xmlns\", doc.documentElement.namespaceURI);\n\n// Get well-formed markup\nhtml = (new XMLSerializer).serializeToString(doc);\n```\n本文为Anyforweb技术分享博客，需要了解网站建设及更多Web应用相关信息，请访问anyforweb.com。\n",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-09-29T09:43:17+08:00",
				"created_by": "",
				"updated_at": "2015-11-23T15:05:24+08:00",
				"updated_by": "",
				"published_at": "2015-09-29T09:43:17+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqzp003zesu32jdzamkm",
				"title": "简单的H5翻页实现",
				"html": "\n随着着微信的广泛应用，H5应该得到了大量的使用传播，现在咱就来做一个简单的H5翻页动作。    \n  \n首先，页面的结构如下：    \n在content里面设置四个class=page的div\n然后在javascript中使用（主要写往下翻）  \n<!--more-->\n<code>$('.page').on('touchstart',function(ev){\n  var touch  = ev.touches ? ev.touches[0] : ev;\n  this.pageX = touch.pageX;\n  this.pageY = touch.pageY;\n}).on('touchmove',function(ev){\n  ev.preventDefault();\n  var touch  = ev.touches ? ev.touches[0] : ev;\n  this.distX = touch.pageX - this.pageX;\n  this.distY = touch.pageY - this.pageY;\n  this.style.webkitTransform = 'translateY('+this.distY+'px)';\n}).on(''touchend touchcancel',function(ev){\n  ev.preventDefault();\n  if(this.distx < -30){\n  $('.content').style.webkitTransform = 'translateY('+ -100% +'px)';\n}\n});</code>\n",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-10-20T14:22:39+08:00",
				"created_by": "",
				"updated_at": "2015-11-06T16:34:12+08:00",
				"updated_by": "",
				"published_at": "2015-10-20T14:22:39+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqzn003wesu3ghejds7s",
				"title": "12 个 CSS 高级技巧汇总",
				"html": "\n下面这些CSS高级技巧，一般人我可不告诉他哦。\n\n* 使用 :not() 在菜单上应用/取消应用边框  \n* 给body添加行高  \n* 所有一切都垂直居中  \n* 逗号分隔的列表  \n* 使用负的 nth-child 选择项目  \n* 对图标使用SVG  \n* 优化显示文本  \n* 对纯CSS滑块使用 max-height  \n* 继承 box-sizing  \n* 表格单元格等宽  \n* 用Flexbox摆脱外边距的各种hack  \n* 使用属性选择器用于空链接  \n* 使用 :not() 在菜单上应用/取消应用边框  \n*先给每一个菜单项添加边框  \n<!--more-->\n```css\n.nav li {\n  border-right: 1px solid #666;\n}\n```\n\n……然后再除去最后一个元素……  \n```css\n// remove border /  \n.nav li:last-child {\n  border-right: none;\n} \n```\n\n\n……可以直接使用 :not() 伪类来应用元素：  \n```css\n.nav li:not(:last-child) {\n  border-right: 1px solid #666;\n}  \n```\n这样代码就干净，易读，易于理解了。\n\n当然，如果你的新元素有兄弟元素的话，也可以使用通用的兄弟选择符（~）：\n```css\n.nav li:first-child ~ li {  \nborder-left: 1px solid #666;\n}  \n```  \n给 body添加行高\n你不需要分别添加 line-height 到每个 <p>，<h*>等。只要添加到 body 即可：\n```css\nbody {\n  line-height: 1;\n}\n```\n这样文本元素就可以很容易地从 body 继承。  \n所有一切都垂直居中\n要将所有元素垂直居中，太简单了：\n```css\nhtml, body {\n  height: 100%;\n  margin: 0;\n}\nbody {\n  -webkit-align-items: center;  \n  -ms-flex-align: center;  \n  align-items: center;\n  display: -webkit-flex;\n  display: flex;\n}\n```\n看，是不是很简单。\n\n* 注：在IE11中要小心flexbox。\n\n逗号分隔的列表\n让HTML列表项看上去像一个真正的，用逗号分隔的列表：\n```css\nul > li:not(:last-child)::after {\n  content: \",\";\n}\n```\n对最后一个列表项使用 :not() 伪类。\n\n使用负的 nth-child 选择项目\n在CSS中使用负的 nth-child 选择项目1到项目n。\n```css\nli {\n  display: none;\n}\n/* select items 1 through 3 and display them */\nli:nth-child(-n+3) {\n  display: block;\n}\n```\n就是这么容易。\n对图标使用SVG\n我们没有理由不对图标使用SVG：\n```css\n.logo {\n  background: url(\"logo.svg\");\n}\n```\nSVG对所有的分辨率类型都具有良好的扩展性，并支持所有浏览器都回归到IE9。这样可以避开.png、.jpg或.gif文件了。\n\n优化显示文本\n有时，字体并不能在所有设备上都达到最佳的显示，所以可以让设备浏览器来帮助你：\n```css\nhtml {\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  text-rendering: optimizeLegibility;\n}\n```\n注：请负责任地使用 optimizeLegibility。此外，IE /Edge没有 text-rendering 支持。\n\n对纯CSS滑块使用 max-height\n使用 max-height 和溢出隐藏来实现只有CSS的滑块：\n```css\n.slider ul {\n  max-height: 0;\n  overlow: hidden;\n}\n.slider:hover ul {\n  max-height: 1000px;\n  transition: .3s ease;\n}\n```\n继承 box-sizing\n让 box-sizing 继承 html：\n```css\nhtml {\n  box-sizing: border-box;\n}\n*,*:before,*:after {\n  box-sizing: inherit;\n}\n```\n这样在插件或杠杆其他行为的其他组件中就能更容易地改变 box-sizing 了。\n\n表格单元格等宽  \n表格工作起来很麻烦，所以务必尽量使用 table-layout: fixed 来保持单元格的等宽：\n```css\n.calendar {\n  table-layout: fixed;\n}\n```\n用Flexbox摆脱外边距的各种hack\n当需要用到列分隔符时，通过flexbox的 space-between 属性，你就可以摆脱nth-，first-，和 last-child 的hack了：\n```css\n.list {\n  display: flex;\n  justify-content: space-between;\n}\n.list .person {\n  flex-basis: 23%;\n}\n```\n现在，列表分隔符就会在均匀间隔的位置出现。  \n使用属性选择器用于空链接  \n\n当 &lt;a&gt; 元素没有文本值，但 href 属性有链接的时候显示链接：\n```css\na[href^=\"http\"]:empty::before {\n  content: attr(href);\n}\n```\n相当方便。\n\n支持\n这些高级技巧在Chrome、Firefox、Safari、Edge的当前版本，以及IE11中都能有效工作。",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-10-30T10:39:44+08:00",
				"created_by": "",
				"updated_at": "2015-11-06T16:33:22+08:00",
				"updated_by": "",
				"published_at": "2015-10-30T10:39:44+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqzy004desu3bu4m9sdu",
				"title": "自适应设计与响应式网页设计",
				"html": "\n目前非常流行自适应设计与响应式设计，而且经常让人混淆，自适应设计不应与自适应布局混为一谈，它们是完全不一样的概念。  \n######在这先说明下这两者的异同：\n * 自从移动终端飞速发展以来，各种各样的机型突飞猛进，很多网站的解决方法，是为不同的设备提供不同的网页，比如专门提供一个mobile版本，或者iPhone/iPad版本。这样做固然保证了效果，但是比较麻烦，同时要维护好几个版本，而且如果一个网站有多个portal（入口），会大大增加架构设计的复杂度。  \n * 于是，很早就有人设想，能不能\"一次设计，普遍适用\"，让同一张网页自动适应不同大小的屏幕，根据屏幕宽度，自动调整布局（layout）？\n <!--more-->\n2010年，Ethan Marcotte提出了\"[自适应网页设计](http://alistapart.com/article/responsive-web-design)\"（Responsive Web Design）这个名词，指可以自动识别屏幕宽度、并做出相应调整的网页设计。  \n![图片](http://cdn.alloyteam.com/wp-content/uploads/2015/04/%E5%9B%BE%E7%89%872.png)\n图片来源http://mashable.com/2012/12/11/responsive-web-design/\n\n * 如图所示就叫做自适应布局。自适应布局有它的使用价值，在于它能够提供一种更加实用的解决方案，使得项目的实现成本更低，并且更加易于测试。一个自适应布局可以被看作是响应式布局的一个更加廉价的替代品，会在项目资源紧缺的情况下更具有吸引力。\n######而在响应式布局中你却要考虑上百种不同的状态:\n * 响应式网页设计是自适应网页设计的子集。响应式网页设计指的是页面的布局（流动网格、灵活的图像及媒介查询）。总体目标就是去解决设备多样化问题。\n * 响应式布局等于流动网格布局，而自适应布局等于使用固定分割点来进行布局。\n * 当固定宽度与流动宽度结合起来时，自适应布局就是一种响应式设计，而不仅仅是它的一种替代方法。​\n######那么如何进行响应式布局呢？下面就一步步为你揭开响应式布局的面纱：\n * Skill 1 学会运用 Css3 Media Queries，根据不同的屏幕分辨率，选择应用不同的Css规则\n * Media Queries语法简介：  \nmax-width：若浏览区域的宽度小于400像素，则下方的CSS描述就会立即被套用：\n```css\n@media screen and (max-width:400px){ \n    .class  {\n         background:#ccc; \n     }\n }\n```\n也可以把要套用的描述独立成外部档案：\n```html\n<link rel=\"stylesheet\" media=\"screen and (max-width: 400px)\" href=\"mini.css\" />\n```\nMin Width：若浏览区域的宽度大于800像素，则下方的CSS描述就会立即被套用：\n```css\n@media screen and (min-width:800px){\n  .class\n  {\n    background:#666;\n  }\n}\n```\nDevice Width：若浏览设备的可视范围最大为480px，则下方的CSS描述就会立即被套用：(注：移动手机目前常见最大宽度为480px，如iPhone or Android Phone)\n```css\n@media screen and (max-device-width:480px){\n  .class\n  {\n    background:#000;\n  }\n}\n```\n针对iPhone4提供专用的css设定档：\n```html\n<link rel= \"stylesheet\"  media= \"only screen and (-webkit-min-device-pixel-ratio: 2)\"  type= \"text/css\"  href= \"iphone4.css\"  />\n```\n针对iPad的Portrait Mode(直立)与Landscape Mode(横躺)两种浏览模式给予不同的css设定档：\n```html\n<link rel=\"stylesheet\" media=\"all and (orientation:portrait)\" href=\"portrait.css\">\n \n<link rel=\"stylesheet\" media=\"all and (orientation:landscape)\" href=\"landscape.css\">\n```\n * Skill 2 在网页头部加上viewport标签\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n```\n浏览器推出了“viewport meta”标签，许多移动浏览器现在都支持这个标签，W3C 协议定义 viewport meta 目前还属于草案，很多人都會在html head 处加上 viewport 这个meta data，一个典型的移动端viewport如上。  \n该属性可以控制视窗口宽度的大小。它可以被设置为实际的具体像素    width= 600或为特殊设备设置宽度值。\nviewport设置属性如下：\nwidth：可设定数值，或者指定为 device-width\nheight：可设定数值，或者指定為 device-height\ninitial-scale：第一次进入页面的初始比例\nminimum-scale：允许缩小最小比例\nmaximum-scale：允许放大最大比例\nuser-scalable：允许使用者缩放，1 or 0 (yes or no)\n编译过程会转化成如下的语义：\n```css\n@viewport {\n    width: device-width;\n    initial-scale: 1.0\n}\n```\n * device-width ，主要是为了让整个页面宽度与手机可视宽度相同，这样就可以简单相容于不同机型屏幕大小，如果这边width沒有设定的话，就会依照html/css给予的width当作预设值。\n * 因为解析度不同，device-width有时候不一定是view width，所以在类似iphone 4高解析度机器上，device-width=320 ，可是实际解析度为480，这时候就需要利用javascript针对UA下去做动态调整。\n * user-scalable，这个属性可以让使用者能否放大、缩小页面，如果页面不允许手机使用者缩放，就直接设定0或者no，反之要启动缩放功能，就设置1或者是yes。\n * 接下来将说明几种常用的方式，以及具体例子提供给大家參考。\n如果在手机端我们希望网页呈现固定，不希望使用者随意缩放，直接设定如下\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n```\n如果希望在不同device使用不同缩放大小，就必须使用javascript，检测UA(User agent)，动态设定viewport，如下：\n```javascript\nviewport = document.querySelector(\"meta[name=viewport]\");\nviewport.setAttribute('content', 'width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;');\n```\n * Skill 3 不使用绝对宽度  \n由于网页会根据屏幕宽度调整布局，所以不能使用绝对宽度（margin-left:5px）的布局，也不能使用具有绝对宽度(例如：width：200px)的元素,而最好使用百分比宽度width:20%;或者with:auto;\nSkill 4 字体最好不要用绝对大小(px)，而使用相对大小(em)\n```css\nbody { font: normal 100% Helvetica, Arial, sans-serif; } \n```\n上面的代码指定，字体大小是页面默认大小的100%，即16像素。\n```css\nh1 { font-size: 1.5em; }  \n```\nh1的大小是默认大小的1.5倍，即24像素（24/16=1.5）\n```css\n.small { font-size: 0.875em; } \n```\nsmall元素的大小是默认大小的0.875倍，即14像素（14/16=0.875）\n\n * 这里顺便说说 px  pt em  rem区别：\n* px是pixel，像素，是屏幕上显示数据的最基本的点，在HTML中，默认的单位就是px；\n* pt是point，是印刷行业常用单位，等于1/72英寸。\n* em才是真正的“相对单位”（百分比嘛，当然是相对），而px和pt都是绝对单位（都有固定值）。所以，一般移动终端布局用em比较合适。\n* rem是css3的出现，同时引进新的单位,而rem是相对于根元素&lt;html&gt;，这样就意味着，我们只需要在根元素确定一个参考值，在根元素中设置多大的字体，这完全可以根据您自己的需要。\n\n * Skill 5 流动布局（fluid grid）  \n流动布局的含义是各个位置都是浮动的，不是固定不变的\n```css\n.main { float: right; width: 70%; } \n.leftBar { float: left; width: 25%; } \n```\nfloat的好处是，如果宽度太小，放不下两个元素，后面的元素会自动滚动到前面元素的下方，不会在水平方向overflow（溢出），避免了水平滚动条的出现。\n\n * Skill 6 图片的自动缩放，等比缩放\n```css\nimg{\n    max-width: 100%;\n }\n```\n要使图片按等比缩放，一般不需要规定图片高度。且最好不用background-image,因为这样不会按照等比缩放。\n\n\n",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-11-10T16:25:37+08:00",
				"created_by": "",
				"updated_at": "2015-11-10T16:44:10+08:00",
				"updated_by": "",
				"published_at": "2015-11-10T16:25:37+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqzx004aesu348so8eit",
				"title": "HTML5 Audio/Video 标签,属性,方法,事件汇总",
				"html": "\n#####&lt;audio&gt; 标签属性：\n\nsrc：音乐的URL\npreload：预加载\nautoplay：自动播放\nloop：循环播放\ncontrols：浏览器自带的控制条\n```html\n<audio id=\"media\" src=\"http://www.abc.com/test.mp3\" controls>\n<source src=\"http://www.abc.com/test.mp3\" type=\"audio/mp3\"></source>\n<source src=\"http://www.abc.com/test.ogg\" type=\"audio/ogg\"></source>\n</audio>\n```\n#####&lt;video&gt;标签属性：\n<!--more-->\nsrc：视频的URL\nposter：视频封面，没有播放时显示的图片\npreload：预加载\nautoplay：自动播放\nloop：循环播放\ncontrols：浏览器自带的控制条\nwidth：视频宽度\nheight：视频高度\n```html\n<video id=\"media\" src=\"http://www.abc.com/test.mp4\" controls width=\"400px\" heigt=\"400px\"></video>\n```\n获取HTMLVideoElement和HTMLAudioElement对象\n```javascript\n//audio可以直接通过new创建对象\nMedia = new Audio(\"http://www.abc.com/test.mp3\");\n//audio和video都可以通过标签获取对象\nMedia = document.getElementById(\"media\");\n```\n######Media方法和属性：\n\nHTMLVideoElement 和 HTMLAudioElement 均继承自 HTMLMediaElement\n```javscript\n//错误状态\nMedia.error;            //null:正常\nMedia.error.code;       //1.用户终止 2.网络错误 3.解码错误 4.URL无效\n\n//网络状态\nMedia.currentSrc;           //返回当前资源的URL\nMedia.src = value;          //返回或设置当前资源的URL\nMedia.canPlayType(type);    //是否能播放某种格式的资源\nMedia.networkState;         //0.此元素未初始化  1.正常但没有使用网络  2.正在下载数据  3.没有找到资源\nMedia.load();               //重新加载src指定的资源\nMedia.buffered;             //返回已缓冲区域，TimeRanges\nMedia.preload;              //none:不预载 metadata:预载资源信息 auto:\n\n//准备状态\nMedia.readyState;       //1:HAVE_NOTHING 2:HAVE_METADATA 3.HAVE_CURRENT_DATA 4.HAVE_FUTURE_DATA 5.HAVE_ENOUGH_DATA\nMedia.seeking;          //是否正在seeking\n\n//回放状态\nMedia.currentTime = value;          //当前播放的位置，赋值可改变位置\nMedia.startTime;                    //一般为0，如果为流媒体或者不从0开始的资源，则不为0\nMedia.duration;                     //当前资源长度 流返回无限\nMedia.paused;                       //是否暂停\nMedia.defaultPlaybackRate = value;  //默认的回放速度，可以设置\nMedia.playbackRate = value;         //当前播放速度，设置后马上改变\nMedia.played;                       //返回已经播放的区域，TimeRanges，关于此对象见下文\nMedia.seekable;                     //返回可以seek的区域 TimeRanges\nMedia.ended;                        //是否结束\nMedia.autoPlay;                     //是否自动播放\nMedia.loop;                         //是否循环播放\nMedia.play();                       //播放\nMedia.pause();                      //暂停\n\n//控制\nMedia.controls;         //是否有默认控制条\nMedia.volume = value;   //音量\nMedia.muted = value;    //静音\n\n//TimeRanges(区域)对象\nTimeRanges.length;              //区域段数\nTimeRanges.start(index)         //第index段区域的开始位置\nTimeRanges.end(index)           //第index段区域的结束位置\n事件：\n\neventTester = function(e){\n  Media.addEventListener(e,function(){\n   console.log((new Date()).getTime(),e);\n  });\n}\neventTester(\"loadstart\");       //客户端开始请求数据\neventTester(\"progress\");        //客户端正在请求数据\neventTester(\"suspend\");         //延迟下载\neventTester(\"abort\");           //客户端主动终止下载（不是因为错误引起），\neventTester(\"error\");           //请求数据时遇到错误\neventTester(\"stalled\");         //网速失速\neventTester(\"play\");            //play()和autoplay开始播放时触发\neventTester(\"pause\");           //pause()触发\neventTester(\"loadedmetadata\");  //成功获取资源长度\neventTester(\"loadeddata\");      //提示当前帧的数据是可用的\neventTester(\"waiting\");         //等待数据，并非错误\neventTester(\"playing\");         //开始回放\neventTester(\"canplay\");         //可以播放，但中途可能因为加载而暂停\neventTester(\"canplaythrough\");  //可以播放，歌曲全部加载完毕\neventTester(\"seeking\");         //寻找中\neventTester(\"seeked\");          //寻找完毕\neventTester(\"timeupdate\");      //播放时间改变\neventTester(\"ended\");           //播放结束\neventTester(\"ratechange\");      //播放速率改变\neventTester(\"durationchange\");  //资源长度改变\neventTester(\"volumechange\");    //音量改变\n```\n",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-11-11T13:19:42+08:00",
				"created_by": "",
				"updated_at": "2015-11-11T13:25:06+08:00",
				"updated_by": "",
				"published_at": "2015-11-11T13:19:42+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqzu0046esu39wsb0489",
				"title": "利用canvas 导出图片",
				"html": "\n######1、使用canvas绘制图片，并将图片导出。\n在本地直接访问静态网页时，无法使用toDataURL（），需要将网页发布后，canvas才能使用toDataURL获取画布上的内容。因为canvas不允许使用toDataURL来获取异域图片\n![](http://images0.cnblogs.com/blog2015/604652/201505/242125195234527.png)\n原因：将不同域下图片绘制到canvas上时，不能使用toDataURL来获取imgdata，因为 canvas 使用了没有权限的跨域图片在使用canvas.toDataURL()等数据导出函数的时候会报错！ img.crossOrigin = \"Anonymous\" ，它开启了本地的跨域允许。当然服务器存储那边也要开放相应的权限才行，如果是设置了防盗链的图片在服务端就没有相应的权限的话你本地端开启了权限也是没有用的。\n<!--more-->\n```javascript\nfunction downloadImg(){\n       var a = document.createElement('a');\n       a.href = canvas.toDataURL('image/png'); //下载图片\n       a.download = '未命名.png'; console.log(a);\n       a.click();\n   } \n    function drawImg(ctx){\n        var img2 = new Image();\n        img2.setAttribute('crossOrigin','anonymous');\n        img2.src = 'img/1.png';\n        img2.onload = function (){\n            ctx.drawImage(this,0,0);\n           \n        }\n    }\n```\n绘制跨域图片：\n\n创建一张图片，设置其跨域属性crossOrigin,将这个临时图片绘制到canvas上\n```javascript\nfor(var i=0,len=dyns.length;i<len;i++){\n    var dynDiv = dyns[i].getLayerContainer();\n    var dynimg = dynDiv.getElementsByTagName('img')[0];\n    //dynimg.setAttribute('crossOrigin', 'anonymous');\n    //ctx.drawImage(dynimg,0,0,canvas.width,canvas.height); \n    // canvas.toDataURL();  //出错 直接绘制不同域下的图片，无法通过toDataURL获取图片信息\n\n    // 重新创建一张图片，设置其跨域属性crossOrigin,将这个临时图片绘制到canvas上，则可以使用toDataURL方法获取其图片内容数据，在生成图片\n    var img = new Image();\n    img.setAttribute('crossOrigin','anonymous');\n    img.src = dynimg.src; \n    img.onload =function (){\n        ctx.drawImage(this,0,0,canvas.width,canvas.height);\n        canvas.toDataURL();  //成功获取\n    };                \n}\n```",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-11-23T15:05:39+08:00",
				"created_by": "",
				"updated_at": "2015-11-23T15:08:17+08:00",
				"updated_by": "",
				"published_at": "2015-11-23T15:05:39+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqzs0043esu31ory5xd4",
				"title": "关于缓存问题：js清除缓存",
				"html": "\ncss并行加载，js串行加载（会阻塞页面）\n\n清除缓存的问题:1、一般手动清除，浏览器缓存  2、js代码清除缓存\n\njs文件:  路径后面加一个随机数如下：\n```javascript\n<script src=\"lib/gMarker.js?random=120211\"></script>\n```\n css文件\n```html\n <link rel='stylesheet' href='css/index.css?t=120224'>\n```\n<!--more-->\n加一个标识 强制浏览器重新加载此文件\n\n图片文件： \n```css\nbackground:url(**.png?20150421) \n```\n加一个标识号，使图片不被缓存",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-11-23T15:09:07+08:00",
				"created_by": "",
				"updated_at": "2015-11-23T15:10:30+08:00",
				"updated_by": "",
				"published_at": "2015-11-23T15:09:07+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawr03004kesu3betj2wkj",
				"title": "Hello World",
				"html": "Welcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\n<!--more-->\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-12-08T10:12:56+08:00",
				"created_by": "",
				"updated_at": "2020-07-13T12:10:03+08:00",
				"updated_by": "",
				"published_at": "2015-12-08T10:12:56+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawr6h009resu31acmfayo",
				"title": "标签",
				"html": "",
				"featured": 0,
				"page": 1,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-12-15T14:32:03+08:00",
				"created_by": "",
				"updated_at": "2019-08-24T12:24:47+08:00",
				"updated_by": "",
				"published_at": "2015-12-15T14:32:03+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawr5z009iesu3f54tggyv",
				"title": "分类",
				"html": "",
				"featured": 0,
				"page": 1,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-12-15T14:32:49+08:00",
				"created_by": "",
				"updated_at": "2019-08-24T12:24:17+08:00",
				"updated_by": "",
				"published_at": "2015-12-15T14:32:49+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawr68009kesu3eaebbd0v",
				"title": "关于",
				"html": "### 个人信息\nMy Name is Sterne Lee,the computer enthusiasts.\n李兴广 1991年4月出生，男（未婚），前端技术爱好者。 我是中国共产党员，户籍是广西省玉林，汉族，身高166， 邮箱：sternelee@gmail.com。\n\n本人是广西师范学院数学科学学院信息与计算科学2010届学生。\n<!--more-->\n### 大学经验\n2011年12月 全国计算机应用技能大赛Flash设计 三等奖 \n2011年6月 全国计算机二级 计算机 \n2013年5月 大学英语四级 外语\n\n2012年2月至2013年1月：六回科技团队 \n这是一个自主创业的学生团队，在校园内导购电脑及配件外，并开展一系列电脑培训工作，软硬件教学都给更多的同学带来帮助！\n\n2013年4月至2013年10月：北部湾东盟经济网络中心 \n网站开发，Flash设计，平面设计，负责整个单位的计算机工作，包括网站管理维护，电脑日常维护与工作技术支持。\n\n### 北漂\n2014年开始突然就决定了北漂生活。\n\n2014年2月至2014年5月：广易轩（北京）文化发展有限公司 \n网站开发，平面策划，负责整个单位的计算机工作，网络管理维护，拍照摄影与图片处理，产品设计。\n\n回校回成毕业设计与论文。\n\n2014年6月至2014年10月：中经现代企业咨询有限公司\n技术总监，负责网站页面制作，开始移动端页面设计与开发，利用移动端框架完成小型广告宣传页面。\n\n2014年11月至今：新浪\n主要PC与移动端页面制作，以及H5制作。\n\n### 学习历程\n- Office （熟练）使用时间（三年以上，在用） \n- Flash （良好）使用时间（两年以上） \n- PHP （良好）使用时间（两年以上） \n- C++ （一般）使用时间（1年以上） \n- Photoshop （熟练）使用时间（两年以上，在用） \n- JavaScript （一般）使用时间（两年以上，在用） \n- Linux （一般）使用时间（两年年以上，在用）\n- Node前端 （一般） 在用\n\n由于在校参与活动太多，成绩虽一般，但学习能力很强。六回科技校园创业团队、 乐邮邮校园快递、南宁东盟会展中心好友缘国际酒店服务员、 南宁华南城东盟志愿者、南宁家教老师、电子科技广场电脑导购校园兼职、长岗校区机房管理员、明秀校区机房设备学生总管、院内网络部副部长、院内网络工作站副站长、学习委员、副班长、副院长助理等，这些都给我极大的经验与锻炼。\n\n目前在新浪学习各种前端技术，包括[RequireJS](http://requirejs.org/), [NodeJS](https://nodejs.org/), Canvas, [Gulp](http://www.gulpjs.com.cn/), [Webpack](http://www.gulpjs.com.cn/), [ReactJS](https://facebook.github.io/react/)等,\n主要通过网络自学（github,segmentfault等），还有kindle看书学习。\n\n*[新浪经验](/2016/04/07/sina-tasks/)*",
				"featured": 0,
				"page": 1,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-12-15T14:42:20+08:00",
				"created_by": "",
				"updated_at": "2019-08-24T12:24:28+08:00",
				"updated_by": "",
				"published_at": "2015-12-15T14:42:20+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawr02004hesu3czig33f3",
				"title": "npm国内被墙的解决方法",
				"html": "\n上网四处搜索，发现有一个cnpm的方法似乎可以解决问题，但是发现cnpm上镜像好像并不齐全，而且也是各种卡住，所以这种方式也只能放弃 ，于是搜到了一篇npm使用代理的文章，顿时醒悟。\n首先，我们的npm包无所谓安全性，所以不要使用性能和效率更慢的https，转而使用http，相关命令如下：\n1、关闭npm的https\n```bash\nnpm config set strict-ssl false\n```\n<!--more-->\n2、设置npm的获取地址\n```bash\nnpm config set registry \"http://registry.npmjs.org/\"\n```\n\n一般这样运气的好的话，速度就会快许多，可能会安装成功。如果你还脸黑，这样设置还是一直卡住无法下载依赖，那就只能使用proxy代理方式来解决了，命令如下：\n3、设置npm获取的代理服务器地址：\n```bash\nnpm config set proxy=http://代理服务器ip:代理服务器端口\n```\n\n希望本文能让一直无法正常下载npm而抓狂的同学有所帮助。\n\n清除npm的代理命令如下：\n\n```bash\nnpm config delete http-proxy\nnpm config delete https-proxy\n```\n\n最终发现cnpm其实是这么用的，我太傻了，还是cnpm靠谱\n```bash\nnpm install -g cnpm --registry=http://r.cnpmjs.org\n\nnpm install microtime --registry=http://r.cnpmjs.org --disturl=http://dist.cnpmjs.org\n```",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-12-16T11:54:36+08:00",
				"created_by": "",
				"updated_at": "2015-12-16T11:58:00+08:00",
				"updated_by": "",
				"published_at": "2015-12-16T11:54:36+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawr06004oesu3gpnhh480",
				"title": "搭建Hexo博客并部署到Github",
				"html": "搭建Hexo博客并部署到Github的小细节\n\n## git SSH-key\n\n### 在本地添加ssh-key的过程中，最好是直接回车使用默认的配置\n\n比如在passphrase时应直接回车，不然会生成SHA:256的key而还需要相关的转化\n\n然后添加到github的ssh-key表单进行登记\n\n<!--more-->\n\n## hexo 配置\n\n### 在_config.yml文件里面的repo里，在windows下最好用https而不要用ssh链接\n\n## hexo命令\n\n### 更新博客时要求按照下列步骤进行\n\n```bash\nhexo clean\nhexo generate\nhexo deploy\n```\n\n\n[详细操作可参考博客园文章](http://www.cnblogs.com/zhcncn/p/4097881.html)\n\n\n\n\n\n",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2015-12-16T16:16:56+08:00",
				"created_by": "",
				"updated_at": "2020-07-13T12:10:03+08:00",
				"updated_by": "",
				"published_at": "2015-12-16T16:16:56+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawr0j0055esu39q1f22wo",
				"title": "reactjs学习体验",
				"html": "reactjs 是什么？\n--------------\n\nreactjs是来自facebook公司的用于构建用户界面的JavaScript库。\n\nGitHub地址：https://github.com/facebook/react\n\nreactjs的两个衍生项目也值得注意。\n---------------------\n\n* react-native:用reactjs写手机app \n\nGitHub地址：https://github.com/facebook/react-native\n\n* react-canvas:用canvas代替臃肿缓慢的DOM作为UI，在移动端获得能与原生应用媲美的流畅效果\n<!--more-->\nGitHub地址：https://github.com/Flipboard/react-canvas \n\nreactjs 真的将html/xml和js代码混杂在一起吗？\n------------------------------------------\nreactjs的jsx语法，让许多人感觉仿佛回到了原始社会。这么多年努力地让html\\css\\javascript三者分离，好不容易走到今天，reactjs却走回老路，让人难以接受。我也几次三番因为jsx而放弃了解reactjs。\n\n目前体验下来，发觉那是误解。\n\nreactjs比其他前端模板引擎更彻底的分离html与javascript。前端模板引擎，绝大多数基于html字符串；而reactjs不是。能接受前端模板引擎的人，也能接受jsx。\n\njsx的实质是：用xml的语法写函数调用。它没有拼接html字符串，也不要求一定要使用jsx，手写函数调用，也是可以的。\n\n在原生DOM中，用js构造dom的方式是这样的：\n\n```javascript\n//要构造的dom：\n<a class=\"link\" href=\"https://github.com/facebook/react\">React<a>\nvar a = document.createElement('a')\na.setAttribute('class', 'link')\na.setAttribute('href', 'https://github.com/facebook/react')\na.appendChild(document.createTextNode('React'))\n```\n如你所见，它颇为繁琐，我们可以封装一下：\n```javascript\n//第一个参数为node名\n//第二个参数为一个对象，dom属性与事件都以键值对的形式书写\n//第三个到第n个为子node，它们将按参数顺序出现，\n//在这个例子中只有一个子元素，而且也是文本元素，所以可以直接书写，否则还得React.createElement一下\nvar a = React.createElement('a', {\n    className: 'link',\n    href: 'https://github.com/facebook/react'\n}, 'React')\n```\n如上，从html语法到js构造dom，再到React.createElement的封装。\n\n现在有个编译工具，可以让你用html语法来写React.createElement，部署上线前编译回来。你愿意吗？\n\n不管你的答案是什么，但这就是jsx的一半真相。\n\n正是由于jsx不是html字符串，所以有如下特点：\n* html的class与for属性在js里是保留字，所以jsx里要用别名className与htmlFor\n* 不能像下面那样操作html的checked属性\n\n```javascript\n//在其他前端模板引擎中，可以这么做，因为是拼接字符串\nvar checkbox = <input type=\"checkbox\" {this.props.selected ? 'checked' : ''} />\n\n//但在jsx中，这是错误的，因为无法构成键值对，一定要有个key=value的格式，所以得这样\nvar checkbox = <input className=\"class是js的保留字\" type=\"checkbox\" checked={this.props.selected} />\n\n//编译后：\nvar checkbox = React.createElement('input', {\n    type: 'checkbox',\n    className: 'class是js的保留字',\n    checked: this.props.selected\n})\n```\n* 不能直接写并列的元素\n```javascript\n//这样写是错误的\nvar MyComponent = React.createClass({\n    render: function() {\n        return <div>first div</div><div>second div</div>\n    }\n})\n//因为编译后，return 两个函数调用，就算不报错，也只调用第一个函数，不合意图\nvar MyComponent = React.createClass({\n    render: function() {\n        return React.createElement('div', null, 'first div') React.createElement('div', null, 'second div')\n    }\n})\n\n//所以有时难免要增加dom层级\nvar MyComponent = React.createClass({\n    render: function() {\n        return (\n            <div>\n                <div>first div</div>\n                <div>second div</div>\n            </div>\n        )\n    }\n})\n\n//编译后,合乎语法和编程意图了\nvar MyComponent = React.createClass({\n    render: function() {\n        return React.createElement('div', null, \n            React.createElement('div', null, 'first div'),\n            React.createElement('div', null, 'second div'))\n    }\n})\n```\n* jsx要求标签一定要闭合，html5中不强制要求闭合的，在jsx也都要闭合，以便识别\n* 封装的组件要用大写字母开头，以便跟html标签区分。\n```javascript\n//不合规则\n<tap />\n//合乎规则\n<Tap />\n```\nreactjs与web component\n--------------------\nweb component是下一代的前端标准，提供了shadow dom、templete元素、Imports与自定义元素的功能。其中自定义元素提供了生命周期回调函数:\n* createdCallback: 创建时调用\n* attachedCallback: 添加到dom树时调用\n* detachedCallback: 从dom树衣橱时调用\n* attributeChangedCallback：属性改变时调用\n\n在reactjs中也有相似但更丰富的生命周期方法：\n* componentWillMount: 初始化渲染前调用\n* componentDidMount: 初始化渲染后调用\n* componentWillReceiveProps： 接受新props时调用\n* shouldComponentUpdate：接受新props或state时调用，返回值true/false决定是否更新视图\n* componentWillUpdate: 在接收到新的 props 或者 state 之前立刻调用。在初始化渲染的时候该方法不会被调用\n* componentDidUpdate：在组件的更新已经同步到 DOM 中之后立刻被调用\n* componentWillUnmount: 在组件从 DOM 中移除的时候立刻被调用\n\nreactjs与web component的关系，在我个人看来：reactjs是纯js实现的一种component标准，它可以与DOM无关，甚至与Web无关。    \n\n在reactjs中注册组件像这样：\n```javascript\n//reactjs跟objective-c在方法命名上有些相似，使劲儿用全称，与传统js编程的缩写习惯相悖\nvar MyComponent = React.createClass({\n    //每个组件必须有render方法\n    render: function() {\n        return <div className={this.props.className}>\n            //jsx遇大括号就当作js表达式来看待\n            //map返回的数组会自动展开\n            {\n                this.props.textList.map(function(text) {\n                    return <p>text</p>\n                })\n            }\n            </div>\n    }\n})\n\n//像这样使用\nvar TestComponent = React.createClass({\n    render: function() {\n        return (\n            <div>\n                <MyComponent className=\"组件内部的this.props.className来自它被调用时传递的参数，就是我啦\" textList={['组件的this.props.textList', '就是我啦', '用花括号包裹', '以便让jsx将我作为数组直接量的表达式来看待']} />\n            </div>\n        )\n    }\n})\n\n//这里才是插入dom，用React.render方法\n//第一个参数为React组件，第二个参数为DOM\nReact.render(\n    <TestComponent />,\n    document.body\n)\n```\n\n总的来说，reactjs允许我们用React.createClass来拓展React.createElement的参数范畴。\n- 默认情况下，它接受原生html标签，所以web Component普及后，reactjs也不会被淘汰，无非是多了一些html标签罢了\n- React.createClass方法，可以提供新的html标签给React.createElement，创造了封装复杂dom结构、组件化的空间\n\nreactjs 的虚拟dom\n----------------\n之前说了jsx的一半真相，另一半是，React.createElement并没有直接了当的用js构造dom，它构造了一种数据结构。\n\n使用reactjs时，表面上我们在操作dom，其实是操作数据，reactjs通过自己的dom diff算法，对比前后的数据，找到diff差异点，按最小粒度更新视图。\n\n正因如此，reactjs的UI层才是可替换的，构造另一套从数据到视图的映射逻辑，就能应用在canvas乃至手机原生UI上。\n\nreactjs 的单向数据流\n--------------------\nreactjs组件内部的this.props对象，是组件实例的父级组件提供的，提供方式就像写html属性一样。\n\n如此，父级复父级，数据可以从最顶层的组件实例，层层传递到最底层的组件中去，然而反过来却不行，这就是单向数据流的意思。\n```javascript\n//最底层的todo\nvar Todo = React.createClass({\n    render: function() {\n        return (\n            //只有html属性和data-*以及aria-*才会显示在dom中，其余的key或其他，是扩展性质的，便于向下级组件传递数据\n            <li title={this.props.time} key={this.props.id}>\n                <input type=\"checkbox\" checked={this.props.completed} />\n                <label>{this.props.title}</label>\n            </li>\n            )\n    }\n})\n//todo的父级组件\nvar TodoList = React.createClass({\n    render: function() {\n        return ({\n            <ul>{\n                this.props.todos.map(function(todo) {\n                    //形如ES6的属性展开式语法，等价于用key=value的形式一个个书写\n                    return <Todo {...todo} />\n                })\n            }</ul>\n        })\n    }\n})\n//todoList的父级组件\nvar TodoApp = React.createClass({\n    render: function() {\n        return (\n            <TodoList todos={this.props.todos} />\n        )\n    }\n})\n\n//模拟的todos数据\nvar data = [{\n    id: new Date().getTime(),\n    time: new Date().toLocaleString(),\n    title: '第一个待办事项',\n    completed: false\n}, {\n    id: new Date().getTime(),\n    time: new Date().toLocaleString(),\n    title: '第二个待办事项',\n    completed: true\n}]\n\n//渲染TodoApp组件到#todo-app，数据从TodoApp传递到TodoList,从TodoList传递到Todo,在Todo中展开为一种DOM结构并注入数据，展示在前端页面中\nReact.render(\n    <TodoApp todos={data} />,\n    document.getElementById('todo-app')\n)\n```\n\n结语\n----------------\nreactjs是有趣且富有生命力与表现力的javascript库，有其适用的场景，也有许多需要注意的事项与容易踩到的坑。\n\n总体而言，学会它不会让人后悔（想想那些学angular1的同学吧）。\n\n在此，可以去[TodoMVC](http://todomvc.com/) 下载react制作的mvc项目来参考学习[React-TodoMVC](http://todomvc.com/)\n",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2016-01-15T11:46:56+08:00",
				"created_by": "",
				"updated_at": "2019-04-20T18:16:27+08:00",
				"updated_by": "",
				"published_at": "2016-01-15T11:46:56+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawr0f0051esu3feiod2ck",
				"title": "用Canvas来实时处理Video",
				"html": "\n结合HTML5下的video和canvas的功能，你可以实时处理视频数据，如播放暂停等，解决各平台的H5播放视频的bug，并为正在播放的视频添加各种各样的视觉效果，以使用JavaScript代码实现chroma-keying特效（也被称为“绿色屏幕效应”）。\n#### canvas视频播放\n<!--more-->\n利用sublime text 快速新建html文件，结构代码如下\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <style>\n    body{background:black;color:#CCCCCC;}\n    div{float:left;border:1px solid #444444;padding:10px;margin:10px;background:#3B3B3B;}\n  </style>\n</head>\n<body onload=\"processor.doLoad()\">\n  <div style=\"display:none;\">\n    <video id=\"video\" src=\"video.ogv\" controls=\"true\"/>\n  </div>\n  <div>\n    <canvas id=\"c1\" width=\"160\" height=\"96\"/>\n  </div>\n</body>\n</html>\n```\n由于我们播放视频用canvas来展示，因此大可把video标签隐藏，直接display:none;然后在body的后面添加播放动作：\n```javascript\nvar btn = document.getElementById('c1');\nvar video = document.getElementById('video');\nbtn.addEventListener('click',function(){\n  if(video.paused){\n      video.play();\n    }\n  else{\n      video.pause();\n    }\n });\n```\ncanvas中可以用drawImage()来绘制图片，同样我们也可以用来绘制视频画面，监听video的play事件并且用setTimeout()来不断绘制视频画面。\n细节代码如下：\n```javascript\nvar processor = {\n      timerCallback: function() {\n        if (this.video.paused || this.video.ended) {\n          return;\n        }\n        this.computeFrame();\n        var self = this;\n        setTimeout(function () {\n            self.timerCallback();\n          }, 0);\n      },\n      doLoad: function() {\n        this.video = document.getElementById(\"video\");\n        this.c1 = document.getElementById(\"c1\");\n        this.ctx1 = this.c1.getContext(\"2d\");\n        var self = this;\n        this.video.addEventListener(\"play\", function() {\n            self.width = self.video.videoWidth / 2;\n            self.height = self.video.videoHeight / 2;\n            self.timerCallback();\n          }, false);\n      },\n      computeFrame: function() {\n        this.ctx1.drawImage(this.video, 0, 0, this.width, this.height);\n        return;\n      }\n    };\n```\n初步播放视频的效果如下：\n[点击查看效果](http://sterne.cn/examples/canvas-video-1.html)\n\n##### 初始化chroma-key\ndoLoad()方法在XHTML文档初始加载时调用。这个方法的作用是为chroma-key处理代码准备所需的变量，设置一个事件侦听器，当用户开始播放视频时我们能检测到。\n##### 视频监听\naddEventListener()监听video元素，当用户按下视频上的播放按钮时被调用。为了应对用户回放，这段代码获取视频的宽度和高度，并且减半（我们将在执行chroma-keying效果时将视频的大小减半），然后调用timerCallback()方法来启动视频捕捉和视觉效果计算。\n##### 定时回调\nsetTimeout()定时器回调函数在视频开始播放时被调用（当“播放”事件发生时），然后负责自身周期调用，为每一帧视频实现keying特效。\n\n##### 处理视频帧数据\n在canvas中，有两个图像数据处理函数getImageData()和putImageData()，获取与写入图像数据。因此，我们可以给canvas2添加一个背景，并将canvas1的图像数据处理后放入canvas2中，来实现图像叠加与色彩更换。\n\n注意图像数据的处理：\ncomputeFrame()方法，如下所示，实际上负责抓取每一帧的数据和执行chroma-keying特效。\n```javascript\n//ctx1 与ctx2分别为两个canvas在context\nvar frame = this.ctx1.getImageData(0, 0, this.width, this.height);\nvar l = frame.data.length / 4;\n\nfor (var i = 0; i < l; i++) {\n      var r = frame.data[i * 4 + 0];\n      var g = frame.data[i * 4 + 1];\n      var b = frame.data[i * 4 + 2];\n      if (g > 100 && r > 100 && b < 43)\n           frame.data[i * 4 + 3] = 0;\n      }\n      this.ctx2.putImageData(frame, 0, 0);\n}\n```\n通过调用第一个canvas上下文的getImageData()方法，来获取原始图像数据当前视频帧的一个副本。它提供了原始的32位像素图像数据，这样我们就能够进行操作。\n![原图像](http://7j1z9o.com1.z0.glb.clouddn.com/6941baebgw1evu0hgko9fj204g02oq2t.jpg)\n通过将帧图像数据的总长度除以4，来计算图像的总像素数。循环扫描所有像素，获取每个像素的红、绿、蓝值，同时和预定义的背景色进行比较，这些背景色将用foo.png中导入的背景图像替换。\n\n被检测成背景的每一个像素，将它的alpha值替换为零，表明该像素是完全透明的。结果，最终的图像背景部分是100%透明的，这样视频内容就叠加到静态背景上了。\n![转换后的图像](http://7j1z9o.com1.z0.glb.clouddn.com/6941baebgw1evu0hg71voj204h02oweg.jpg)\n\n利用这种方法，可以在纯色幕布中制作真人视频，然后更改背景！\n注意，要在服务器环境下使用！\n\n最终的效果如下：[点击查看效果](http://sterne.cn/examples/canvas-video-2.html)\n\n\n\n",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2016-01-27T13:10:17+08:00",
				"created_by": "",
				"updated_at": "2016-01-27T14:07:12+08:00",
				"updated_by": "",
				"published_at": "2016-01-27T13:10:17+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawr0l0058esu36rag20wh",
				"title": "pageSwitch使用与修改",
				"html": "\npageSwitch 简介\n--------------\n\npageSwitch适用场景为全屏切换，即一切一屏，移动与web端单页切换，制作翻页H5等等，并且在此基础上实现了超过一百种切换效果。\n\nGitHub地址：https://github.com/qiqiboy/pageSwitch\n\npageSwitch修改\n---------------------\n\n由于原作者版本没有区别当前页面的标签，\n<!--more-->\n因此在原基本上修改了firePlay函数，大约在840行左右。原firePlay函数\n\n```javascript\nfirePlay:function(){\n    var self=this;\n        if(this.playing){\n            this.playTimer=setTimeout(function(){\n                self.slide((self.current+1)%(self.loop?Infinity:self.length));\n                },this.interval);\n            }\n        return this;\n    }\n```\n在此基本上，为了让当前显示页面添加标识，为便当前操作，内容动画更改等提供接口，修改如下\n```javascript\nfirePlay:function(){\n        var self=this;\n        each(self.pages,function(page){\n            var pcn=page.className.replace(/\\s+current/g,\"\");\n            page.className=pcn;\n        });\n        self.pages[self.current].className +=' current';\n        if(this.playing){\n            this.playTimer=setTimeout(function(){\n                self.slide((self.current+1)%(self.loop?Infinity:self.length));\n            },this.interval);\n        }\n        return this;\n    }\n```\n\n也就在给予当前显示页面加上class=current，这样更方便页面内元素与动画的操作与实现。\n",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2016-02-22T18:08:23+08:00",
				"created_by": "",
				"updated_at": "2020-07-13T12:10:03+08:00",
				"updated_by": "",
				"published_at": "2016-02-22T18:08:23+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawr0a004vesu3beo17khq",
				"title": "【转载】Web Animation API从入门到上座",
				"html": "\n#### 远观：认识WAAPI\n***\n当我们谈及网页动画时，自然联想到的是CSS3动画、JS动画、SVG动画、APNG动画等技术以及jQuery.animate()等动画封装库，根据实际动画内容设计去选择不同的实现方式。然而，每个现行的动画技术都存在一定的缺点，如CSS3动画必须通过JS去获取动态改变的值，setInterval的时间往往是不精确的而且还会卡顿，APNG动画会带来文件体积较大的困扰，引入额外的动画封装库也并非对性能敏感的业务适用。目前情形对开发者而言，鱼和熊掌似乎不可兼得，既希望获得更强大便捷的动画控制能力，又希望性能和体验上足够流畅优雅，如果能有一种浏览器原生支持的通用的动画解决方案，那将是极好极好的呢。\n<!--more-->\nW3C提出Web Animation API（简称WAAPI）正缘于此，它致力于集合CSS3动画的性能、JavaScript的灵活、动画库的丰富等各家所长，将尽可能多的动画控制由原生浏览器实现，并添加许多CSS不具备的变量、控制以及或调的选项。看起来一切都很棒，是不是以后我们在动画技术选型上可以一招鲜吃遍天了呢？接下来请跟我一起敲开Web Animation API的奇妙之门。\n\n#### 入门：从实例开始\n***\nWAAPI核心在于提供了\n```javascrippt\nElement.animate()\n```\n方法，下面看个最简单的例子：\n```javascript\ndocument.body.animate(\n    [{'background': 'red'}, {'background': 'green'}, {'background': 'blue'}]\n    , 3000);\n```\n使用Chrome 39以上的浏览器运行一下，页面背景色进行了红绿蓝的依次过渡，3s后结束。我们当然是不会满足于这么简单的控制参数，继续看下个例子：\n```javascript\nvar dot = document.querySelector('.dot');\n  var frames = [\n    {transform: 'rotate(0deg) translate(80px)'},\n    {transform: 'rotate(360deg) translate(80px) '},\n  ];\n  var timing = {\n    duration: 2500,         //ms\n    delay: 0,               //ms\n    iterations: Infinity,   //1, 2, 3 ... Infinity\n    direction: 'alternate', //'normal', 'reverse'等\n    easing: 'ease-in-out',  //'linear', 'ease-in'等\n    fill: 'forwards',       //'backwards', 'both', 'none', 'auto'\n  };\n  dot.animate(frames, timing);\n```\n可以看到DOM节点具备全新的**animate**方法，第一个参数是关键帧数组**frames[]**，对应CSS3中的**@keyframes**，每一帧的描述与CSS3极其类似；第二个参数是时间控制**timing**，包括有**duration**持续时间、**iterations**执行次数、**direction**动画方向、**easing**缓动函数等属性。是不是很像CSS3的语法，以上**timing**参数等同于：\n```css3\n.dot {\n  animation: frames 2500ms ease-in-out 0ms infinite alternate forwards;\n}\n```\n效果如下所示：\n![效果图1](http://cdn2.w3cplus.com/cdn/farfuture/dsOki-8akuAh6aMvaGGTKYgx4SEwmSgNR4-5UGP1Or0/mtime:1455634587/sites/default/files/blogs/2016/1602/demo1.gif)\n#### 进院：细数WAAPI众妙\n***\n##### 动画回调与动画状态\n在最初的例子中，我们可以定义一个对象来接收**Element.animate()**的返回值，如：\n```javascript\nvar player = document.body.animate(/* ... */);\n```\n**player**即成为该动画返回的一个“动画播放器”对象，同时动画开始播放。我们需要了解动画当前的状态，可以通过该对象的只读属性**playState**来获得：\n```javascript\nconsole.log(player.playState); //\"running\",\"paused\",\"finished\"...\n```\n播放器共有五种状态，除了代码中注释的三种基本状态，还包括\"idle\"表示恢复到初始状态，\"pending\"表示播放或者暂停即将发生时。\n\n播放器可以通过四种方法可以改变动画当前的状态。\n```javascript\nplayer.pause(); //\"paused\"\nplayer.play();  //\"running\"\nplayer.cancel(); //\"idle\"\nplayer.finish(); //\"finished\"\n```\n与CSS3动画类似，**player**可以为动画自然结束或者手动结束时指定一个**onfinish**函数。\n```javascript\nplayer.onfinish = function(e) {\n    // ...\n}\n```\n请注意，设置播放次数**Infinity**的动画没有自然结束的时机去调用**onfinish**函数。\n##### 时间控制与时间轴\n播放器**player**具有一个读写属性**playbackRate**，用于控制动画的播放速度。\n```javascript\nvar player = element.animate(/* ... */);\nconsole.log(player.playbackRate); //1\nplayer.playbackRate = 2; \n```\nplaybackRate默认值为1，可以通过设置更大的整数使得动画加速，也可以通过设置大于零的小数来使得动画减缓播放速度。\n\n**player**还具有两个与时间相关的读写属性**currentTime**和**startTime**。前者返回动画当前过去的毫秒数，它的最大值是**timing**参数设置的**delay+(duration*iterations)**，而设置**Infinity**的动画没有**currentTime**的最大值。\n\n当设置了**playbackRate**时，动画的**currentTime**并不会发生变化，真正变化的是时间轴，播放速度改变使得时间轴被相应拉伸或者压缩。\n\n播放器可以调用**reverse()**倒叙播放动画，由时间轴的终点走向起点，动画结束时**currentTime**的值回到0。\n```javascript\nplayer.onfinish = function() {\n    player.reverse();\n}\n```\n###### 多个动画\nCSS3动画是可以同时指定多个keyframes动画到一个DOM节点上，WAAPI同样具备应用多个动画的能力。在一个元素上多次调用animate方法，即实现了一个元素多个动画：\n```javascript\nvar animated = document.getElementById('toAnimate');\nvar pulseKeyframes, activateKeyframes, haveFunKeyframes;\nvar pulse = animated.animate(pulseKeyframes, 1000); \nvar activate = animated.animate(activateKeyframes, 3000);\nvar haveFunWithIt = animated.animate(haveFunKeyframes, 2500);\n```\n每个子动画也拥有独立的**timing**参数，以及独立的动画状态（播放、停止、完成、取消）和独立的时间轴（启动时间、播放速度和结束时间），方便动画进行细节控制。\n##### 更高级的接口\nWAAPI还拥有**timeline**属性，对动画进行分组和排序的能力，以及沿自定义路径移动（再也不是SVG的天下了）的能力，光这一点就足够令人激动不已，然而篇幅有限于是下回再表。\n#### 登堂：官方案例\n***\n[Codelabs](https://github.com/web-animations/web-animations-codelabs) 越来越多基于WAAPI的Codelabs实例涌现，这些实例非常适合初接触WAAPI的同学作为开始的[范例](https://github.com/web-animations/web-animations-codelabs)。\n![图例2](http://cdn1.w3cplus.com/cdn/farfuture/fy-SWNAXsFt-byMQkld5kIXhNn7GEeJHw7K8gfgx4OA/mtime:1455634593/sites/default/files/blogs/2016/1602/preview.gif)\n![图例3](http://cdn.w3cplus.com/cdn/farfuture/10FuXl47mkYFhds2Ht4LSJLeFAC-zIm4heeNHngcYqA/mtime:1455634589/sites/default/files/blogs/2016/1602/demo22.gif)\n[Google’s demos](http://web-animations.github.io/web-animations-demos) 如果你希望用WAAPI挑战更炫酷的动画，特别是遵循Material Design风格的动画效果，这将是不错的灵感来源。\n![图例4](http://cdn.w3cplus.com/cdn/farfuture/D6WJQ6cOuVFukfWGwdeSsao4-3Onuer65CHDkS7a3pA/mtime:1455634589/sites/default/files/blogs/2016/1602/demo2.gif)\n#### 上座：移动端运行\n***\n看到这里，相信你已经不只一次体验到WAAPI带来的惊喜。作为一名彻头彻尾的移动端H5开发，我当然也想把WAAPI应用到移动业务上去服务用户…什么？手机上怎么没效果！\n![图例5](http://sterne.qiniudn.com/image/b/e9/51b3ea5c99dfb7df407bec295ec6c.png)\n为了在现代浏览器厂商还没完全跟进到位的时候抢先用上WAAPI，我们可以选择引入针对Web Animation API的[Polyfill](https://github.com/web-animations/web-animations-js)库，从而在IE/Firefox/Safari等浏览器上体验到WAAPI的精彩。\n```html5\n<script src=\"https://cdn.jsdelivr.net/web-animations/latest/web-animations.min.js\"></script>\n<script>\n  document.body.animate([\n    {'background': 'red'},\n    {'background': 'green'}\n  ], 1000);\n</script>\n```\n移动端浏览器，Android 5.0以上的Android Browser和Chrome for Android本身就已经支持WAAPI了，加上Polyfill之后，iOS的Safari也支持了。别忘了，还有我大手Q的X5内核浏览器。\n\n至此，小伙伴们终于露出欣慰的笑容。敬请期待下篇《Web Animation API 从上座到书墨》。\n#### 品茗：参考文献\n***\n* [W3C Spec](https://w3c.github.io/web-animations/)\n* [《Let’s talk about the Web Animations API》](http://danielcwilson.com/blog/2015/07/animations-intro)\n* [Google's Demo](http://web-animations.github.io/web-animations-demos)\n* [codelabs](https://github.com/web-animations/web-animations-codelabs)\n* [Polyfill](https://github.com/web-animations/web-animations-js)\n* [Resources](https://developers.google.com/web/updates/2015/10/web-animations-resources)\n\n> 本文转载自AlloyTeam：[http://www.alloyteam.com/2015/12/web-animation-api-from-entry-to-the-top。](http://www.alloyteam.com/2015/12/web-animation-api-from-entry-to-the-top。)",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2016-02-26T10:26:21+08:00",
				"created_by": "",
				"updated_at": "2016-02-26T11:48:01+08:00",
				"updated_by": "",
				"published_at": "2016-02-26T10:26:21+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawr6b009nesu33ig59tcf",
				"title": "sina idea新浪项目记",
				"html": "\n自驾游第四期",
				"featured": 0,
				"page": 1,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2016-03-03T10:19:43+08:00",
				"created_by": "",
				"updated_at": "2016-03-03T10:22:38+08:00",
				"updated_by": "",
				"published_at": "2016-03-03T10:19:43+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawr08004resu3h0gqfqza",
				"title": "RequireJS定义新模块blob",
				"html": "\nRequireJS是一个非常小巧的JavaScript模块载入框架，目标为实现浏览器端的模块化开发。\n##### Require使用入门\n在[RequireJS](http://www.requirejs.cn/)中下载最新版require.js文件，在index.html中加载\n<!--more-->\n```html5\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Require Blob</title>\n\t<script src=\"require.js\" data-main=\"main\"></script>\n</head>\n<body>\n<img src=\"blob.jpg\" alt=\"\" >\n</body>\n</html>\n```\n其中，data-main所指向的为函数代码入口，即是main.js\n```javascript\nrequire.config({\n\tpaths: {\n\t\tjquery:'jquery.min'\n\t}\n});\n```\n详细配置请看官方文档\n\n##### define模块定义\n在RequireJS中，require()是用来加载和使用模块，define()是用来定义新模块(注册为requirejs中模块)，define(\"\",[], function(){})中第一个参数是定义模块的名字，第二个参数是依赖的名称数组，第三个参数是函数，在模块的所有依赖加载完毕后，该函数会被调用来定义该模块。依赖关系会以参数的形式注入到该函数上，参数列表与依赖名称列表一一对应。    \n一个简单的例子:\n```javascript\ndefine('app',['jquery'],function($){\n\treturn {\n\t\tlog: function(msg){\n\t\t\tif(window.console && console.log){\n\t\t\t\tconsole.log(msg);\n\t\t\t}else{\n\t\t\t\talert(msg);\n\t\t\t}\n\t\t},\n\t\thello: function(){\n\t\t\tthis.log(\"hello, I'm powered by jquery\"+$().jquery+\"!\");\n\t\t}\n\t};\n});\n```\n然后在使用该模块:\n```javascript\nrequire(['app'],function(sub){\n\tsub.hello();\n});\n```\n我们可以看到，新模块以及在定义是依赖了jQuery，在使用中已经实现了jQuery模块的依赖并实现了新模块的操作。\n##### 定义blob模块\n[详细blob的介绍](http://www.zhangxinxu.com/study/201310/blob-get-image-show.html)在此不再重复，以下直接上代码:\n```javascript\ndefine(\"blob\",[],function(){\n\tvar t = function(e){\n        var that = e;\n        window.URL = window.URL || window.webkitURL;\n        if(typeof history.pushState == \"function\"){\n            var xhr = new XMLHttpRequest();\n            xhr.open(\"get\",that.src,true);\n            xhr.responseType=\"blob\";\n            xhr.onload=function(){\n                if(this.status == 200){\n                    var blob = this.response;\n                    that.src = window.URL.createObjectURL(blob);\n                }\n            }\n            xhr.send();\n        }else{\n            console.log(\"不支持blob,请更新浏览器哈\");\n        }\n    };\n\treturn t\n});\nrequire([\"jquery\",\"blob\"],function($,blob){\n\t$(document).ready(function(){\n\t\tblob($(\"img\")[0]);\n\t});\n});\n```\n此模块的功能是将页面图片的src链接转化成blob对象链接，define用返回一个函数对象来实现require中依赖的实例化。    \n\n注意：blob是属于XMLHttpRequest()返回的对象，因此需要在服务器中运行才能获取得对象链接。\n\n",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2016-03-04T13:53:51+08:00",
				"created_by": "",
				"updated_at": "2016-03-10T13:13:21+08:00",
				"updated_by": "",
				"published_at": "2016-03-04T13:53:51+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawr0c004yesu31jt7fpc2",
				"title": "My tasks",
				"html": "\n## 迅雷工作经历\n\n从2017年后7月至今，基于前端开发的项目总结。\n\n### PC页面\n\n- [大天使之剑H5游戏官网模板](http://dtsh5.niu.xunlei.com/)\n- [大天使之剑H5游戏进入页](http://niu.xunlei.com/entergame/dtsh5/)\n- [活动充值组件与专题](http://act.niu.xunlei.com/2017/bwzxxf/)\n- [新版金钻充值官网](http://vip.niu.xunlei.com/pay.html)\n- [迅雷游戏盒子下载页](http://gamebox.xunlei.com/)\n- [迅雷游戏盒子官网](http://niu.xunlei.com/gamebox/index.html)\n\n### 手机端页面\n\n- [夹娃娃游戏](http://game.niu.xunlei.com/jww/#/)\n- [竞猜大富翁](http://game.niu.xunlei.com/dfw/index.html?code=niuxxlcode#)\n- [微信礼包商城](http://game.niu.xunlei.com/wx/wxjifen.html)\n- [H5游戏手机版](http://niu.xunlei.com/publicaccount/h5game.html?gameid=058001)\n\n## 新浪经历\n\n从2014年11月4号入新浪实习2017年6月，从页面制作的工作开始，,包括PC页面与移动端页面切图与制作、CSS动画与js交互、以及当中的H5 宣传页面，主要完成的任务总表，从新到旧开始(不断总结更新中)\n<!--more-->\n\n#### 新浪汽车\n- React 项目\n    + [2017宝沃](http://client.sina.com.cn/2017borgward/)\n    + [2017奔腾B30B50](http://client.sina.com.cn/b30_b50/)\n    + [2017奔腾G-glass](http://client.sina.com.cn/g-glass/index.html)\n    + [2017AMG非凡驾驭50年](http://client.sina.com.cn/201704amg50_years/wap/)\n- [2017宝马BX5](http://client.sina.com.cn/20173BX5/)\n- [2017东风日产](http://all.vic.sina.com.cn/richanouguan/)\n- [2017梅赛德斯-AMG](http://client.sina.com.cn/201703c63/wap/)\n\n#### 重新定义自驾\n- 2017初 [开新车过新年](http://ria.city.sina.com.cn/widget/zt/2017/drivenewyear/index.html)\n- 2017 [寺庙自驾](http://ria.city.sina.com.cn/widget/zt/2017/bestwishes/)\n- 第四期 [海拉尔国境线之旅](http://city.sina.com.cn/2016zjy_four/index.shtml)\n- 第三期 [漠河极光之旅](http://city.sina.com.cn/2015zjy_three/index.shtml)\n- 第二期 [八闽财情](http://city.sina.com.cn/2015zjy_two/index.shtml)\n- 第一期 [驾游徽州](http://ria.city.sina.com.cn/widget/zt/zjypc/index.html)\n\n#### 新浪跑步项目\n- 第三期 [牛到里给，跑到中国](http://sports.sina.com.cn/z/running/index.shtml)\n- 第二期 [新浪疯跑-荧光夜跑PC](http://ria.city.sina.com.cn/widget/zt/fengpao2/pc/)       [Wap](http://ria.city.sina.com.cn/widget/zt/fengpao2/wap/) \n\n#### 最美工厂\n- [最美工厂](http://ria.city.sina.com.cn/widget/zt/zuimeifarm/)\n\n#### H5宣传与移动页面\n\n- [精品目的地](http://trip.city.sina.com.cn/tianjin/tj)\n- [2015微博白皮书](http://ria.city.sina.com.cn/widget/zt/2015weibotravel/index.html)\n- [2015油菜花任性指数](http://ria.city.sina.com.cn/widget/zt/2015youcaihua/index.php)\n- [2016漠河极光之旅](http://ria.city.sina.com.cn/widget/zt/zjy3.0/mb/index.html)\n\n\n\n#### 新浪内部产品\n\n[鲜城下载页面](http://www.51xiancheng.com/dlapp)\n\n##### 2015新浪营销整合\n![PC页面](http://7j1z9o.com1.z0.glb.clouddn.com/1.png)\n![pc页面](http://7j1z9o.com1.z0.glb.clouddn.com/2.png)\n![移动端页面](http://7j1z9o.com1.z0.glb.clouddn.com/3.png)\n![移动端页面](http://7j1z9o.com1.z0.glb.clouddn.com/4.png)\n\n##### 2015移动营销驱动引擎\n![PC页面](http://7j1z9o.com1.z0.glb.clouddn.com/a1.png)\n![pc页面](http://7j1z9o.com1.z0.glb.clouddn.com/a2.png)\n![pc页面](http://7j1z9o.com1.z0.glb.clouddn.com/a3.png)\n![pc页面](http://7j1z9o.com1.z0.glb.clouddn.com/a4.png)\n\n##### 2015新浪智库\n![pc页面](http://7j1z9o.com1.z0.glb.clouddn.com/b1.png)\n![pc页面](http://7j1z9o.com1.z0.glb.clouddn.com/b2.png)\n![pc页面](http://7j1z9o.com1.z0.glb.clouddn.com/b3.png)\n![pc页面](http://7j1z9o.com1.z0.glb.clouddn.com/b4.png)\n![pc页面](http://7j1z9o.com1.z0.glb.clouddn.com/b5.png)\n\n线上链接：[新浪智库](http://ic.erp.sina.com.cn/index.php)\n\n##### 2015自媒体帐号录入系统\n![pc页面](http://7j1z9o.com1.z0.glb.clouddn.com/c1.png)\n![pc页面](http://7j1z9o.com1.z0.glb.clouddn.com/c2.png)\n\n##### 2014 All In One营销聚合页\n![pc页面](http://7j1z9o.com1.z0.glb.clouddn.com/d1.png)\n![pc页面](http://7j1z9o.com1.z0.glb.clouddn.com/d2.png)\n\n线上链接：[All in one](http://act.city.sina.com.cn/activity/allinone/allinone.php)\n\n##### H5快搭平台\n![pc页面](http://7j1z9o.com1.z0.glb.clouddn.com/d3.png)\n![pc页面](http://7j1z9o.com1.z0.glb.clouddn.com/d4.png)\n![pc页面](http://7j1z9o.com1.z0.glb.clouddn.com/d5.png)\n\n##### 糖果盒产品集\n![pc页面](http://7j1z9o.com1.z0.glb.clouddn.com/e1.png)\n![pc页面](http://7j1z9o.com1.z0.glb.clouddn.com/e2.png)\n![pc页面](http://7j1z9o.com1.z0.glb.clouddn.com/e3.png)\n![pc页面](http://7j1z9o.com1.z0.glb.clouddn.com/e4.png)\n\n线上链接：[糖果盒](http://candy.city.sina.com.cn/front/)\n\n##### 2014新浪营销驱动案例\n![pc页面](http://7j1z9o.com1.z0.glb.clouddn.com/e5.png)\n![pc页面](http://7j1z9o.com1.z0.glb.clouddn.com/e6.png)\n\n线上链接：[新浪营销驱动案例](http://act.city.sina.com.cn/activity/marketing_combine/marketing_index.php)\n\n\n\n\n",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2016-04-07T08:53:03+08:00",
				"created_by": "",
				"updated_at": "2019-04-20T18:16:27+08:00",
				"updated_by": "",
				"published_at": "2016-04-07T08:53:03+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawr0p005cesu3asdraksc",
				"title": "Create-React-App配合使用Antd组件",
				"html": "\n## 简介\n\n[Create-React-APP](https://github.com/facebookincubator/create-react-app) 是 Facebook 官方的 `react` 页面生成工具，可以实现零配置就能使用 `react`来开发页面，使用起来非常方便。而 [Antd](http://ant.design/) 是阿里巴巴的一个 UI 设计语言，设计非常全面的大师级页面组件，当然比 `Bootstrap` 牛逼多了啊。\n\n> 注：已过期，具体使用请看`antd`官网使用方法 [在 create-react-app 中使用](https://ant.design/docs/react/use-with-create-react-app-cn#安装和初始化)\n\n<!--more-->\n\n## 使用\n\n下面就来利用 `creact-react-app` 快速生成 `react` 页面， 并配合使用 `antd` 作为 页面的组件来开发。\n\n### 安装\n\n首先安装 create-react-app\n打开命令行输入\n```bash\nnpm install create-react-app -g\n```\n`create-react-app` 是属于全局的命令脚手架工具，需要 `-g` 来安装\n然后初始化 `react` 页面\n```bash\ncreate-react-app react-app\ncd react-app\nnpm start\n```\n这样就可以运行 `react-app` 页面 了\n\n在 `react-app` 项目目录，安装 `antd`\n```bash\nnpm install antd --save\n```\n这时我们试着在 `src` 目录下打开编辑 `App.js` , 比如添加\n```javascript\nimport { Row, Col, Button, Icon } from 'antd';\n// ...\n<div className=\"antd\">\n    <Row>\n        <Col span={12}>\n            <Button>默认按钮<Button>\n        </Col>\n        <Col span={8}>\n            <Icon type=\"check-circle\" />\n        </Col>\n    </Row>\n</div>\n```\n然后运行 `npm start` ，我们会发现，页面结构已经用 `antd` 来展示了，但没有样式。\n\n### 配置 create-react-app\n\n在 `antd` 的使用介绍中，我们发现配合 `webpack` 与 `babel` 时需要利用插件`babel-plugin-antd` ,而在 `react-app` 项目中并没有发现 配置文件。\n\n在 `create-react-app` 官方教程中，我们看到有个命令 `eject`，意思是弹出完整项目实现自主配置。运行\n```bash\nnpm run eject\n```\n这时我们就可以发现生成一个文件配置的目录，打开 `babel.dev.js`并编辑将 `plugins `后面的代码改成下面\n\n```javascript\nplugins: [\n    'babel-plugin-syntax-trailing-function-commas',\n    'babel-plugin-transform-class-properties',\n    'babel-plugin-transform-object-rest-spread'\n  ].map(require.resolve).concat([\n    [require.resolve('babel-plugin-transform-runtime'), {\n      helpers: false,\n      polyfill: false,\n      regenerator: true\n    }]\n  ]).concat([\n    [require.resolve('babel-plugin-antd'), {\n      style: \"css\",\n    }]\n  ])\n\n  ```\n  再次运行 `npm start` 我们就看到了 `antd` 组件的样式了。好了，之后就是专心制作页面吧。\n",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2017-03-25T22:22:09+08:00",
				"created_by": "",
				"updated_at": "2019-04-20T18:16:27+08:00",
				"updated_by": "",
				"published_at": "2017-03-25T22:22:09+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawr0q005fesu3fo1wcj2a",
				"title": "react-native环境开发Ubuntu篇",
				"html": "\n由于`Facebook`的开发工程师都是用`MacOS`的，所以这`React native`的开发环境还是`MacOS`最好，其次是`Linux`,由于`windows`坑太多，这次的尝试是利用`Ubuntu`开发`React-Native`初实践\n\n<!--more-->\n\n##Ubuntu环境安装\n\n###JDK 环境\n\n`ubuntu`下安装`jdk`可使用默认的`openJDK`，只需要以下两行代码\n```bash\nsudo apt-get install default-jre\nsudo apt-get install default-jdk\n```\n亲测可以使用，毕竟`Oracle`的`jdk`太麻烦了哈哈\n\n### Android 开发工具环境\n\n利用`Android Studio`来安装使用更有效率，毕竟官方认证的啦。\n\n1. 官方下载`Android Studio`，解压后看安装说明，CD到bin目录，运行 `./studio.sh`\n2. 安装时，选择`Custom`, 勾选 `Android Virtual Device`\n3. 在启动界面，选择 `Configure`, 下面的 `Create Desktop Entry`, 可以创建快捷启动\n4. 相关要下载的sdk可以去 `React Native` 查看详细说明\n\n注意以下两点\n\n> 添加 `ANDROID_HOME` 路径 与 `SDK` 路径到 系统变量中\n\n```bash\nvi ~/.bashrc\n# 添加到文本中\n\nPATH=\"~/Android/Sdk/tools:~/Android/Sdk/platform-tools:${PATH}\"\nexport PATH\n\nexport ANDROID_HOME=~/Android/Sdk\n```\n\n> 必须安装以下依赖, 且必须在安装`Android Studio` 前安装好\n\n```bash\nsudo apt-get install lib32stdc++6\nsudo apt-get install lib32ncurses5 ia32-libs\n```\n\n### Node.js开发环境\n\n众所周知，`React-Native`是利用前端`JavaScript`的技术来开发原生APP应用，而`nodejs`是前端开发的基础环境，是`JavaScript`作为服务器语言的环境基础，当然也是目前最火的技术啦。\n\n推荐安装`git`\n\n```bash\nsudo apt-get install git\n```\n\n安装`nodejs`与`npm`\n\n```bash\ncurl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -\nsudo apt-get install nodejs\n```\n\n安装 `react-native-cli`\n\n```bash\nsudo npm install -g react-native-cli\n# 如果出现权限问题可以加上命令 --unsafe-perm --verbose ，同时适用gulp, bower, webpack等库\nsudo npm install -g react-native-cli --unsafe-perm --verbose\n```\n\n开发启动`React Native` 项目\n\n1. 启动Android模拟器，推荐Android 5.1以上\n2. 初始化目录, react-native init AwesomeProject, cd AwesomeProject, 3. react-native start, react-native run-android\n3. 等待下载编译器并开始编译\n\n如看到模拟器打开了一上`React Native`应用，则表示你已经成功完成开发环境了。\n更多的开发使用请参考官网[React Native](https://facebook.github.io/react-native/) .",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2017-03-25T22:44:37+08:00",
				"created_by": "",
				"updated_at": "2019-04-20T18:16:27+08:00",
				"updated_by": "",
				"published_at": "2017-03-25T22:44:37+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawr0t005jesu3bhcd4ro8",
				"title": "使用 vagrant 作为前端开发环境",
				"html": "\n`Vagrant`是一个基于`Ruby`的工具，用于创建和部署虚拟化开发环境。它 使用`Oracle`的开源`VirtualBox`虚拟化系统，使用 `Chef`创建自动化虚拟环境。\n\n比`Docker`好一点的地方就是配置方便，支持`windowsXP、7`等等\n\n作为一条前端狗，经常会需要用过一些通用的前端工具，在多个办公平台中使用，以下就是本人的一些使用笔记\n\n<!--more-->\n\n### `vargant` 使用 ubuntu/trusty64 系统包\n```bash\nvagrant init ubuntu/trusty64; \nvagrant up --provider virtualbox\n```\n\n\n### 安装`nodejs`开发环境\n\n#### 使用`git-bash`进入`vargant`目录，安装`npm`\n\n```bash\napt-get install npm\n// 安装`n`版本安装模块\nnpm install -g n\n// 使用`n`安装`6.10.0`版`nodejs`\nn 6.10.0\n// 安装`npm`淘宝源\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n#### 安装`git`工具\n\n```bash\napt-get install git-core\n```\n\n### `vagrant`常用命令\n\n```bash\n$ vagrant init  # 初始化\n$ vagrant up  # 启动虚拟机\n$ vagrant halt  # 关闭虚拟机\n$ vagrant reload  # 重启虚拟机\n$ vagrant ssh  # SSH 至虚拟机\n$ vagrant status  # 查看虚拟机运行状态\n$ vagrant destroy  # 销毁当前虚拟机\n$ vagrant package  # 打包\n$ vagrant box add lee box/package.box  // 添加 package.box 镜像并命名为 lee\n$ cd vagrant  // 切换到项目目录\n$ vagrant init lee  // 用 lee 镜像初始化。\n\n```\n\n### 网络端口映射\n\n在 `Vagrantfile` 中更改\n```\nconfig.vm.network \"forwarded_port\", guest: 8080, host: 8088\nconfig.vm.network \"forwarded_port\", guest: 3000, host: 8083\n```\n\n### 同步目录\n\n`vagrant`默认`/vagrant` 为当前目录\n\n### 服务器\n\n#### 安装redis\n\n```\napt-get install redis-server\n```\n\n进入 `redis` 命令行\n\n```\nredis-cli\n```\n\n#### 安装`sqlite3`\n\n```\napt-get install sqlite3\n```\n\n#### 安装mongoddb\n\n```\napt-get install mongodb\n```\n\n### 前端模块\n\n#### 安装`sass` 和 `compass`\n\n```\ngem instll sass\napt-get install ruby-compass\n```\n\n#### `npm`其他模块\n\n- [cnpm](https://npm.taobao.org/)\n- [node-tinypng](https://www.npmjs.com/package/node-tinypng)\n    + usage: `tinypng *.png(or folder)`\n- bower\n- babel-cli\n    + usage: `babel example.js -o compiled.js`\n- react-native\n- [React UI构建工具 react-storybook](https://getstorybook.io/)\n    + usage: `npm i -g getstorybook`\n- pm2\n- gulp\n- create-react-app\n- [jsmonkey](https://www.npmjs.com/package/jsmonkey)\n- less\n    + usage: `lessc styles.less > styles.css`\n- [serve-here](https://www.npmjs.com/package/serve-here)\n    + usage: here [-p 8888][-S][here -d directory][-w 3]\n- pushstate-server\n    + usage: `pushstate-server [directory] [port]`\n- yarn\n    + usage: 设置国内镜像  `yarn config set registry https://registry.npm.taobao.org`\n- webpack\n- postcss-cli\n- autoprefixer\n    + usage: `postcss --use autoprefixer *.css -d build/`\n- gatsby\n- requirejs (r.js)\n- browserify\n- express\n\n",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2017-03-25T23:03:52+08:00",
				"created_by": "",
				"updated_at": "2019-04-20T18:16:27+08:00",
				"updated_by": "",
				"published_at": "2017-03-25T23:03:52+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawr0x005qesu39ef53tdk",
				"title": "arraybuffer处理pictures",
				"html": "\n利用 `arraybuffer` 来处理图片，包含图片的路径名称与数据，并把多张图片合并一个 `arraybuffer` 并生成单张图片，以及图片的解析。\n\n<!--more-->\n\n### 前提了解\n\n之前看到的一个`H5`叫[四大导师拯救麦渣](http://evt.dianping.com/market/2015073117/index.html) 特别吸引我，使用 `canvas` 配合 `xml` 来构建页面的效果真的非常棒，但代码太多一直都没能提取出来做个`React`框架。\n\n然后我简单的总结下这个`H5`使用 `arraybuffer` 来提取图片信息的方法，做个笔记啦。\n具体代码请看 [buffer-images](https://github.com/sternelee/buffer-images/blob/master/README-zh_CN.md)。\n\nArrayBuffer对象、TypedArray对象、DataView对象是JavaScript操作二进制数据的一个接口，具体了解有[阮一峰大神](http://javascript.ruanyifeng.com/stdlib/arraybuffer.html)很好的教程。\n\n### 合并图片信息\n\n利用 `arraybuffer` 来处理图片，包含图片的路径名称与数据，并把多张图片合并一个 `arraybuffer` 并生成单张图片。\n\n#### 图片路径名称\n\n为兼容中文，使用 4 位字节来存储为`Uint32Array`，而图片信息为`Uint8Array`,其中有 `new ArrayBuffer(l*4+4+4+q)` ，\n即 图片路径名称的长度lx4 + 前面数据长度记录为4 + 图片信息数据长度为4 + 图片数据\n\n#### 合并方式\n\n#### 利用`html`服务器\n\n具体可看 [pics2ab.html](https://github.com/sternelee/buffer-images/blob/master/pics2ab.html), 由于是用 `XMLHttpRequest` 来加载图片必须要有服务器环境。\n\n以及页面生成的图片不能直接保存，我的方式是用火狐浏览器打开页面，并查看时可保存，更改文件后缀即可(jpg或png 都行)。\n\n#### 利用`nodejs`\n\n读取你需要的图片来合成\n\n```\nnode index.js\n```\n\n读取目录下的图片来合成\n\n```\nnode main.js\n```\n\n\n### 解析图片\n\n用上面的方式合成的图片信息，就可以用反向的方式来生成。\n请看案例代码 [index.html](https://github.com/sternelee/buffer-images/blob/master/index.html)\n",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2017-05-02T19:48:34+08:00",
				"created_by": "",
				"updated_at": "2019-04-20T18:16:27+08:00",
				"updated_by": "",
				"published_at": "2017-05-02T19:48:34+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawr0u005mesu3a02tawcs",
				"title": "react 开发手册",
				"html": "\n总结 [react](https://reactjs.org/) 开发是需要用到的框架和功能模块，从模块安装、脚手架、网络请求模块，到状态管理、数据库，以及原生开发的组件与UI，都简单地做了记录，方便开发时查询。\n\n<!--more-->\n\n### 语法篇\n\n- [ES6](http://es6.ruanyifeng.com/)\n    [es6 api](http://es6-features.org/#Constants)\n- [babel](https://babeljs.cn/)\n    - [阮一峰的博客](http://www.ruanyifeng.com/blog/2016/01/babel.html)\n- [JSX](https://hulufei.gitbooks.io/react-tutorial/content/jsx-in-depth.html)\n- [CSS Module](https://github.com/camsong/blog/issues/5)\n- [React小书](http://huziketang.com/books/react/)\n\n\n### 工具篇\n\n- [yarn](https://yarnpkg.com/zh-Hans/)\n    - `facebook` 出品的模块安装工具，国内使用阿里源 `yarn config set registry 'https://registry.npm.taobao.org'`\n- [create-react-app](https://www.npmjs.com/package/create-react-app)\n    - 官方初始化脚手架\n- [create-next-app](https://www.npmjs.com/package/create-next-app)\n    - 面向服务端渲染的 `next` 框架脚手架\n- [axios](https://www.npmjs.com/package/axios) \n    - `http` 请求模块\n- [fetch-jsonp](https://www.npmjs.com/package/fetch-jsonp)\n    - `jsonp` 请求模块\n\n### 状态篇\n\n- [redux](http://cn.redux.js.org/index.html)\n    - `Redux` 是 `JavaScript` 状态容器，提供可预测化的状态管理。\n    - `Action`, `Reducer`, `Store`\n- [mobx](http://cn.mobx.js.org/)\n    - `mobx` 提供简单、可扩展的状态管理\n    - [mobx-state-tree](https://www.npmjs.com/package/mobx-state-tree) 快速创建状态管理模型\n\n### UI篇\n\n- PC桌面UI\n    - [Antd](https://ant.design/) 阿里蚂蚁金服的企业级 `UI`框架，面向 `react` 和 `RN` \n    - [material-ui](http://www.material-ui.com/#/get-started/usage) 谷歌UI\n    - [react desktop](http://reactdesktop.js.org/)\n- Mobile手机UI\n    - [nativebase](https://nativebase.io/)\n    - [react-native-ui-kitten](https://akveo.github.io/react-native-ui-kitten/#/home)\n\n### 数据篇\n\n- [sequelize](https://www.npmjs.com/package/sequelize)\n    - 快速连接数据库\n- [faker](https://www.npmjs.com/package/faker)\n    - 生成模拟数据\n- [GraphQL](http://graphql.org/)\n    - 面向`APP` 的描述型数据库\n    - [Apolo](https://www.apollographql.com/)\n    - [Relay](https://facebook.github.io/relay/)\n\n### 原生篇\n\n- [react-native](http://www.reactnativeexpress.com/)\n    - `react` 开发原生 `app`\n    - [create-react-native-app](https://github.com/react-community/create-react-native-app) 官方的快速创建RN模板\n- [expo](https://expo.io/)\n    - 使用 `RN` 的通用开发工具\n- [proton-native](https://github.com/kusti8/proton-native)\n    - 使用`React`\b开发桌面应用\n\n### IDE篇\n\n- [VSCode](https://code.visualstudio.com/)\n    - \b微软出品，插件\b全面\n- [Deco IDE](https://www.decoide.org/)\n- [reactotron](https://github.com/infinitered/reactotron)\n\n### 路由篇\n\n- [React Router](https://reacttraining.com/react-router/)\n    - 用于`web`和`native`的路由框架\n- [react-navigation](https://reactnavigation.org/)\n    - `react native` 专用的菜单导航\n\n### 后端篇\n\n- [next](https://github.com/zeit/next.js/)\n    - `React` 后端服务渲染框架\n- [gatsby](https://www.gatsbyjs.org/)\n    - 用于建站的后端框架\n- [react-server](https://react-server.io/)\n    - [官方](https://reactjs.org/docs/react-dom-server.html)\n\n### 组件篇\n\n- [loadable-components](https://github.com/smooth-code/loadable-components/)\n    - 预加载组件，用于组件分拆，按需要加载",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2017-09-17T11:58:25+08:00",
				"created_by": "",
				"updated_at": "2020-07-13T12:10:03+08:00",
				"updated_by": "",
				"published_at": "2017-09-17T11:58:25+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawr0y005tesu34slzg04c",
				"title": "TypeScript快速上手",
				"html": "\nTypeScript快速上手, 深入请看 [深入理解 TypeScript](https://jkchao.github.io/typescript-book-chinese/)\n\n### 上手工具\n\n工欲善其事必先利其器\n\n1. [微软大杀器 VSCode](https://code.visualstudio.com/)\n2. [Node环境](https://nodejs.org/zh-cn/)\n3. Node环境模块: TypeScript, Ts-lint 和 ts-node，快速安装\n> npm install -g typescript tslint ts-node\n4. VSCode 插件：TSLint, Code Runner, TypeScript Hero, TypeScript Toolbox\n5. 快速码字\n> tsc --init\n> tslint --init\n> parcel 快速开发\n> create-react-app new-app --scripts-version=react-scripts-ts\n> 声明全局 global.d.ts\n6. 使用ts来开发lib，推荐 [tsxd](https://github.com/palmerhq/tsdx)\n\n### 使用技巧\n\n1. 借助 VSCode 可以适当改下 `tslint` 规则\n2. `window` 的全局方法要合理判断，如 `XMLHttpRequest` 方法需要 `if ((window as any).XMLHttpRequest)`, 因为IE下是 `ActiveXObject`",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2018-09-17T22:36:53+08:00",
				"created_by": "",
				"updated_at": "2020-07-13T12:10:03+08:00",
				"updated_by": "",
				"published_at": "2018-09-17T22:36:53+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawr6g009qesu34x5dffad",
				"title": "friends",
				"html": "",
				"featured": 0,
				"page": 1,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2018-12-12T21:25:30+08:00",
				"created_by": "",
				"updated_at": "2020-07-13T12:10:03+08:00",
				"updated_by": "",
				"published_at": "2018-12-12T21:25:30+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawr11005zesu33iax746a",
				"title": "about-vue",
				"html": "\n\n记录在学习和使用Vue下遇到的一些问题\n\n### 遇到的bugs\n\n1. `v-html` 内的文档结构不能使用自闭包的标签，如 `<i />`, 必须是 `<i></i>` 这样的结构，不然会出现渲染bug导致标签不匹配\n2. `Nuxt`中的配置样式会全局导入，每个页面都会得复加载\n\n<!--more-->\n\n### 一些问题的优化\n\n1. 使用 `slot` 时要注意外层标签的标签，不能出现如 `p` 标签包裹 `div` 标签的情况\n2. [Vue2 SSR 的优化之旅](https://segmentfault.com/a/1190000007985486)\n   1. `vue-meta` 和 `axios`的拦截器 可能导致内存泄漏\n   2. 服务端的 api 数据缓存 和 组件的缓存\n3. SEO 的优化，可以对 单页面里的 `a` 标签添加 `href` 对应链接，注意使用 `@click.prevent.stop`",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2019-04-24T19:45:10+08:00",
				"created_by": "",
				"updated_at": "2020-07-13T12:10:03+08:00",
				"updated_by": "",
				"published_at": "2019-04-24T19:45:10+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawr130062esu3fprh2l4l",
				"title": "wsl-notes",
				"html": "\n### wsl 使用记录\n\n1. wsl 终端代理 `export http_proxy=http://localhost:8123`, 教程为 [polipo 代理](https://liuzhilin.io/archives/46)\n2. `git` 平台不同时的换行符问题，可在windows平台同时执行 `git config --global core.autocrlf true`, 而在其他平台 `git config --global core.autocrlf input`, [相关阅读](https://www.jianshu.com/p/38f04aef1c9d)\n3. 默认终端字体使用 [DejaVu Sans Mono for Powerline](https://github.com/powerline/fonts/blob/master/DejaVuSansMono/DejaVu%20Sans%20Mono%20for%20Powerline.ttf)\n4. 安装[oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh) 和 [推荐插件](https://juejin.im/entry/5ae00e54f265da0b8635ea5c)",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2019-05-08T17:07:45+08:00",
				"created_by": "",
				"updated_at": "2020-07-13T12:10:03+08:00",
				"updated_by": "",
				"published_at": "2019-05-08T17:07:45+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawr10005xesu3bwt7ckmk",
				"title": "node-env",
				"html": "\n# 前端`nodejs`开发平台\n\n## 安装`nodejs`开发环境\n\n```bash\n// 安装`npm`淘宝源\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n## 安装`git`工具\n\n## 前端模块\n\n- [cnpm](https://npm.taobao.org/)\n- [node-tinypng](https://www.npmjs.com/package/node-tinypng)\n    + usage: `tinypng *.png(or folder)`\n- [json-server](https://www.npmjs.com/package/json-server)\n    + usage: 快速构建 `REST API` 本地服务\n- bower\n- babel-cli\n    + usage: `babel example.js -o compiled.js`\n- [phantomjs](http://javascript.ruanyifeng.com/tool/phantomjs.html)\n- [typescript](https://www.tslang.cn/docs/tutorial.html) , [ts-node](https://github.com/TypeStrong/ts-node) 与 [typings](https://github.com/typings/typings)\n    + usage: `tsc file.ts`\n- react-native\n- [React UI构建工具 react-storybook](https://getstorybook.io/)\n    + usage: `npm i -g getstorybook`\n- [pm2](https://pm2.io/doc/en/runtime/overview/)  node应用进程管理工具\n- [spy-debugger](https://www.npmjs.com/package/spy-debugger)\n- [gulp](https://gulpjs.com/)\n- [create-react-app](https://github.com/facebookincubator/create-react-app)\n- [create-react-native-app](https://github.com/react-community/create-react-native-app)\n- [dawn](https://alibaba.github.io/dawn/docs/)\n    + 阿里前端构建和工程化工具\n- [prepack](https://prepack.io/getting-started.html)\n    + usage: `prepack script.js`\n- [jsmonkey](https://www.npmjs.com/package/jsmonkey)\n- stylus\n    + usage: `stylus -w style.styl -o style.css`\n- less\n    + usage: `lessc styles.less > styles.css`\n- [serve](https://www.npmjs.com/package/serve)\n    + usage: `Yarn` 推荐本地静态服务\n- [serve-here](https://www.npmjs.com/package/serve-here)\n    + usage: `here [-p 8888][-S][here -d directory][-w 3]`\n- pushstate-server\n    + usage: `pushstate-server [directory] [port]`\n- yarn\n    + usage: 设置国内镜像  `yarn config set registry https://registry.npm.taobao.org`\n- pnpm\n- [npm-home](https://github.com/sindresorhus/npm-home)\n- [apollo-client](https://github.com/apollographql/apollo-client) 面向UI框架的GraphQL客户端\n- nodemon\n    + usage: `npm install -g nodemon`\n- webpack\n- [koa-generator](https://github.com/17koa/koa-generator)\n    + usage: (koa教程)(http://17koa.com/koa-generator-examples/koa-generator/install.html)\n- postcss-cli\n- autoprefixer\n    + usage: `postcss --use autoprefixer *.css -d build/`\n- npm-check\n- gatsby\n- requirejs (r.js)\n- browserify\n- express\n- [fkill-cli](https://github.com/sindresorhus/fkill-cli)\n- [parcel](https://parceljs.org/)\n- [n](https://www.npmjs.com/package/n)\n- [nrm](https://www.npmjs.com/package/nrm) npm源快速切换\n\n## 常用`JS`框架\n\n<!--more-->\n\n### `DOM`操作工具\n\n- [Jquery](http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js)\n- [Zepto](http://apps.bdimg.com/libs/zepto/1.1.4/zepto.min.js)\n- [Touchjs手势](https://github.com/Clouda-team/touch.code.baidu.com)\n- [Hammer.js手势](http://hammerjs.github.io/)\n- [Video.js视频](http://videojs.com/)\n- [Howler音频](https://github.com/goldfire/howler.js)\n\n### 页面适配\n\n- [flexible.js](https://github.com/sternelee/lib-flexible)\n- [Hotcss](https://github.com/sternelee/hotcss)\n- [Modernizr](https://github.com/Modernizr/Modernizr)\n\n\n### 翻页轮播单页面\n\n- [Swiper](http://www.swiper.com.cn/)\n- [pageSwitch 页面切换库](https://github.com/sternelee/pageSwitch)\n- [fullPage.js](https://github.com/alvarotrigo/fullPage.js)\n\n### `3D`制作\n\n- [Three.js](http://threejs.org/)\n- [css3d-engine](https://github.com/shrekshrek/css3d-engine)\n\n\n### `js`动画引擎\n\n- [anime-js](http://anime-js.com/)\n- [TweenMax](http://greensock.com/tweenmax)\n\n### `Canvas`动画等\n\n- [Layabox](http://www.layabox.com/)\n- [白鹭引擎](https://www.egret.com/)\n- [createjs](http://www.createjs.cc/)\n- [pixi.js](http://www.pixijs.com/)\n\n### `SVG`表格，图示\n\n- [Echarts.js百度](http://echarts.baidu.com/index.html)\n- [Chart.js图表绘制](http://www.bootcss.com/p/chart.js/)\n- [D3](http://d3js.org/)\n- [mojs运动](https://github.com/legomushroom/mojs)\n",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2019-05-08T17:12:20+08:00",
				"created_by": "",
				"updated_at": "2020-07-13T12:10:03+08:00",
				"updated_by": "",
				"published_at": "2019-05-08T17:12:20+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawr170069esu3fbzd1bsn",
				"title": "我的windows工作台",
				"html": "\n\"巨硬\"的windows10其实已经是个非常实用和开发友好的系统平台了，在这里我记录下平常使用到的一些应用软件和开发工具，在Surface Pro6的使用下完善工作和学习生活的需求。\n\n## 终端篇\n\n### 终端工具\n- PowerShell 其实是很强大的，在支持插件策略之后可以到 [powershellgallery](https://www.powershellgallery.com/) 安装一些非常实用的插件如下，在powershll内打开配置文件 `notepad $PROFILE`\n  - posh-git\n  - oh-my-posh\n  - Get-ChildItemColor\n  - 推荐文章 [PowerShell 的外观](https://sspai.com/post/52868) 和 [PowerShell优化](http://zhzyx.me/2019/02/PowerShell-%E4%BC%98%E5%8C%96-%E6%9B%B4%E5%A5%BD%E7%9A%84-Windows-%E7%BB%88%E7%AB%AF/)\n\n- WSL(Linux 的Windows 子系统), 推荐选择 Ubuntu 或 Debian\n- 终端工具\n  - [ConEmu](https://conemu.github.io/)\n  - [FluentTerminal](https://github.com/felixse/FluentTerminal) 基于uwp开发\n  - [terminus](https://github.com/Eugeny/terminus) 基于Hyper的终端(支持ssh)\n  - [hyper](https://github.com/bnb/awesome-hyper) 更漂亮的终端\n\n### 终端命令\n\n- [scoop](https://github.com/lukesampson/scoop/wiki/Quick-Start) 更好的包安装工具,推荐安装`curl`, `openssh`, `ripgrep`, `fzf`, `ctags`等，使用全局安装`scoop install -g`, 可选添加 `-a 32bit(64bit)`选择平台版本\n- [z.lua](https://github.com/skywind3000/z.lua/blob/master/README.cn.md) 基于Lua的快速路径切换工具\n\n## 桌面软件\n\n- [VSCode](https://code.visualstudio.com/) 最硬的IDE，相应我的插件表单\n- [SimpleRemote](http://www.91fk.net/) 轻量级、选项卡式、免费、开源的远程连接管理工具\n- [uTools](https://u.tools/) 极简、插件化、跨平台的启动工具，同类有 [wox](http://www.wox.one/)\n- [SwitchHosts!](https://github.com/oldj/SwitchHosts) host切换管理工具\n- Snipaste 截图+贴图工具\n- [快贴](http://clipber.com/) 全平台复制粘贴同步工具\n- Everything 文件搜索工具\n- QuickLook 文件预览工具\n- [phpstudy](http://phpstudy.php.cn/) php + nginx + apache + mysql 集成管理工具\n- 坚果云 文件同步\n- PicGo 图库上传工具\n- Fiddler 网络抓包工具\n- 123看图器\n- FileZilla\n- Proxifier 系统代理配置工具\n- [Virgo](https://github.com/henkman/virgo) 虚拟桌面切换工具",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2019-05-09T10:02:01+08:00",
				"created_by": "",
				"updated_at": "2020-07-13T12:10:03+08:00",
				"updated_by": "",
				"published_at": "2019-05-09T10:02:01+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawr140064esu377j10ksf",
				"title": "pwa实践",
				"html": "\nProgressive Web App, 简称 PWA，是提升 Web App 的体验的一种新方法，能给用户原生应用的体验。\n[详细说明](https://lavas.baidu.com/pwa/README)\n\n本方从开发工具，前端框架和打包流程来实践开发PWA的过程。\n\n## 准备工作\n\n### 环境工具\n\n由于 pwa 站点的Service Worker要求https，以及一些推荐性工具，下面一一列出来:\n\n1. [mkcert](https://github.com/FiloSottile/mkcert) https证书\n2. [pwa-cli](https://pwa.cafe/) 现成的初始化开发环境\n\n### 开发思路\n\n1. pwa是类APP的页面，需要具备响应性，推荐使用 [hotcss](https://github.com/sternelee/hotcss)",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2019-05-15T19:28:53+08:00",
				"created_by": "",
				"updated_at": "2020-07-13T12:10:03+08:00",
				"updated_by": "",
				"published_at": "2019-05-15T19:28:53+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawr160067esu3dnfd01u4",
				"title": "shadow-dom入门",
				"html": "\n## 认识 Shadow DOM\n\n### 什么是 Shadow DOM\n\nShadow DOM 是 Web Components 定义的四大标准之一(Custom elements, Shadow DOM, HTML templates 和 HTML Imports)。\n\nShadow DOM是一组**JavaScript API**，用于将封装的“影子”DOM树附加到元素（与主文档DOM分开呈现）并控制其关联的功能。通过这种方式，您可以保持元素的功能私有，这样它们就可以被脚本化和样式化，而不用担心与文档的其他部分发生冲突。这直接解决了HTML、CSS 和 JS 的**全局性**污染的问题。\n<!--more-->\n### Shadow DOM 结构表现\n\n第一步：打开 Chrome 的开发者工具，点击右上角的“Settings”按钮，勾选“Show user agent shadow DOM”。\n第二步：创建包含 `video` 元素的页面（`audio`, `select`, `progress`, `input` 等等 都行)\n\n![1.png](https://raw.githubusercontent.com/sternelee/content/images/hexo/master/imgs1.png)\n\n`#shadow-root`称为影子根，可以看到它在video里面，换句话说，`#shadow-root`寄生在`video`上，所以video此时称为影子宿主。可以看到上图有两个`#shadow-root`，这是因为`#shadow-root`可以嵌套，形成节点树，即称为影子树（shadow trees）。影子树对其中的内容进行了封装，有选择性的进行渲染。这就意味着我们可以插入文本、重新安排内容、添加样式等等。\n\n![3.png](https://raw.githubusercontent.com/sternelee/content/images/hexo/master/imgs3.png)\n\n### Shadow DOM vs DOM vs Light DOM\n\n> tip: Light DOM 组件用户编写的标记，该 DOM 不在组件 shadow DOM 之内，它是元素实际的子项。\n> 如：`<button is=\"better-button\"><img src=\"gear.svg\" slot=\"icon\"><span>Settings</span></button>`\n\nshadow DOM 有以下优点：\n\n1. 隔离 DOM：组件的 DOM 是独立的（例如，`document.querySelector()` 不会返回组件 Shadow DOM 中的节点）。\n\n2. 作用域 CSS：Shadow DOM 内部定义的 CSS 在其作用域内。样式规则不会泄漏，页面样式也不会渗入。\n\n3. 组合：为组件设计一个声明性、基于标记的 API。\n\n4. 简化 CSS： 作用域 DOM 意味着您可以使用简单的 CSS 选择器，更通用的 id/class 名称，而无需担心命名冲突。\n\n5. 效率：将应用看成是多个 DOM 块，而不是一个大的（全局性）页面。\n\n### 使用 Shadow DOM\n\n```html\n...\n<style type=\"text/css\">\n#app {\n    --text-color: green;\n}\n</style>\n<div id=\"app\">\n    <h1>我是根元素</h1>\n</div>\n<script>\n    const app = document.getElementById('app');\n    const shadowRoot = app.attachShadow({mode: 'open'});\n    shadowRoot.innerHTML = `\n    <style>\n        :host {color: blue;}\n        h2 {color: var(--text-color, black);background: red;}\n    </style>\n    <h2>Hello Shadow DOM</h2>\n    `;\n    const span = document.createElement('span');\n    span.textContent = \"你好\";\n    shadowRoot.appendChild(span);\n\n    let css = document.createTextNode(\"h2{ font-size: 20px}\");\n    const style = document.createElement('style')\n    style.appendChild(css)\n    shadowRoot.appendChild(style)\n\n    setTimeout(_ => {\n        span.textContent = \"两秒后我改变了\";\n        span.setAttribute('style', 'color: green;');\n        css = document.createTextNode(\"h2{ font-size: 30px}\");\n        style.appendChild(css)\n    }, 2000)\n</script>\n```\n\n在原生dom节点上创建shadowDOM,添加样式和内容，并进行更新。\n\n\n注意点：\n\n1. 并不是所有的元素都可以挂载 Shadow DOM，其主要原因是：\n\n   1. 浏览器已为该元素托管其自身的内部 shadow DOM（比如 textarea、input）。\n   2. 让元素托管 shadow DOM 毫无意义 (比如 img)。\n2. Shadow DOM，一旦创建就无法删除，它只能用新的替换\n3. 在调用 attachShadow 创建 ShadowRoot 之后，attachShdow 方法会返回 ShadowRoot 对象实例\n4. `mode` 有 `open` 和 `closed` 选项，当为 closed 时无法获取shadowRoot属性\n5. 增加 Shadow DOM 后原父级子元素会无效\n6. 更新内容和样式都使用原生的JavaScript API\n\n### template 和 slot\n\n前面说了,shadow dom可以实现dom的隔离，比如样式的封装，那么如何实现呢？shadow规定了一种名为`template`的标签，这种标签类似我们经常用的`<script type='tpl'>`，它不会被解析为dom树的一部分，template的内容可以被塞入到shadow dom中并且反复利用，在template中可以设置style，但只对这个template中的元素有效，看下示例：\n```html\n<style>\nspan {\n  background-color:blue;/*设置页面所有span背景为蓝色，然而对shadow dom没什么卵用*/\n}\n</style>\n<div id=\"con\">\n    没什么卵用的文字\n  </div>\n   <template id=\"tpl\">\n     <style>\n       span {\n         color:red;\n       }\n     </style>\n     <span>hello world</span>\n   </template>\n```\n```javascript\nvar host = document.querySelector('#con');\nvar root = host.attachShadow({mode:'open'});\n\nvar con = document.getElementById(\"tpl\").content.cloneNode(true);\n\nroot.appendChild(con);\n```\n可以看到，template的内容被塞入到宿主，并且其文案被设置为红色，而body 中对 span 设置为蓝色背景却没有生效；另外这里要注意document.getElementById(\"tpl\").content中的content属性，它是template标签的特有属性，你可以通过嗅探该属性来判断浏览器是否支持shadow dom和template标签。这是shadow dom的组件化复用的基本方式。\n\n\n由于shadow dom的内容会掩盖宿主的内容，那么现在问题来了，我就是想把宿主的内容显示出来怎么办？\n\n这时就需要`slot`了，slot是一个插槽，一个坑位，可以在template中定义坑位，然后宿主中的内容可以标记属于哪一个坑位，这样一个萝卜一个坑，宿主的内容就会被正确地插入到template所标记的位置去，还是来看一个例子：\n\n```html\n<div id=\"con\">\n    没什么卵用的文字\n    <span slot=\"main1\">\n      坑位1\n    </span>\n    <span slot=\"main2\">\n      坑位2\n    </span>\n    没什么卵用的文字 </div>\n  <template id=\"tpl\">tpl begin\n    <slot name=\"main1\">\n    </slot>\n    <slot name=\"main2\">\n    </slot>\n    tpl end\n      </template>\n```\n```javascript\nvar host = document.querySelector('#con');\nvar root = host.attachShadow({mode:'open'});\n\nvar con = document.getElementById(\"tpl\").content.cloneNode(true);\n\nroot.appendChild(con);\n```\n\n看看，这就是Vue的solt插槽的方式。\n宿主中的两个span分别插入到了其标记的slot坑位中。在slot出现之前，仍然可以实现类似的功能，只不过标签名叫content。\n\n### 基于 Shadow DOM 的前端框架 [omi](https://github.com/Tencent/omi/blob/master/README.CN.md) ——  腾讯出品\n\n1. 基于 Shadow Dom 设计,Web Components + JSX + HTM 融合为一个框架 Omi\n2. Shadow DOM 与 Virtual DOM 融合，Omi 既使用了虚拟 DOM，也是使用真实 Shadow DOM，让视图更新更准确更迅速\n3. 局部 CSS 最佳解决方案(Shadow DOM)，社区为局部 CSS 折腾了不少框架和库(使用js或json写样式，如:Radium，jsxstyle，react-style；与webpack绑定使用生成独特的className文件名—类名—hash值，如：CSS Modules，Vue)，还有运行时注入scoped atrr 的方式，都是 hack 技术；Shadow DOM Style 是最完美的方案\n\n...\n\n### 参考\n\n1. [Shadow DOM v1：独立的网络组件](https://developers.google.com/web/fundamentals/web-components/shadowdom?hl=zh-cn)\n2. [神奇的Shadow DOM](https://aotu.io/notes/2016/06/24/Shadow-DOM/index.html)",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2019-05-30T14:02:31+08:00",
				"created_by": "",
				"updated_at": "2020-07-13T12:10:03+08:00",
				"updated_by": "",
				"published_at": "2019-05-30T14:02:31+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawr18006cesu37cgzdjr4",
				"title": "strapi实践",
				"html": "\n[strapi](https://strapi.io/) 是一套用于图形化构建和管理后端数据的平台，同时也是基于前端技术的内容管理工具CMS，可以实现RESTful和GraphQL无缝接入。\n下面就是我的新手引导的记录。\n\n## 安装\n\n按照官方说明，使用下列命令：\n\n```bash\nyarn create strapi-app <project-name>\n```\n会有两种安装方式：快速和自定义，其实就是数据库的选择。在这里我使用mysql配置下来（注意使用数据库mysql时，要求5.7及以上版本才行），安装依赖结束后启动。\n```bash\nyarn develop\n```\n即可。\n\n按照官方的新手引导即可完成内容的类型创建和添加。\n\n<!--more-->\n\n## 使用 Graphql\n\n[strapi使用Graphql](https://strapi.io/documentation/3.0.0-alpha.x/guides/graphql.html#graphql) 也十分方便。\n\n```bash\nyarn strapi install graphql\n```\n\n## 使用图片服务端\n\n七牛云、阿里云、腾讯云都有相应的`npm`插件包（strapi-provider-upload-qiniu，strapi-provider-upload-oss 和 strapi-provider-upload-tencent），安装即可。这些适应器以 `strapi-provider-[type]` 来区分， `type` 如 `upload`, `email`, 可直接在`npm`官方搜索到。\n之后我们就可以在 `插件` -> `FILES UPLOAD — 多媒体档案管理` 右侧配置按钮即可进入配置项。\n\n## 多数据库 😣\n\n在 `./config/environments/**/database.json` 中，可以添加多个数据库，然而在图形化添加数据类型时，没有选择数据库的选项，而在添加完后在相应的目录下 `modules/[name].settings.json`中有相应的字段`connection`;\n\n*** 临时更改默认连接数据库\n\n在 `database.json` 中配置多个数据库后, 临时更改 `defaultConnection` 再去创建类型模型即可.\n网上说在选择内容类型名称时会看到要使用的连接的下拉列表,然而我一直没找到.\n\n*** 利用 `hook` 来使用 `redis` 数据库\n\n[官方 `strapi`](https://strapi.io/documentation/3.0.0-beta.x/concepts/hooks.html#structure) 规定 `strapi-hook-[name]` 的npm模块包会自动引入 `hook` 系统;\n因此安装`npm i strapi-hook-redis`, 然后启用: `config/hook.json` 添加:\n\n```json\n{\n  ...\n  \"redis\": {\n    \"enable\": true\n  }\n}\n```\n\n然而,根据`strapi-hook-redis` 的 `index.js` 文件说明, 在database.json中添加如 `connector: 'strapi-hook-redis'` 的数据库字段,却无法跑起来去❌，难😣!\n\n## [policies 使用](https://strapi.io/documentation/3.0.0-beta.x/concepts/policies.html#concept)\n\npolicies 是用来处理路由请求的规则，可以做校验或对其他的接口操作（如定时器，logger等）。\n\n## [CLI工具](https://strapi.io/documentation/3.0.0-beta.x/cli/CLI.html)\n\n如果是全局安装了 strapi, 则直接使用;\n局部安装可执行 ` .\\node_modules\\.bin\\strapi`\n\n## 自定义二级域名\n\n1. 使用 `nginx` 的 `proxy_pass` 来代理， 如 `/api/` 配置到 `http://127.0.0.1:1337/`\n2. 更改页面的js为相对路径，在 `build` 目录下的 `index.html` 文件，如 `/admin/runtime~main.08b11d8f.js` 改成 `./admin/runtime~main.08b11d8f.js`\n3. 更改`config/environments/相应环境/server.json` 中的 `host` 为你的子目录地址，如 `leeapps.cn/api/`\n\n## 实际使用\n\n1. 首次安装使用mysql数据库时，必须`yarn develop`来运行才能创建管理员登陆帐号\n2. 进入管理页会加载比较久，主要资源js文件太大，在`build`目录下有个8.5M的js文件，(启用gzip后为5.66M, 在````./config/environments/**/response.json`````````)而安装更多其他插件时则不太影响，整个build目录足足28M多（未启动gzip压缩）；\n3. `角色和权限` 可以配置所有接口的使用权限\n4. 目测 `strapi` 提供的 第三方用户授权是面向接口内容的用户的，可以在`角色和权限`中的提供者内配置或添加自己的第三方用户授权，注意不是管理员用户。\n",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2020-02-03T16:39:17+08:00",
				"created_by": "",
				"updated_at": "2020-02-19T15:34:31+08:00",
				"updated_by": "",
				"published_at": "2020-02-03T16:39:17+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqsv0000esu34n388i1r",
				"title": "",
				"html": "<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>",
				"featured": 0,
				"page": 1,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2020-02-16T09:49:51+08:00",
				"created_by": "",
				"updated_at": "2019-04-20T18:16:27+08:00",
				"updated_by": "",
				"published_at": "2020-02-16T09:49:51+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawqsy0001esu3gpfmdymd",
				"title": "",
				"html": "sterne.me",
				"featured": 0,
				"page": 1,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2020-02-16T09:49:51+08:00",
				"created_by": "",
				"updated_at": "2019-04-20T18:16:27+08:00",
				"updated_by": "",
				"published_at": "2020-02-16T09:49:51+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawr5y009hesu3heyydu6h",
				"title": "web-worker",
				"html": "\n# [web worker 实践](https://gitee.com/sternelee/example-worker)\n\n#### 介绍\n\n通过使用Web Workers，Web应用程序可以在独立于主线程的后台线程中，运行一个脚本操作。这样做的好处是可以在独立线程中执行费时的处理任务，从而允许主线程（通常是UI线程）不会因此被阻塞/放慢，从页实现多线程。\n\n主线程 => 创建 `worker` (`new Worker`(同源`js`链接)) -> 发送通知`postMessage` -> 接收通知`onmessage` -> 关闭`close`\n\n`worker`线程 => 程序逻辑 -> 接收命令`onmessage` -> 处理数据 -> 发送通知`postMessage` -> 关闭`terminate`\n\n#### 不可使用点\n\n1. 与主线程不在同一个上下文\n2. 不可以操作 DOM，一切与 DOM 操作相关的函数、类都不能使用\n3. `window` 对象的某些属性和方法, 重点注意 `XMLHttpRequest` 只会返回 `null`\n   > [Web Workers可以使用的函数和类](https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers)\n\n\n#### `Blob` 使用\n> 学习参考：[动态创建 Web Worker 实践指南](https://zhuanlan.zhihu.com/p/59981684)\n\n`Web Worker` 常用构造函数来加载 `js` 链接文件，而我们知道：\n1. `Blob`对象是一个不可变、原始数据的类文件对象，但不局限于 JavaScript 原生格式的数据，常被用来存储体量很大的二进制编码格式的数据，因此我们可以存入 `worker.js` 的逻辑代码。\n2. `URL.createObjectURL` 则可以创建链接。\n\n<!--more-->\n\n因此我们有了这样的例子：\n\n```javascript\nconst response = \"onmessage=function(e){postMessage('Worker: '+e.data);}\";\nconst blob = new Blob(\n  [response],\n  {type: \"application/javascript\"}\n);\nconst worker = new Worker(URL.createObjectURL(blob));\nworker.onmessage = (e) => {\n  console.log(\"Response: \" + e.data);\n};\n\nworker.postMessage(\"Test\");\n```\n\n\n#### `Promise` 实现\n> 学习参考: [使用 Web Worker 实现简单的非阻塞异步](https://segmentfault.com/a/1190000012563475)\n\n`setTimeout` 和 `Promise` 是阻塞异步的， 当然也包括 `await` 的方式，这要求主线程等待。\n在 `web worker` 中， `postMessage` 和 `onmessage` 是可以一一对应的，我们可以用一个唯一ID来匹配。\n\n```javascript\n\nconst flagMapping = {};\n\ndispatch(...args) {\n  const flag = new Date().getTime();\n  return new Promise((resolve, reject) => {\n    flagMapping[flag] = { resolve, reject };\n    this.worker.postMessage({flag, args});\n  });\n}\n\n// ... worker 内处理数据逻辑\n\n\n// 监听响应事件\nonmessageCallbback = (e) => {\n  const { falg, data } = e.data;\n  const { resolve, reject } = this.flagMapping[flag];\n  resolve(data);\n}\n\n```\n\n\n#### 动态创建 `web worker`\n\n通过以上的认识，我们可以创建一个类，构建 `postMessage` 和 `onmessage` 的接口，在初始化时传入 `worker.js` 的逻辑代码。\n\n##### 方式一： 传入字符串\n\n```javascript\nconst util = `\n{\n  add: function (num) {\n    return num + num\n  },\n  say: functin (name) {\n    return \"我的名字叫\" + name\n  }\n}\n\n`\n```\n\n##### 方式二： 传入函数\n\n原因： `Function.prototype.toString()`: 返回一个表示当前函数源代码的字符串\n\n```javascript\nconst util = (method, ...args) => {\n  if (method === 'add') {\n    return args[0] + args[1]\n  }\n  if (method === 'say') {\n    return '我的名字叫' + args[0]\n  }\n}\n```\n\n#### 难点：如何将 `js` 代码以字符串传入 `web worker`\n\n##### 方式一： `worker-loader` 以内联方式打包:\n\n```javascript\n{\n  test: /\\.worker\\.js$/,\n    use: {\n      loader: 'worker-loader',\n      options: { inline: true }\n    }\n}\n```\n\n##### 方式二： `webpack` 以字符串方式加载js文件:\n\n```javascript\nimport file from '!raw-loader!file.js'\n```\n\n#### 方式三：`nodejs` 使用 `fs` 在读取编译后文件以字符串输出\n\n\n#### 内联`Blob` 和 `Promise` 的不足\n\n1. `Promise` 只能响应处理对应的单条信息，持续响应还是需要 `onmessage` 原生方式 或 `Proxy`代理等方式实现\n2. 内联`Blob`增加了项目初始大小\n\n\n##### 扩展阅读：\n\n1. [石墨表格之 Web Worker 应用实战](https://juejin.im/entry/59b89c88f265da0664641382)\n2. [webpack使用](https://www.cnblogs.com/tugenhua0707/p/11253937.html)\n\n### 最佳实践： 谷歌出品的 [comlink](https://github.com/GoogleChromeLabs/comlink)\n\n使用 `Promise` 和 `Proxy` 实现\n\n实践demo: [gcid.ts](https://gitee.com/sternelee/example-worker/blob/master/gcid.ts) 和 [gcid.worker.ts](https://gitee.com/sternelee/example-worker/blob/master/gcid.worker.ts)\n\n注意：`proxy` 要与对应的方法传回调方法，不要传对象\n\n### 扩展阅读： web worker 加载 webWebAssembly\n\n1. [webassembly-web-workers](https://dzone.com/articles/webassembly-web-workers)\n2. [Using WebAssembly with Web Workers](https://www.sitepen.com/blog/using-webassembly-with-web-workers/)",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2020-07-13T12:14:34+08:00",
				"created_by": "",
				"updated_at": "2020-07-13T12:17:11+08:00",
				"updated_by": "",
				"published_at": "2020-07-13T12:14:34+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawr6a009mesu31jzb5ift",
				"title": "WebAssembly动态内存分配",
				"html": "\n\n### [WebAssembly动态内存分配](https://www.xspdf.com/resolution/56019003.html)\n\n**WebAssembly中的内存管理：C和Rust指南**，动态内存分配是指通过一组C语言以C编程语言对动态内存分配执行手动内存管理。对于WebAssembly中动态内存分配的简单示例，让我们考虑一下记录数据类型，该数据类型具有与之关联的任意字段。例如，说一个ID，一个X和一个Y值。为了动态创建这些记录之一，我们将使用createRecord函数，该函数将其字段作为其参数。\n\n**WebAssembly和动态内存**，我们演示了如何构建依赖于malloc的WebAssembly模块，在运行时链接到预构建的malloc实现中，使用JS绑定技巧来使WebAssembly模块不了解有关对象大小的任何线索在内存中创建。WebAssembly需要分配内存。我们必须手动编写内存的分配和释放。在此步骤中，我们发送数组的长度并分配该内存。这将为我们提供一个指向内存位置的指针。\n\n**使用中的Malloc在WebAssembly中分配动态内存**，了解WebAssembly的内存模型在反向功能中将很重要，最初，此堆已用输入数组填充。WebAssembly线性内存对象的大小以页为单位。每页为65536（2 ^ 16）字节。在WebAssembly版本1中，线性内存最多可以有65536页，总共2 ^ 32字节（4吉字节）。除了该页数限制，当前所有内存指令都将i32类型用作内存索引。\n\n<!--more-->\n\n### Web装配体内存\n\n**`WebAssembly.Memory`**， WebAssembly.Memory对象是可调整大小的ArrayBuffer或SharedArrayBuffer，用于保存由A访问的内存的原始字节。JavaScript或WebAssembly代码创建的内存将可以从JavaScript和WebAssembly访问并可变。语法new WebAssembly.Memory（memoryDe​​scriptor）; 参数memoryDe​​scriptor一个对象，可以包含以下成员：initial WebAssembly内存的初始大小，以WebAssembly页面为单位。maximum可选允许WebAssembly内存增加到的最大大小，以WebAssembly页面为单位。如果存在，则最大值参数用作提示\n\n**WebAssembly.Memory（）构造函数**， WebAssembly.Memory（）构造函数创建一个新的Memory对象，其缓冲区属性是可调整大小的ArrayBuffer或SharedArrayBuffer。WebAssembly模块的memory部分是线性内存的向量。\n\n**WebAssembly中的内存（以及为什么它比您想象的更安全）**，什么是内存对象？实例化WebAssembly模块时，它需要一个内存对象。您可以创建一个新的WebAssembly。WebAssembly线性内存对象的大小以页为单位。每页为65536（2 ^ 16）字节。在WebAssembly版本1中，线性内存最多可以有65536页，总共2 ^ 32字节（4吉字节）。除了该页数限制，当前所有内存指令都将i32类型用作内存索引。\n\n### WebAssembly内存缓冲区W\n\n**`WebAssembly.Memory.prototype.buffer`**， WebAssembly.Memory对象的缓冲区原型属性返回内存中包含的缓冲区。WebAssembly.Memory对象的buffer prototype属性返回包含在内存中的缓冲区。示例使用缓冲区。下面的示例（请参阅GitHub上的memory.html，并实时查看它）使用WebAssembly.instantiateStreaming（）方法获取并实例化已加载的memory.wasm字节代码，同时导入在上一行中创建的内存。然后它将一些值存储在该内存中，然后导出一个函数并使用它求和一些值。\n\n`WebAssembly.Memory`，其buffer属性将返回ArrayBuffer。var memory = new WebAssembly.Memory（{initial：WebAssembly.Memory（）构造函数创建一个新的Memory对象，其缓冲区属性是可调整大小的ArrayBuffer或SharedArrayBuffer，用于保存WebAssembly实例访问的内存的原始字节。语法new WebAssembly.Memory（memoryDe​​scriptor）;参数memoryDe​​scriptor可以包含以下成员的对象：初始值的初始大小，可以从JavaScript和WebAssembly访问和更改。\n\n**`WebAssembly.memory.buffer-JavaScript`**，然后将一些值存储在该内存中，然后导出一个函数并将其用于求和一些值。WebAssembly.instantiateStreaming（fetch（'memory.wasm'），概述。WebAssembly的另一个功能是它的线性内存。线性内存是无符号字节的连续缓冲区，可以由Wasm和Javascript读取和存储。换句话说，Wasm内存是可扩展的字节数组，Javascript和Wasm可以同步读取和修改这些字节；线性内存可以用于很多事情，其中​​之一是在Wasm和Javascript之间来回传递值。\n\n### Web汇编线性存储器\n\n**WebAssembly线性内存**，概述。WebAssembly的另一个功能是它的线性内存。线性内存是无符号字节的连续缓冲区，可以从WebAssembly线性内存概述中读取并存储到其中。WebAssembly的另一个功能是它的线性内存。线性内存是无符号字节的连续缓冲区，Wasm和Javascript均可读取和存储它们。换句话说，Wasm内存是可扩展的字节数组，Javascript和Wasm可以同步读取和修改这些字节。\n\n**使用WebAssembly JavaScript API，线性内存**。线性存储器是连续的，可字节寻址的存储器范围，范围从偏移量0扩展到可变的存储器大小。var wasmModule = new WebAssembly.Module（wasmCode）; var wasmInstance = new WebAssembly.Instance（wasmModule，wasmImports）; //获取数组的偏移量var offset = wasmInstance.exports.getData（）; //在指向该数组的内存上创建一个视图var linearMemory = new Uint32Array（wasmInstance.exports.memory.buffer，offset，10）; //用一些数据填充（var i = 0; i <linearMemory.length; i ++）{linearMemory [i] = i; } //更改WebAssembly模块中的数组\n\n`design/Semantics.md at master · WebAssembly/design · GitHub`，线性内存模型。线性内存模型是一种内存寻址技术，其中通过提供线性内存将内存组织在一个具有传染性的单一传染性中，我听说WebAssembly的安全性。我想知道线性存储器包含什么？wasm堆栈和堆位于此内存空间中吗？如果是，我认为wasm堆栈和胶水代码堆栈（例如js python等）是分开的，对吗？我可以通过使用导入表来了解wasm的内存安全性。\n\n### Wasm内存管理\n\nWebAssembly中的内存管理：C和Rust指南， Webassembly怎么样？在WebAssembly中，功能从不由其地址表示，而由功能表中的索引表示。这并没有结合磁盘和内存的优势。SQL，HA，群集，事务记录。灵活，具有独特的功能组合。经过验证的最快和最先进的内存DBMS。\n\nWebAssembly中的内存（以及为什么它比您想象的更安全）有助于使内存管理安全。在JS和WebAssembly之间传递值。因为这只是一个JavaScript对象，所以这意味着有多个优化选项，并且这是保留用于内存管理的实用程序的最有效方法。-s WASM = 1-通知编译器输出WebAssembly。请改用0发出asm.js。-s EXPORTED_FUNCTIONS-将函数从C代码公开到所生成的JavaScript模块。\n\n`WebAssembly.Memory`， WebAssembly.Memory对象是可调整大小的ArrayBuffer或SharedArrayBuffer，用于保存WASM访问的内存的原始字节：内存管理＃cpp＃webassembly＃javascript。shaafiee 7月2日・读了1分钟\n\n#### Emscripten malloc脚本分配\n\n与代码交互，在这里，如果callSomething调用malloc并返回分配的指针，并且该malloc增加了内存，则您将无法读取返回的数据，除非您使用Emscripten Malloc Emscripten项目从llvmR生成WebAssembly代码。目前，只有一个线性内存段需要手动。对于编译器编写者，在WebAssembly中具有Malloc / Freeimplementation很有用。\n\n`Sable/emscripten_malloc: Contains an extracted Malloc`。Emscripten项目从llvmR生成WebAssembly代码。由于WebAssembly目前只有一个线性内存段。在Emscripten中，malloc的C ++版本在JavaScript中转换为Module._malloc（）; 同样，Module._free（）与C ++的free（）相同。\n\n`Module._malloc is not a function · Issue #6882 · emscripten-core `，因此无需使用malloc，只需将数组直接复制到HEAPU8中即可，因为已经为其创建了空间。Emscripten似乎是使用LLVM到WebAssembly的完整编译器工具链，特别关注速度，大小和Web平台。移植将用C或C ++或使用LLVM的任何语言编写的现有项目编译到浏览器，Node.js或wasm运行时。\n\n#### Function import requires a callable 函数导入需要可调用\n\n`WebAssembly LinkError: function import requires a callable`，您没有在imports.env中提供log（）的实现。Object.assign（imports.env，{memoryBase：0，tableBase：0，memory：new WebAssembly LinkError：函数导入需要可调用。询问3年5个月前。活动3年5个月前。已查看5k乘6。2。\n\n`function import requires a callable · Issue #10074`， LinkError：WebAssembly实例化：导入＃0 module =“ env” function =“ sbrk”错误：函数导入需要可调用＃10074。关闭。wasm错误：函数导入要求在1.12 beta2＃30052中可调用。advanderveer关闭了本期杂志，2019年2月1日·3条评论\n\n`function import requires a callable · Issue #6024`， LinkError：WebAssembly实例化：导入＃1 module =“ env” function =“ setTempRet0”错误：函数导入需要可调用＃6024。关闭。setTempRet0是该模块中的导入，您必须提供该导入。从JS跨到wasm并返回时，这是为某些64位操作设置的临时值。例如，当wasm向JS返回64位值时，它将返回低32位，并使用高32位调用setTempRet0。\n\n### Web组装自由内存\n\nWebAssembly·V8中最多有4GB的内存， WebAssembly.Memory对象是可调整大小的ArrayBuffer或SharedArrayBuffer，用于保存由WebAssembly模块访问的内存的原始字节，不会对在内存中创建的对象的大小有任何了解。WebAssembly需要分配内存。我们必须手动编写内存的分配和释放。在此步骤中，我们发送数组的长度并分配该内存。这将为我们提供一个指向内存位置的指针。\n\nWebAssembly.Memory， WebAssembly不提供任何释放内存的指令，只有增加分配大小的能力。实际上，当我使用Webassembly进行编译时，我使用以下命令：emcc llab / *。c client_side / *。c -s WASM = 1 -s ASSERTIONS = 1 -s ALLOW_MEMORY_GROWTH = 1 -s USE_PTHREADS = 1 -s WASM_MEM_MAX = 4GB -s PTHREAD_POOL_SIZE = 4-预加载文件数据--no-heap-copy -O3 -lm -lpthread -o index.js在执行此功能期间，客户端应创建一些线程并执行一些操作。\n\n如何释放由WebAssembly中的内存管理中公开的Rust代码分配的内存：来宾可以使用标准的free（）函数来释放C和Rust程序员指南。或者，即使保留了指针后面的内存，也可能需要进行新的分配来增加WebAssembly内存。当通过JavaScript API或相应的memory.grow指令扩展WebAssembly.Memory时，它将使现有ArrayBuffer以及从其支持的所有视图无效。让我使用DevTools（或Node.js）控制台来演示此行为：> memory = new WebAssembly。内存（{initial：1}）内存{}>视图=新的Uint8Array（内存缓冲区，42，10）\n\n### Rust wasm线性内存\n\nWebAssembly线性内存，线性内存可用于许多事情，其中​​之一是在Wasm和Javascript之间来回传递值。在锈蚀中，诸如wasm-bindgen之类的工具，线性内存可用于许多事情，其中​​之一是在Wasm和Javascript之间来回传递值。在rust中，像wasm-bindgen这样的工具是wasm-pack工作流程的一部分，它抽象了线性内存，并允许在rust和Javascript之间使用本机数据结构。但是在此示例中，我们将使用简单的字节（无符号8位整数）缓冲区和指针（Wasm内存阵列索引）作为来回传递内存并展示概念的简单方法。\n\n如何从编译为的rust代码访问线性内存，但是，我试图在rust-native / rust-wasm边界上传递一些复杂的结构：在'序列化为线性内存从wasm模块中访问线性内存，您只需要从内存中进行定期加载即可。例如，假设在rust-native中，您将数据复制到某个地址data_ptr，该地址在线性内存中具有计数字节，并在rust-wasm端调用函数process_data。\n\nWebAssembly中的内存模型-DEV，标有rust，javascript，webdev，初学者。WebAssembly模块的内存部分是线性内存的向量。在Rust中生成（和分配）字符串，然后将wasm-bindgen将其转换为有效的JavaScript字符串将导致不必要的Universe单元副本。由于JavaScript代码已经知道Universe的宽度和高度，并且可以读取直接构成单元格的WebAssembly的线性内存，因此，我们将修改render方法以将指针返回到cells数组的开头。\n\n#### 处理SSI文件时出错\n\nWasm导入内存\nWebAssembly.Memory，使用WebAssembly.instantiateStreaming（）方法输入字节字节代码，同时导入上一行中创建的内存。然后，它存储window.Module = {} //用20页初始化内存（20 * 64KiB = 1.25 MiB）const memory = new WebAssembly.Memory（{initial：20}）; const import = {env：{memory：memory}}; //在实例化时，我们传递导入对象fetchAndInstantiate（“ ./ string-passing.wasm”，imports）.then（mod => {Module.memory = memory; Module.alloc = mod.exports.alloc; Module.dealloc = mod.exports.dealloc; Module.dealloc_str = mod.exports.dealloc_str; Module.roundtrip = function（str）{let buf = newString\n\n导入WASM内存，（键入$ FUNCSIG $ vi（func（参数i32）。））（导入“ env”“内存”（内存。$ mem 1））。（导入“ env”“免费”（func $ free。（参数i32）））。（import“ env”“ malloc”（func。看来，奇怪的是，wasm模块导入其内存似乎使这成为一种利基功能，但是随着WebAssembly线程提案的到来，我认为这是更常见的事情之一要做的是导入内存，以确保可以在所有线程上的所有wasm实例之间共享完全相同的SharedArrayBuffer。\n\n演示：导入内存，具有此属性的WebAssembly模块将不会导出自己的内存缓冲区，而是从环境中导入内存，让调用者对其进行设置。\n```javascript\nvar wasmModule = new WebAssembly.Module(wasmCode);\nvar wasmInstance = new WebAssembly.Instance(wasmModule, wasmImports);\n//获取数组的偏移量\nvar offset = wasmInstance.exports.getData();\n//在指向该数组的内存上创建一个视图\nvar linearMemory = new Uint32Array(wasmInstance.exports.memory.buffer, offset, 10);\n//用一些数据填充\nfor (var i = 0; i < linearMemory.length; i++) { linearMemory[i] = i; }\n//更改WebAssembly模块中的数组\n```\n\n##### 处理SSI文件时出错\n\nWasm C malloc\n如何在Wasm中实现“ malloc”， Emscripten不仅是从C / C ++到Wasm的编译器，而且包括Web运行时和专门为Emscripten libc设计的自己的libc的完整工具链是对musl的重大修改。它实现/模拟了多种标准C库（包括malloc，sbrk）和POSIX API（如pthread和BSD套接字），除了某些在Wasm环境中没有用的exec和fork这样的API。通过使用emcc命令，您可以直接将这些libc端口链接起来。\n\nmaxkl / wasm-malloc：WebAssembly的malloc / free，编译build / main.wasm src / malloc.c src / test.c。可以使用预处理器宏MALLOC_DEBUG启用调试日志记录。这还添加了功能，我们演示了如何构建依赖于malloc的WebAssembly模块，并在运行时使用JS绑定技巧处理两个WebAssembly模块之间的循环引用，从而链接到预构建的malloc实现。然后，我们优化加载过程，以确保并行获取这些模块。\n\nSable / emscripten_malloc：包含一个提取的Malloc， entry.c包含用于用Emscripten编译并提取该代码的C代码。用于编译的命令：emcc entry.c -s WASM = 1 -o entry.js -s您可以将walloc.c链接到程序中，只需将其添加到链接行中即可，如上所述。尺寸。生成的wasm文件约为2 kB（未压缩）。Walloc不是那里最小的分配器。一个永不释放的简单碰撞指针分配器是您可以拥有的最快的东西。\n\n##### 处理SSI文件时出错\n### _Emscripten_resize_heap\n\n如何监控wasm内存？（中止无法扩大内存， abortOnCannotGrowMemory @ render.js：6965 _emscripten_resize_heap @ render.js：6967 _sbrk _malloc。Module._malloc @ render.js：8726您好，我使用的是pthreads +固定内存，该内存在JS胶水代码中自动初始化我的代码重复处理并显示图像，并且当图像数量达到\n\n`abortOnCannotGrowMemory`具有错误的类型签名`_，也似乎缺少_emscripten_get_heap_size和_emscripten_resize_heap。这些甚至不在原始wasm中导入。使用Emscripten v 1.38.43，我正在编译C代码。出于优化原因，我精简了生成的JS粘合代码，并最小化了代码大小。这样做时，我发现JS调用\n\nWebAssembly中的内存访问基础·ariya.io，长度；}，_emscripten_resize_heap：function（size）{return false; // //总是失败}，_emscripten_memcpy_big：function（dest，src，count）{ + JS + Wasm：emcc main.cpp [库]-",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2021-01-12T13:33:04+08:00",
				"created_by": "",
				"updated_at": "2021-01-12T13:50:56+08:00",
				"updated_by": "",
				"published_at": "2021-01-12T13:33:04+08:00",
				"published_by": ""
			},
			{
				"id": "ckjwawr66009jesu3havg1l72",
				"title": "fe-build-前端打包新趋势",
				"html": "\n\n### (`Parcel`)[https://zh.parceljs.org/getting_started.html]\n\n### `rollup`\n\n### (`esbuild`)[https://esbuild.github.io/getting-started/]\n\n毫不奇怪，大多数JavaScript构建工具都是用JavaScript编写的。速度通常是可以接受的，但是编译后的应用程序总是会更快。 esbuild是另一个JavaScript模块捆绑器，但是它是用Go编写的。它声称是：\n\n1. 比`Rollup.js`快100倍\n2. 比`Webpack 5`快173倍\n3. 比(`Parcel(v2)`)[https://v2.parceljs.org/] 快294倍\n\nesbuild在没有高速缓存的情况下达到了这种速度，它仍然支持ES6模块，CommonJS模块，TypeScript，JSX，摇树，源映射，压缩，插件，Node.js捆绑，完整的API等。\n\n### `lerna`",
				"featured": 0,
				"page": 0,
				"status": "published",
				"visibility": "public",
				"author_id": "",
				"created_at": "2021-01-12T14:03:31+08:00",
				"created_by": "",
				"updated_at": "2021-01-12T14:14:37+08:00",
				"updated_by": "",
				"published_at": "2021-01-12T14:03:31+08:00",
				"published_by": ""
			}
		],
		"users": [
			{
				"id": "autohome-fe",
				"name": "autohome-fe",
				"slug": "autohome-fe",
				"email": "autohome-fe@autohome.com.cn",
				"status": "active",
				"visibility": "public"
			}
		],
		"tags": [
			{
				"id": "ckjwawqws000aesu3226y8f4y",
				"name": "吉他",
				"slug": "ji-ta",
				"visibility": "public"
			},
			{
				"id": "ckjwawqxk000vesu3exopa3v6",
				"name": "生活",
				"slug": "sheng-huo",
				"visibility": "public"
			},
			{
				"id": "ckjwawqxr0013esu3en1qetgj",
				"name": "前端",
				"slug": "qian-duan",
				"visibility": "public"
			},
			{
				"id": "ckjwawqz80038esu361qoaojt",
				"name": "笔记",
				"slug": "bi-ji",
				"visibility": "public"
			},
			{
				"id": "ckjwawqxx001desu3fhhm80hl",
				"name": "ideas",
				"slug": "ideas",
				"visibility": "public"
			},
			{
				"id": "ckjwawqy5001nesu3474ofkla",
				"name": "h5",
				"slug": "h5",
				"visibility": "public"
			},
			{
				"id": "ckjwawqya001vesu32xy53n37",
				"name": "WebAPP",
				"slug": "WebAPP",
				"visibility": "public"
			},
			{
				"id": "ckjwawqyi0029esu37s2vd3vs",
				"name": "Music",
				"slug": "Music",
				"visibility": "public"
			},
			{
				"id": "ckjwawqyp002hesu332ywfowb",
				"name": "Nodejs",
				"slug": "Nodejs",
				"visibility": "public"
			},
			{
				"id": "ckjwawqza003cesu3da7ihwl7",
				"name": "JS",
				"slug": "JS",
				"visibility": "public"
			},
			{
				"id": "ckjwawqzg003mesu33t1h0kd2",
				"name": "ReactJS",
				"slug": "ReactJS",
				"visibility": "public"
			},
			{
				"id": "ckjwawqzm003uesu36zzs45h3",
				"name": "web",
				"slug": "web",
				"visibility": "public"
			},
			{
				"id": "ckjwawr05004mesu35e6o5cao",
				"name": "javascript",
				"slug": "javascript",
				"visibility": "public"
			},
			{
				"id": "ckjwawr09004tesu3027u8xoc",
				"name": "CSS3",
				"slug": "CSS3",
				"visibility": "public"
			},
			{
				"id": "ckjwawr0z005uesu34qj0fnta",
				"name": "hexo",
				"slug": "hexo",
				"visibility": "public"
			},
			{
				"id": "ckjwawr130060esu3dlofak6h",
				"name": "github",
				"slug": "github",
				"visibility": "public"
			},
			{
				"id": "ckjwawr150065esu3cmejenvf",
				"name": "git",
				"slug": "git",
				"visibility": "public"
			},
			{
				"id": "ckjwawr18006aesu3bka33fwc",
				"name": "jsvascript",
				"slug": "jsvascript",
				"visibility": "public"
			},
			{
				"id": "ckjwawr1a006fesu3coce1z3x",
				"name": "webapi",
				"slug": "webapi",
				"visibility": "public"
			},
			{
				"id": "ckjwawr1c006oesu380pzdd25",
				"name": "工作",
				"slug": "gong-zuo",
				"visibility": "public"
			},
			{
				"id": "ckjwawr1d006resu31ostfbe9",
				"name": "生活",
				"slug": "sheng-huo",
				"visibility": "public"
			},
			{
				"id": "ckjwawr1e006uesu37pl6a9z6",
				"name": "作品",
				"slug": "zuo-pin",
				"visibility": "public"
			},
			{
				"id": "ckjwawr1f006yesu331cv4mbh",
				"name": "react",
				"slug": "react",
				"visibility": "public"
			},
			{
				"id": "ckjwawr1g0071esu332p70bzk",
				"name": "H5",
				"slug": "H5",
				"visibility": "public"
			},
			{
				"id": "ckjwawr1h0077esu3ctqe8se4",
				"name": "React",
				"slug": "React",
				"visibility": "public"
			},
			{
				"id": "ckjwawr1j007desu31v7bdvkt",
				"name": "ReactNative",
				"slug": "ReactNative",
				"visibility": "public"
			},
			{
				"id": "ckjwawr1k007kesu3duhm5w9p",
				"name": "Node.js",
				"slug": "Node.js",
				"visibility": "public"
			},
			{
				"id": "ckjwawr1k007nesu3grp01d8h",
				"name": "vagrant",
				"slug": "vagrant",
				"visibility": "public"
			},
			{
				"id": "ckjwawr1m007tesu30wtb3rwd",
				"name": "前端",
				"slug": "qian-duan",
				"visibility": "public"
			},
			{
				"id": "ckjwawr1p0085esu316x373pr",
				"name": "JavaScript",
				"slug": "JavaScript",
				"visibility": "public"
			},
			{
				"id": "ckjwawr1q0089esu3dzddd4yl",
				"name": "记录",
				"slug": "ji-lu",
				"visibility": "public"
			},
			{
				"id": "ckjwawr1q008cesu3a5sqhove",
				"name": "nodejs",
				"slug": "nodejs",
				"visibility": "public"
			},
			{
				"id": "ckjwawr1s008iesu3g550abj6",
				"name": "vue",
				"slug": "vue",
				"visibility": "public"
			},
			{
				"id": "ckjwawr1u008oesu365hvdptq",
				"name": "pwa",
				"slug": "pwa",
				"visibility": "public"
			},
			{
				"id": "ckjwawr1z0094esu3bafx1xul",
				"name": "windows",
				"slug": "windows",
				"visibility": "public"
			},
			{
				"id": "ckjwawr210099esu3dl875gfw",
				"name": "开发",
				"slug": "kai-fa",
				"visibility": "public"
			},
			{
				"id": "ckjwawr22009desu37yv8er1f",
				"name": "后端api",
				"slug": "hou-duan-api",
				"visibility": "public"
			},
			{
				"id": "ckjwawr6d009oesu32pgd8oxu",
				"name": "node",
				"slug": "node",
				"visibility": "public"
			},
			{
				"id": "ckjwawr6i009sesu33q0v4y9n",
				"name": "cli",
				"slug": "cli",
				"visibility": "public"
			},
			{
				"id": "ckjwawr6l009uesu32pv49k35",
				"name": "webassembly",
				"slug": "webassembly",
				"visibility": "public"
			}
		],
		"posts_tags": [
			{
				"post_id": "ckjwawqwg0004esu354vicb8x",
				"tag_id": "ckjwawqwt000besu33a677oai"
			},
			{
				"post_id": "ckjwawqwg0004esu354vicb8x",
				"tag_id": "ckjwawqws000aesu3226y8f4y"
			},
			{
				"post_id": "ckjwawqwm0007esu35aqhhufu",
				"tag_id": "ckjwawqwt000besu33a677oai"
			},
			{
				"post_id": "ckjwawqwm0007esu35aqhhufu",
				"tag_id": "ckjwawqws000aesu3226y8f4y"
			},
			{
				"post_id": "ckjwawqwo0008esu3fpq4gai1",
				"tag_id": "ckjwawqwt000besu33a677oai"
			},
			{
				"post_id": "ckjwawqwo0008esu3fpq4gai1",
				"tag_id": "ckjwawqws000aesu3226y8f4y"
			},
			{
				"post_id": "ckjwawqwq0009esu3dczxbp22",
				"tag_id": "ckjwawqxl000wesu339tzdbl0"
			},
			{
				"post_id": "ckjwawqwq0009esu3dczxbp22",
				"tag_id": "ckjwawqxs0014esu3dvzl5gn7"
			},
			{
				"post_id": "ckjwawqwq0009esu3dczxbp22",
				"tag_id": "ckjwawqxk000vesu3exopa3v6"
			},
			{
				"post_id": "ckjwawqwu000desu307ep0tz1",
				"tag_id": "ckjwawqwt000besu33a677oai"
			},
			{
				"post_id": "ckjwawqwu000desu307ep0tz1",
				"tag_id": "ckjwawqws000aesu3226y8f4y"
			},
			{
				"post_id": "ckjwawqwx000eesu30dyob0j4",
				"tag_id": "ckjwawqwt000besu33a677oai"
			},
			{
				"post_id": "ckjwawqwx000eesu30dyob0j4",
				"tag_id": "ckjwawqws000aesu3226y8f4y"
			},
			{
				"post_id": "ckjwawqx3000jesu3623pcegl",
				"tag_id": "ckjwawqxx001desu3fhhm80hl"
			},
			{
				"post_id": "ckjwawqx3000jesu3623pcegl",
				"tag_id": "ckjwawqy5001nesu3474ofkla"
			},
			{
				"post_id": "ckjwawqx3000jesu3623pcegl",
				"tag_id": "ckjwawqya001vesu32xy53n37"
			},
			{
				"post_id": "ckjwawqx3000jesu3623pcegl",
				"tag_id": "ckjwawqxr0013esu3en1qetgj"
			},
			{
				"post_id": "ckjwawqx8000lesu34y7hebuw",
				"tag_id": "ckjwawqwt000besu33a677oai"
			},
			{
				"post_id": "ckjwawqx8000lesu34y7hebuw",
				"tag_id": "ckjwawqxl000wesu339tzdbl0"
			},
			{
				"post_id": "ckjwawqx8000lesu34y7hebuw",
				"tag_id": "ckjwawqyi0029esu37s2vd3vs"
			},
			{
				"post_id": "ckjwawqx8000lesu34y7hebuw",
				"tag_id": "ckjwawqxk000vesu3exopa3v6"
			},
			{
				"post_id": "ckjwawqxf000qesu3egkt8ys8",
				"tag_id": "ckjwawqwt000besu33a677oai"
			},
			{
				"post_id": "ckjwawqxf000qesu3egkt8ys8",
				"tag_id": "ckjwawqws000aesu3226y8f4y"
			},
			{
				"post_id": "ckjwawqxi000tesu36eoa3f27",
				"tag_id": "ckjwawqwt000besu33a677oai"
			},
			{
				"post_id": "ckjwawqxi000tesu36eoa3f27",
				"tag_id": "ckjwawqxr0013esu3en1qetgj"
			},
			{
				"post_id": "ckjwawqxm000yesu3h2b2cise",
				"tag_id": "ckjwawqwt000besu33a677oai"
			},
			{
				"post_id": "ckjwawqxm000yesu3h2b2cise",
				"tag_id": "ckjwawqws000aesu3226y8f4y"
			},
			{
				"post_id": "ckjwawqxp0011esu398ergoiv",
				"tag_id": "ckjwawqwt000besu33a677oai"
			},
			{
				"post_id": "ckjwawqxp0011esu398ergoiv",
				"tag_id": "ckjwawqxr0013esu3en1qetgj"
			},
			{
				"post_id": "ckjwawqxt0016esu324tu547i",
				"tag_id": "ckjwawqwt000besu33a677oai"
			},
			{
				"post_id": "ckjwawqxt0016esu324tu547i",
				"tag_id": "ckjwawqws000aesu3226y8f4y"
			},
			{
				"post_id": "ckjwawqxv0019esu3hzvzfimo",
				"tag_id": "ckjwawqwt000besu33a677oai"
			},
			{
				"post_id": "ckjwawqxv0019esu3hzvzfimo",
				"tag_id": "ckjwawqws000aesu3226y8f4y"
			},
			{
				"post_id": "ckjwawqxy001eesu359yu9w4y",
				"tag_id": "ckjwawqxx001desu3fhhm80hl"
			},
			{
				"post_id": "ckjwawqxy001eesu359yu9w4y",
				"tag_id": "ckjwawqy5001nesu3474ofkla"
			},
			{
				"post_id": "ckjwawqxy001eesu359yu9w4y",
				"tag_id": "ckjwawqya001vesu32xy53n37"
			},
			{
				"post_id": "ckjwawqxy001eesu359yu9w4y",
				"tag_id": "ckjwawqyp002hesu332ywfowb"
			},
			{
				"post_id": "ckjwawqxy001eesu359yu9w4y",
				"tag_id": "ckjwawqxr0013esu3en1qetgj"
			},
			{
				"post_id": "ckjwawqy0001hesu33rnldxe7",
				"tag_id": "ckjwawqwt000besu33a677oai"
			},
			{
				"post_id": "ckjwawqy0001hesu33rnldxe7",
				"tag_id": "ckjwawqws000aesu3226y8f4y"
			},
			{
				"post_id": "ckjwawqy3001lesu3gjx1c47z",
				"tag_id": "ckjwawqwt000besu33a677oai"
			},
			{
				"post_id": "ckjwawqy3001lesu3gjx1c47z",
				"tag_id": "ckjwawqws000aesu3226y8f4y"
			},
			{
				"post_id": "ckjwawqy6001pesu34uqcah1k",
				"tag_id": "ckjwawqwt000besu33a677oai"
			},
			{
				"post_id": "ckjwawqy6001pesu34uqcah1k",
				"tag_id": "ckjwawqws000aesu3226y8f4y"
			},
			{
				"post_id": "ckjwawqy9001tesu3ba1o4rkm",
				"tag_id": "ckjwawqwt000besu33a677oai"
			},
			{
				"post_id": "ckjwawqy9001tesu3ba1o4rkm",
				"tag_id": "ckjwawqws000aesu3226y8f4y"
			},
			{
				"post_id": "ckjwawqyb001xesu30pamgdo8",
				"tag_id": "ckjwawqwt000besu33a677oai"
			},
			{
				"post_id": "ckjwawqyb001xesu30pamgdo8",
				"tag_id": "ckjwawqws000aesu3226y8f4y"
			},
			{
				"post_id": "ckjwawqyd0020esu38gv8gief",
				"tag_id": "ckjwawqwt000besu33a677oai"
			},
			{
				"post_id": "ckjwawqyd0020esu38gv8gief",
				"tag_id": "ckjwawqws000aesu3226y8f4y"
			},
			{
				"post_id": "ckjwawqyf0024esu32ufw5lta",
				"tag_id": "ckjwawqwt000besu33a677oai"
			},
			{
				"post_id": "ckjwawqyf0024esu32ufw5lta",
				"tag_id": "ckjwawqws000aesu3226y8f4y"
			},
			{
				"post_id": "ckjwawqyh0027esu3g1vzfvf6",
				"tag_id": "ckjwawqwt000besu33a677oai"
			},
			{
				"post_id": "ckjwawqyh0027esu3g1vzfvf6",
				"tag_id": "ckjwawqws000aesu3226y8f4y"
			},
			{
				"post_id": "ckjwawqyj002besu3bjjk10fy",
				"tag_id": "ckjwawqwt000besu33a677oai"
			},
			{
				"post_id": "ckjwawqyj002besu3bjjk10fy",
				"tag_id": "ckjwawqws000aesu3226y8f4y"
			},
			{
				"post_id": "ckjwawqyl002eesu388siemcx",
				"tag_id": "ckjwawqwt000besu33a677oai"
			},
			{
				"post_id": "ckjwawqyl002eesu388siemcx",
				"tag_id": "ckjwawqws000aesu3226y8f4y"
			},
			{
				"post_id": "ckjwawqyq002iesu36h1caw7n",
				"tag_id": "ckjwawqwt000besu33a677oai"
			},
			{
				"post_id": "ckjwawqyq002iesu36h1caw7n",
				"tag_id": "ckjwawqws000aesu3226y8f4y"
			},
			{
				"post_id": "ckjwawqys002lesu3b53w8xlw",
				"tag_id": "ckjwawqwt000besu33a677oai"
			},
			{
				"post_id": "ckjwawqys002lesu3b53w8xlw",
				"tag_id": "ckjwawqws000aesu3226y8f4y"
			},
			{
				"post_id": "ckjwawqyu002oesu3g6j4cmvp",
				"tag_id": "ckjwawqwt000besu33a677oai"
			},
			{
				"post_id": "ckjwawqyu002oesu3g6j4cmvp",
				"tag_id": "ckjwawqws000aesu3226y8f4y"
			},
			{
				"post_id": "ckjwawqyx002sesu362hf8zjt",
				"tag_id": "ckjwawqwt000besu33a677oai"
			},
			{
				"post_id": "ckjwawqyx002sesu362hf8zjt",
				"tag_id": "ckjwawqws000aesu3226y8f4y"
			},
			{
				"post_id": "ckjwawqyy002vesu37213e4z5",
				"tag_id": "ckjwawqxx001desu3fhhm80hl"
			},
			{
				"post_id": "ckjwawqyy002vesu37213e4z5",
				"tag_id": "ckjwawqy5001nesu3474ofkla"
			},
			{
				"post_id": "ckjwawqyy002vesu37213e4z5",
				"tag_id": "ckjwawqya001vesu32xy53n37"
			},
			{
				"post_id": "ckjwawqyy002vesu37213e4z5",
				"tag_id": "ckjwawqxr0013esu3en1qetgj"
			},
			{
				"post_id": "ckjwawqz1002zesu32ok43wrf",
				"tag_id": "ckjwawqwt000besu33a677oai"
			},
			{
				"post_id": "ckjwawqz1002zesu32ok43wrf",
				"tag_id": "ckjwawqws000aesu3226y8f4y"
			},
			{
				"post_id": "ckjwawqz30032esu348ao2l5s",
				"tag_id": "ckjwawqxx001desu3fhhm80hl"
			},
			{
				"post_id": "ckjwawqz30032esu348ao2l5s",
				"tag_id": "ckjwawqy5001nesu3474ofkla"
			},
			{
				"post_id": "ckjwawqz30032esu348ao2l5s",
				"tag_id": "ckjwawqya001vesu32xy53n37"
			},
			{
				"post_id": "ckjwawqz30032esu348ao2l5s",
				"tag_id": "ckjwawqz80038esu361qoaojt"
			},
			{
				"post_id": "ckjwawqz60036esu3fkg20bzq",
				"tag_id": "ckjwawqxx001desu3fhhm80hl"
			},
			{
				"post_id": "ckjwawqz60036esu3fkg20bzq",
				"tag_id": "ckjwawqy5001nesu3474ofkla"
			},
			{
				"post_id": "ckjwawqz60036esu3fkg20bzq",
				"tag_id": "ckjwawqya001vesu32xy53n37"
			},
			{
				"post_id": "ckjwawqz60036esu3fkg20bzq",
				"tag_id": "ckjwawqza003cesu3da7ihwl7"
			},
			{
				"post_id": "ckjwawqz60036esu3fkg20bzq",
				"tag_id": "ckjwawqzg003mesu33t1h0kd2"
			},
			{
				"post_id": "ckjwawqz60036esu3fkg20bzq",
				"tag_id": "ckjwawqz80038esu361qoaojt"
			},
			{
				"post_id": "ckjwawqz9003aesu36y3p7296",
				"tag_id": "ckjwawqxx001desu3fhhm80hl"
			},
			{
				"post_id": "ckjwawqz9003aesu36y3p7296",
				"tag_id": "ckjwawqya001vesu32xy53n37"
			},
			{
				"post_id": "ckjwawqz9003aesu36y3p7296",
				"tag_id": "ckjwawqzm003uesu36zzs45h3"
			},
			{
				"post_id": "ckjwawqzb003eesu37xbtcrg0",
				"tag_id": "ckjwawqy5001nesu3474ofkla"
			},
			{
				"post_id": "ckjwawqzb003eesu37xbtcrg0",
				"tag_id": "ckjwawqya001vesu32xy53n37"
			},
			{
				"post_id": "ckjwawqzb003eesu37xbtcrg0",
				"tag_id": "ckjwawqzm003uesu36zzs45h3"
			},
			{
				"post_id": "ckjwawqzb003eesu37xbtcrg0",
				"tag_id": "ckjwawqz80038esu361qoaojt"
			},
			{
				"post_id": "ckjwawqzc003hesu3enww6teu",
				"tag_id": "ckjwawqy5001nesu3474ofkla"
			},
			{
				"post_id": "ckjwawqzc003hesu3enww6teu",
				"tag_id": "ckjwawqya001vesu32xy53n37"
			},
			{
				"post_id": "ckjwawqzc003hesu3enww6teu",
				"tag_id": "ckjwawqzm003uesu36zzs45h3"
			},
			{
				"post_id": "ckjwawqzc003hesu3enww6teu",
				"tag_id": "ckjwawqz80038esu361qoaojt"
			},
			{
				"post_id": "ckjwawqzf003lesu31sai6h3i",
				"tag_id": "ckjwawqza003cesu3da7ihwl7"
			},
			{
				"post_id": "ckjwawqzf003lesu31sai6h3i",
				"tag_id": "ckjwawqz80038esu361qoaojt"
			},
			{
				"post_id": "ckjwawqzh003pesu39ra8azcl",
				"tag_id": "ckjwawqza003cesu3da7ihwl7"
			},
			{
				"post_id": "ckjwawqzh003pesu39ra8azcl",
				"tag_id": "ckjwawqzm003uesu36zzs45h3"
			},
			{
				"post_id": "ckjwawqzh003pesu39ra8azcl",
				"tag_id": "ckjwawqxr0013esu3en1qetgj"
			},
			{
				"post_id": "ckjwawqzj003sesu39ab910jq",
				"tag_id": "ckjwawqy5001nesu3474ofkla"
			},
			{
				"post_id": "ckjwawqzj003sesu39ab910jq",
				"tag_id": "ckjwawr05004mesu35e6o5cao"
			},
			{
				"post_id": "ckjwawqzj003sesu39ab910jq",
				"tag_id": "ckjwawqxr0013esu3en1qetgj"
			},
			{
				"post_id": "ckjwawqzn003wesu3ghejds7s",
				"tag_id": "ckjwawqzm003uesu36zzs45h3"
			},
			{
				"post_id": "ckjwawqzn003wesu3ghejds7s",
				"tag_id": "ckjwawr09004tesu3027u8xoc"
			},
			{
				"post_id": "ckjwawqzn003wesu3ghejds7s",
				"tag_id": "ckjwawqxr0013esu3en1qetgj"
			},
			{
				"post_id": "ckjwawqzp003zesu32jdzamkm",
				"tag_id": "ckjwawqy5001nesu3474ofkla"
			},
			{
				"post_id": "ckjwawqzp003zesu32jdzamkm",
				"tag_id": "ckjwawqza003cesu3da7ihwl7"
			},
			{
				"post_id": "ckjwawqzp003zesu32jdzamkm",
				"tag_id": "ckjwawqzm003uesu36zzs45h3"
			},
			{
				"post_id": "ckjwawqzp003zesu32jdzamkm",
				"tag_id": "ckjwawqz80038esu361qoaojt"
			},
			{
				"post_id": "ckjwawqzs0043esu31ory5xd4",
				"tag_id": "ckjwawqy5001nesu3474ofkla"
			},
			{
				"post_id": "ckjwawqzs0043esu31ory5xd4",
				"tag_id": "ckjwawqzm003uesu36zzs45h3"
			},
			{
				"post_id": "ckjwawqzs0043esu31ory5xd4",
				"tag_id": "ckjwawr05004mesu35e6o5cao"
			},
			{
				"post_id": "ckjwawqzs0043esu31ory5xd4",
				"tag_id": "ckjwawqz80038esu361qoaojt"
			},
			{
				"post_id": "ckjwawqzu0046esu39wsb0489",
				"tag_id": "ckjwawqza003cesu3da7ihwl7"
			},
			{
				"post_id": "ckjwawqzu0046esu39wsb0489",
				"tag_id": "ckjwawqzm003uesu36zzs45h3"
			},
			{
				"post_id": "ckjwawqzu0046esu39wsb0489",
				"tag_id": "ckjwawr05004mesu35e6o5cao"
			},
			{
				"post_id": "ckjwawqzu0046esu39wsb0489",
				"tag_id": "ckjwawqxr0013esu3en1qetgj"
			},
			{
				"post_id": "ckjwawqzx004aesu348so8eit",
				"tag_id": "ckjwawqy5001nesu3474ofkla"
			},
			{
				"post_id": "ckjwawqzx004aesu348so8eit",
				"tag_id": "ckjwawqza003cesu3da7ihwl7"
			},
			{
				"post_id": "ckjwawqzx004aesu348so8eit",
				"tag_id": "ckjwawr05004mesu35e6o5cao"
			},
			{
				"post_id": "ckjwawqzx004aesu348so8eit",
				"tag_id": "ckjwawqz80038esu361qoaojt"
			},
			{
				"post_id": "ckjwawqzy004desu3bu4m9sdu",
				"tag_id": "ckjwawqy5001nesu3474ofkla"
			},
			{
				"post_id": "ckjwawqzy004desu3bu4m9sdu",
				"tag_id": "ckjwawqzm003uesu36zzs45h3"
			},
			{
				"post_id": "ckjwawqzy004desu3bu4m9sdu",
				"tag_id": "ckjwawr09004tesu3027u8xoc"
			},
			{
				"post_id": "ckjwawqzy004desu3bu4m9sdu",
				"tag_id": "ckjwawqxr0013esu3en1qetgj"
			},
			{
				"post_id": "ckjwawr02004hesu3czig33f3",
				"tag_id": "ckjwawqya001vesu32xy53n37"
			},
			{
				"post_id": "ckjwawr02004hesu3czig33f3",
				"tag_id": "ckjwawqyp002hesu332ywfowb"
			},
			{
				"post_id": "ckjwawr02004hesu3czig33f3",
				"tag_id": "ckjwawqz80038esu361qoaojt"
			},
			{
				"post_id": "ckjwawr06004oesu3gpnhh480",
				"tag_id": "ckjwawr0z005uesu34qj0fnta"
			},
			{
				"post_id": "ckjwawr06004oesu3gpnhh480",
				"tag_id": "ckjwawr130060esu3dlofak6h"
			},
			{
				"post_id": "ckjwawr06004oesu3gpnhh480",
				"tag_id": "ckjwawr150065esu3cmejenvf"
			},
			{
				"post_id": "ckjwawr06004oesu3gpnhh480",
				"tag_id": "ckjwawqz80038esu361qoaojt"
			},
			{
				"post_id": "ckjwawr08004resu3h0gqfqza",
				"tag_id": "ckjwawqya001vesu32xy53n37"
			},
			{
				"post_id": "ckjwawr08004resu3h0gqfqza",
				"tag_id": "ckjwawqza003cesu3da7ihwl7"
			},
			{
				"post_id": "ckjwawr08004resu3h0gqfqza",
				"tag_id": "ckjwawr18006aesu3bka33fwc"
			},
			{
				"post_id": "ckjwawr08004resu3h0gqfqza",
				"tag_id": "ckjwawr1a006fesu3coce1z3x"
			},
			{
				"post_id": "ckjwawr08004resu3h0gqfqza",
				"tag_id": "ckjwawqxr0013esu3en1qetgj"
			},
			{
				"post_id": "ckjwawr0a004vesu3beo17khq",
				"tag_id": "ckjwawqya001vesu32xy53n37"
			},
			{
				"post_id": "ckjwawr0a004vesu3beo17khq",
				"tag_id": "ckjwawqza003cesu3da7ihwl7"
			},
			{
				"post_id": "ckjwawr0a004vesu3beo17khq",
				"tag_id": "ckjwawr18006aesu3bka33fwc"
			},
			{
				"post_id": "ckjwawr0a004vesu3beo17khq",
				"tag_id": "ckjwawr1a006fesu3coce1z3x"
			},
			{
				"post_id": "ckjwawr0a004vesu3beo17khq",
				"tag_id": "ckjwawqxr0013esu3en1qetgj"
			},
			{
				"post_id": "ckjwawr0c004yesu31jt7fpc2",
				"tag_id": "ckjwawr1c006oesu380pzdd25"
			},
			{
				"post_id": "ckjwawr0c004yesu31jt7fpc2",
				"tag_id": "ckjwawr1d006resu31ostfbe9"
			},
			{
				"post_id": "ckjwawr0c004yesu31jt7fpc2",
				"tag_id": "ckjwawr1e006uesu37pl6a9z6"
			},
			{
				"post_id": "ckjwawr0f0051esu3feiod2ck",
				"tag_id": "ckjwawqy5001nesu3474ofkla"
			},
			{
				"post_id": "ckjwawr0f0051esu3feiod2ck",
				"tag_id": "ckjwawqya001vesu32xy53n37"
			},
			{
				"post_id": "ckjwawr0f0051esu3feiod2ck",
				"tag_id": "ckjwawqza003cesu3da7ihwl7"
			},
			{
				"post_id": "ckjwawr0f0051esu3feiod2ck",
				"tag_id": "ckjwawr05004mesu35e6o5cao"
			},
			{
				"post_id": "ckjwawr0f0051esu3feiod2ck",
				"tag_id": "ckjwawqxr0013esu3en1qetgj"
			},
			{
				"post_id": "ckjwawr0j0055esu39q1f22wo",
				"tag_id": "ckjwawqwl0006esu3btfg37cv"
			},
			{
				"post_id": "ckjwawr0j0055esu39q1f22wo",
				"tag_id": "ckjwawqzg003mesu33t1h0kd2"
			},
			{
				"post_id": "ckjwawr0j0055esu39q1f22wo",
				"tag_id": "ckjwawr1f006yesu331cv4mbh"
			},
			{
				"post_id": "ckjwawr0j0055esu39q1f22wo",
				"tag_id": "ckjwawqxr0013esu3en1qetgj"
			},
			{
				"post_id": "ckjwawr0l0058esu36rag20wh",
				"tag_id": "ckjwawqwl0006esu3btfg37cv"
			},
			{
				"post_id": "ckjwawr0l0058esu36rag20wh",
				"tag_id": "ckjwawr1g0071esu332p70bzk"
			},
			{
				"post_id": "ckjwawr0l0058esu36rag20wh",
				"tag_id": "ckjwawqxr0013esu3en1qetgj"
			},
			{
				"post_id": "ckjwawr0p005cesu3asdraksc",
				"tag_id": "ckjwawqya001vesu32xy53n37"
			},
			{
				"post_id": "ckjwawr0p005cesu3asdraksc",
				"tag_id": "ckjwawqza003cesu3da7ihwl7"
			},
			{
				"post_id": "ckjwawr0p005cesu3asdraksc",
				"tag_id": "ckjwawr18006aesu3bka33fwc"
			},
			{
				"post_id": "ckjwawr0p005cesu3asdraksc",
				"tag_id": "ckjwawr1h0077esu3ctqe8se4"
			},
			{
				"post_id": "ckjwawr0p005cesu3asdraksc",
				"tag_id": "ckjwawqxr0013esu3en1qetgj"
			},
			{
				"post_id": "ckjwawr0q005fesu3fo1wcj2a",
				"tag_id": "ckjwawqya001vesu32xy53n37"
			},
			{
				"post_id": "ckjwawr0q005fesu3fo1wcj2a",
				"tag_id": "ckjwawr18006aesu3bka33fwc"
			},
			{
				"post_id": "ckjwawr0q005fesu3fo1wcj2a",
				"tag_id": "ckjwawr1j007desu31v7bdvkt"
			},
			{
				"post_id": "ckjwawr0q005fesu3fo1wcj2a",
				"tag_id": "ckjwawqxr0013esu3en1qetgj"
			},
			{
				"post_id": "ckjwawr0t005jesu3bhcd4ro8",
				"tag_id": "ckjwawr18006aesu3bka33fwc"
			},
			{
				"post_id": "ckjwawr0t005jesu3bhcd4ro8",
				"tag_id": "ckjwawr1k007kesu3duhm5w9p"
			},
			{
				"post_id": "ckjwawr0t005jesu3bhcd4ro8",
				"tag_id": "ckjwawr1k007nesu3grp01d8h"
			},
			{
				"post_id": "ckjwawr0u005mesu3a02tawcs",
				"tag_id": "ckjwawr05004mesu35e6o5cao"
			},
			{
				"post_id": "ckjwawr0u005mesu3a02tawcs",
				"tag_id": "ckjwawr1f006yesu331cv4mbh"
			},
			{
				"post_id": "ckjwawr0u005mesu3a02tawcs",
				"tag_id": "ckjwawr1m007tesu30wtb3rwd"
			},
			{
				"post_id": "ckjwawr0x005qesu39ef53tdk",
				"tag_id": "ckjwawr18006aesu3bka33fwc"
			},
			{
				"post_id": "ckjwawr0x005qesu39ef53tdk",
				"tag_id": "ckjwawr1k007kesu3duhm5w9p"
			},
			{
				"post_id": "ckjwawr0y005tesu34slzg04c",
				"tag_id": "ckjwawr1m007tesu30wtb3rwd"
			},
			{
				"post_id": "ckjwawr0y005tesu34slzg04c",
				"tag_id": "ckjwawr1p0085esu316x373pr"
			},
			{
				"post_id": "ckjwawr10005xesu3bwt7ckmk",
				"tag_id": "ckjwawr1q0089esu3dzddd4yl"
			},
			{
				"post_id": "ckjwawr10005xesu3bwt7ckmk",
				"tag_id": "ckjwawr1q008cesu3a5sqhove"
			},
			{
				"post_id": "ckjwawr11005zesu33iax746a",
				"tag_id": "ckjwawr1m007tesu30wtb3rwd"
			},
			{
				"post_id": "ckjwawr11005zesu33iax746a",
				"tag_id": "ckjwawr1s008iesu3g550abj6"
			},
			{
				"post_id": "ckjwawr130062esu3fprh2l4l",
				"tag_id": "ckjwawr1q0089esu3dzddd4yl"
			},
			{
				"post_id": "ckjwawr140064esu377j10ksf",
				"tag_id": "ckjwawr1f006yesu331cv4mbh"
			},
			{
				"post_id": "ckjwawr140064esu377j10ksf",
				"tag_id": "ckjwawr1s008iesu3g550abj6"
			},
			{
				"post_id": "ckjwawr140064esu377j10ksf",
				"tag_id": "ckjwawr1u008oesu365hvdptq"
			},
			{
				"post_id": "ckjwawr160067esu3dnfd01u4",
				"tag_id": "ckjwawr1m007tesu30wtb3rwd"
			},
			{
				"post_id": "ckjwawr160067esu3dnfd01u4",
				"tag_id": "ckjwawr1p0085esu316x373pr"
			},
			{
				"post_id": "ckjwawr170069esu3fbzd1bsn",
				"tag_id": "ckjwawr1q0089esu3dzddd4yl"
			},
			{
				"post_id": "ckjwawr170069esu3fbzd1bsn",
				"tag_id": "ckjwawr1z0094esu3bafx1xul"
			},
			{
				"post_id": "ckjwawr170069esu3fbzd1bsn",
				"tag_id": "ckjwawr210099esu3dl875gfw"
			},
			{
				"post_id": "ckjwawr18006cesu37cgzdjr4",
				"tag_id": "ckjwawr1m007tesu30wtb3rwd"
			},
			{
				"post_id": "ckjwawr18006cesu37cgzdjr4",
				"tag_id": "ckjwawr22009desu37yv8er1f"
			},
			{
				"post_id": "ckjwawr5y009hesu3heyydu6h",
				"tag_id": "ckjwawr1m007tesu30wtb3rwd"
			},
			{
				"post_id": "ckjwawr5y009hesu3heyydu6h",
				"tag_id": "ckjwawr1p0085esu316x373pr"
			},
			{
				"post_id": "ckjwawr66009jesu3havg1l72",
				"tag_id": "ckjwawr6d009oesu32pgd8oxu"
			},
			{
				"post_id": "ckjwawr66009jesu3havg1l72",
				"tag_id": "ckjwawr6i009sesu33q0v4y9n"
			},
			{
				"post_id": "ckjwawr6a009mesu31jzb5ift",
				"tag_id": "ckjwawr05004mesu35e6o5cao"
			},
			{
				"post_id": "ckjwawr6a009mesu31jzb5ift",
				"tag_id": "ckjwawr6l009uesu32pv49k35"
			}
		]
	}
}